/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#pragma once
#include <vector>
#include <map>
#include <sstream>
#include <string>
#include "ifcpp/model/GlobalDefines.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingObject.h"

// TYPE IfcKnotType = ENUMERATION OF	(UNIFORM_KNOTS	,QUASI_UNIFORM_KNOTS	,PIECEWISE_BEZIER_KNOTS	,UNSPECIFIED);
class IFCQUERY_EXPORT IfcKnotType : virtual public BuildingObject
{
public:
	enum IfcKnotTypeEnum
	{
		ENUM_UNIFORM_KNOTS,
		ENUM_QUASI_UNIFORM_KNOTS,
		ENUM_PIECEWISE_BEZIER_KNOTS,
		ENUM_UNSPECIFIED
	};

	IfcKnotType() = default;
	IfcKnotType( IfcKnotTypeEnum e ) { m_enum = e; }
	~IfcKnotType();
	virtual const char* className() const { return "IfcKnotType"; }
	virtual shared_ptr<BuildingObject> getDeepCopy( BuildingCopyOptions& options );
	virtual void getStepParameter( std::stringstream& stream, bool is_select_type = false ) const;
	virtual const std::wstring toString() const;
	static shared_ptr<IfcKnotType> createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<BuildingEntity> >& map );
	IfcKnotTypeEnum m_enum;
};

