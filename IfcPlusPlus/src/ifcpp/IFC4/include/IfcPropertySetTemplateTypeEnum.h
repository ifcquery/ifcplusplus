/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#pragma once
#include <vector>
#include <map>
#include <sstream>
#include <string>
#include "ifcpp/model/GlobalDefines.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingObject.h"

// TYPE IfcPropertySetTemplateTypeEnum = ENUMERATION OF	(PSET_TYPEDRIVENONLY	,PSET_TYPEDRIVENOVERRIDE	,PSET_OCCURRENCEDRIVEN	,PSET_PERFORMANCEDRIVEN	,QTO_TYPEDRIVENONLY	,QTO_TYPEDRIVENOVERRIDE	,QTO_OCCURRENCEDRIVEN	,NOTDEFINED);
class IFCQUERY_EXPORT IfcPropertySetTemplateTypeEnum : virtual public BuildingObject
{
public:
	enum IfcPropertySetTemplateTypeEnumEnum
	{
		ENUM_PSET_TYPEDRIVENONLY,
		ENUM_PSET_TYPEDRIVENOVERRIDE,
		ENUM_PSET_OCCURRENCEDRIVEN,
		ENUM_PSET_PERFORMANCEDRIVEN,
		ENUM_QTO_TYPEDRIVENONLY,
		ENUM_QTO_TYPEDRIVENOVERRIDE,
		ENUM_QTO_OCCURRENCEDRIVEN,
		ENUM_NOTDEFINED
	};

	IfcPropertySetTemplateTypeEnum() = default;
	IfcPropertySetTemplateTypeEnum( IfcPropertySetTemplateTypeEnumEnum e ) { m_enum = e; }
	~IfcPropertySetTemplateTypeEnum();
	virtual const char* className() const { return "IfcPropertySetTemplateTypeEnum"; }
	virtual shared_ptr<BuildingObject> getDeepCopy( BuildingCopyOptions& options );
	virtual void getStepParameter( std::stringstream& stream, bool is_select_type = false ) const;
	virtual const std::wstring toString() const;
	static shared_ptr<IfcPropertySetTemplateTypeEnum> createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<BuildingEntity> >& map );
	IfcPropertySetTemplateTypeEnumEnum m_enum;
};

