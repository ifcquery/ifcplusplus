/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#pragma once
#include <vector>
#include <map>
#include <sstream>
#include <string>
#include "ifcpp/model/GlobalDefines.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingObject.h"
#include "IfcTextLiteral.h"
class IFCQUERY_EXPORT IfcPlanarExtent;
class IFCQUERY_EXPORT IfcBoxAlignment;
//ENTITY
class IFCQUERY_EXPORT IfcTextLiteralWithExtent : public IfcTextLiteral
{ 
public:
	IfcTextLiteralWithExtent() = default;
	IfcTextLiteralWithExtent( int id );
	~IfcTextLiteralWithExtent();
	virtual shared_ptr<BuildingObject> getDeepCopy( BuildingCopyOptions& options );
	virtual void getStepLine( std::stringstream& stream ) const;
	virtual void getStepParameter( std::stringstream& stream, bool is_select_type = false ) const;
	virtual void readStepArguments( const std::vector<std::wstring>& args, const std::map<int,shared_ptr<BuildingEntity> >& map );
	virtual void setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self );
	virtual size_t getNumAttributes() { return 5; }
	virtual void getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const;
	virtual void getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const;
	virtual void unlinkFromInverseCounterparts();
	virtual const char* className() const { return "IfcTextLiteralWithExtent"; }
	virtual const std::wstring toString() const;


	// IfcRepresentationItem -----------------------------------------------------------
	// inverse attributes:
	//  std::vector<weak_ptr<IfcPresentationLayerAssignment> >	m_LayerAssignment_inverse;
	//  std::vector<weak_ptr<IfcStyledItem> >					m_StyledByItem_inverse;

	// IfcGeometricRepresentationItem -----------------------------------------------------------

	// IfcTextLiteral -----------------------------------------------------------
	// attributes:
	//  shared_ptr<IfcPresentableText>							m_Literal;
	//  shared_ptr<IfcAxis2Placement>							m_Placement;
	//  shared_ptr<IfcTextPath>									m_Path;

	// IfcTextLiteralWithExtent -----------------------------------------------------------
	// attributes:
	shared_ptr<IfcPlanarExtent>								m_Extent;
	shared_ptr<IfcBoxAlignment>								m_BoxAlignment;
};

