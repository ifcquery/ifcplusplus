/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4/include/IfcAirTerminalTypeEnum.h"

// TYPE IfcAirTerminalTypeEnum = ENUMERATION OF	(DIFFUSER	,GRILLE	,LOUVRE	,REGISTER	,USERDEFINED	,NOTDEFINED);
IfcAirTerminalTypeEnum::~IfcAirTerminalTypeEnum() {}
shared_ptr<BuildingObject> IfcAirTerminalTypeEnum::getDeepCopy( BuildingCopyOptions& options )
{
	shared_ptr<IfcAirTerminalTypeEnum> copy_self( new IfcAirTerminalTypeEnum() );
	copy_self->m_enum = m_enum;
	return copy_self;
}
void IfcAirTerminalTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type ) const
{
	if( is_select_type ) { stream << "IFCAIRTERMINALTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_DIFFUSER:	stream << ".DIFFUSER."; break;
		case ENUM_GRILLE:	stream << ".GRILLE."; break;
		case ENUM_LOUVRE:	stream << ".LOUVRE."; break;
		case ENUM_REGISTER:	stream << ".REGISTER."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
const std::wstring IfcAirTerminalTypeEnum::toString() const
{
	switch( m_enum ) 
	{
		case ENUM_DIFFUSER:	return L"DIFFUSER";
		case ENUM_GRILLE:	return L"GRILLE";
		case ENUM_LOUVRE:	return L"LOUVRE";
		case ENUM_REGISTER:	return L"REGISTER";
		case ENUM_USERDEFINED:	return L"USERDEFINED";
		case ENUM_NOTDEFINED:	return L"NOTDEFINED";
	}
	return L"";
}
shared_ptr<IfcAirTerminalTypeEnum> IfcAirTerminalTypeEnum::createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<BuildingEntity> >& map )
{
	if( arg.compare( L"$" ) == 0 ) { return shared_ptr<IfcAirTerminalTypeEnum>(); }
	if( arg.compare( L"*" ) == 0 ) { return shared_ptr<IfcAirTerminalTypeEnum>(); }
	shared_ptr<IfcAirTerminalTypeEnum> type_object( new IfcAirTerminalTypeEnum() );
	if( boost::iequals( arg, L".DIFFUSER." ) )
	{
		type_object->m_enum = IfcAirTerminalTypeEnum::ENUM_DIFFUSER;
	}
	else if( boost::iequals( arg, L".GRILLE." ) )
	{
		type_object->m_enum = IfcAirTerminalTypeEnum::ENUM_GRILLE;
	}
	else if( boost::iequals( arg, L".LOUVRE." ) )
	{
		type_object->m_enum = IfcAirTerminalTypeEnum::ENUM_LOUVRE;
	}
	else if( boost::iequals( arg, L".REGISTER." ) )
	{
		type_object->m_enum = IfcAirTerminalTypeEnum::ENUM_REGISTER;
	}
	else if( boost::iequals( arg, L".USERDEFINED." ) )
	{
		type_object->m_enum = IfcAirTerminalTypeEnum::ENUM_USERDEFINED;
	}
	else if( boost::iequals( arg, L".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcAirTerminalTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
