/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4/include/IfcDerivedMeasureValue.h"
#include "ifcpp/IFC4/include/IfcElectricChargeMeasure.h"

// TYPE IfcElectricChargeMeasure = REAL;
IfcElectricChargeMeasure::IfcElectricChargeMeasure( double value ) { m_value = value; }
IfcElectricChargeMeasure::~IfcElectricChargeMeasure() {}
shared_ptr<BuildingObject> IfcElectricChargeMeasure::getDeepCopy( BuildingCopyOptions& options )
{
	shared_ptr<IfcElectricChargeMeasure> copy_self( new IfcElectricChargeMeasure() );
	copy_self->m_value = m_value;
	return copy_self;
}
void IfcElectricChargeMeasure::getStepParameter( std::stringstream& stream, bool is_select_type ) const
{
	if( is_select_type ) { stream << "IFCELECTRICCHARGEMEASURE("; }
	stream << m_value;
	if( is_select_type ) { stream << ")"; }
}
const std::wstring IfcElectricChargeMeasure::toString() const
{
	std::wstringstream strs;
	strs << m_value;
	return strs.str();
}
shared_ptr<IfcElectricChargeMeasure> IfcElectricChargeMeasure::createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<BuildingEntity> >& map )
{
	if( arg.compare( L"$" ) == 0 ) { return shared_ptr<IfcElectricChargeMeasure>(); }
	if( arg.compare( L"*" ) == 0 ) { return shared_ptr<IfcElectricChargeMeasure>(); }
	shared_ptr<IfcElectricChargeMeasure> type_object( new IfcElectricChargeMeasure() );
	readReal( arg, type_object->m_value );
	return type_object;
}
