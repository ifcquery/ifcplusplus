/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4/include/IfcElementCompositionEnum.h"

// TYPE IfcElementCompositionEnum = ENUMERATION OF	(COMPLEX	,ELEMENT	,PARTIAL);
IfcElementCompositionEnum::~IfcElementCompositionEnum() {}
shared_ptr<BuildingObject> IfcElementCompositionEnum::getDeepCopy( BuildingCopyOptions& options )
{
	shared_ptr<IfcElementCompositionEnum> copy_self( new IfcElementCompositionEnum() );
	copy_self->m_enum = m_enum;
	return copy_self;
}
void IfcElementCompositionEnum::getStepParameter( std::stringstream& stream, bool is_select_type ) const
{
	if( is_select_type ) { stream << "IFCELEMENTCOMPOSITIONENUM("; }
	switch( m_enum )
	{
		case ENUM_COMPLEX:	stream << ".COMPLEX."; break;
		case ENUM_ELEMENT:	stream << ".ELEMENT."; break;
		case ENUM_PARTIAL:	stream << ".PARTIAL."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
const std::wstring IfcElementCompositionEnum::toString() const
{
	switch( m_enum ) 
	{
		case ENUM_COMPLEX:	return L"COMPLEX";
		case ENUM_ELEMENT:	return L"ELEMENT";
		case ENUM_PARTIAL:	return L"PARTIAL";
	}
	return L"";
}
shared_ptr<IfcElementCompositionEnum> IfcElementCompositionEnum::createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<BuildingEntity> >& map )
{
	if( arg.compare( L"$" ) == 0 ) { return shared_ptr<IfcElementCompositionEnum>(); }
	if( arg.compare( L"*" ) == 0 ) { return shared_ptr<IfcElementCompositionEnum>(); }
	shared_ptr<IfcElementCompositionEnum> type_object( new IfcElementCompositionEnum() );
	if( boost::iequals( arg, L".COMPLEX." ) )
	{
		type_object->m_enum = IfcElementCompositionEnum::ENUM_COMPLEX;
	}
	else if( boost::iequals( arg, L".ELEMENT." ) )
	{
		type_object->m_enum = IfcElementCompositionEnum::ENUM_ELEMENT;
	}
	else if( boost::iequals( arg, L".PARTIAL." ) )
	{
		type_object->m_enum = IfcElementCompositionEnum::ENUM_PARTIAL;
	}
	return type_object;
}
