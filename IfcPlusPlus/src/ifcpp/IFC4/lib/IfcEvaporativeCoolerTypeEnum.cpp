/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4/include/IfcEvaporativeCoolerTypeEnum.h"

// TYPE IfcEvaporativeCoolerTypeEnum = ENUMERATION OF	(DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER	,DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER	,DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER	,DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER	,DIRECTEVAPORATIVEAIRWASHER	,INDIRECTEVAPORATIVEPACKAGEAIRCOOLER	,INDIRECTEVAPORATIVEWETCOIL	,INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER	,INDIRECTDIRECTCOMBINATION	,USERDEFINED	,NOTDEFINED);
IfcEvaporativeCoolerTypeEnum::~IfcEvaporativeCoolerTypeEnum() {}
shared_ptr<BuildingObject> IfcEvaporativeCoolerTypeEnum::getDeepCopy( BuildingCopyOptions& options )
{
	shared_ptr<IfcEvaporativeCoolerTypeEnum> copy_self( new IfcEvaporativeCoolerTypeEnum() );
	copy_self->m_enum = m_enum;
	return copy_self;
}
void IfcEvaporativeCoolerTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type ) const
{
	if( is_select_type ) { stream << "IFCEVAPORATIVECOOLERTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER:	stream << ".DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER."; break;
		case ENUM_DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER:	stream << ".DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER."; break;
		case ENUM_DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER:	stream << ".DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER."; break;
		case ENUM_DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER:	stream << ".DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER."; break;
		case ENUM_DIRECTEVAPORATIVEAIRWASHER:	stream << ".DIRECTEVAPORATIVEAIRWASHER."; break;
		case ENUM_INDIRECTEVAPORATIVEPACKAGEAIRCOOLER:	stream << ".INDIRECTEVAPORATIVEPACKAGEAIRCOOLER."; break;
		case ENUM_INDIRECTEVAPORATIVEWETCOIL:	stream << ".INDIRECTEVAPORATIVEWETCOIL."; break;
		case ENUM_INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER:	stream << ".INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER."; break;
		case ENUM_INDIRECTDIRECTCOMBINATION:	stream << ".INDIRECTDIRECTCOMBINATION."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
const std::wstring IfcEvaporativeCoolerTypeEnum::toString() const
{
	switch( m_enum ) 
	{
		case ENUM_DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER:	return L"DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER";
		case ENUM_DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER:	return L"DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER";
		case ENUM_DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER:	return L"DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER";
		case ENUM_DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER:	return L"DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER";
		case ENUM_DIRECTEVAPORATIVEAIRWASHER:	return L"DIRECTEVAPORATIVEAIRWASHER";
		case ENUM_INDIRECTEVAPORATIVEPACKAGEAIRCOOLER:	return L"INDIRECTEVAPORATIVEPACKAGEAIRCOOLER";
		case ENUM_INDIRECTEVAPORATIVEWETCOIL:	return L"INDIRECTEVAPORATIVEWETCOIL";
		case ENUM_INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER:	return L"INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER";
		case ENUM_INDIRECTDIRECTCOMBINATION:	return L"INDIRECTDIRECTCOMBINATION";
		case ENUM_USERDEFINED:	return L"USERDEFINED";
		case ENUM_NOTDEFINED:	return L"NOTDEFINED";
	}
	return L"";
}
shared_ptr<IfcEvaporativeCoolerTypeEnum> IfcEvaporativeCoolerTypeEnum::createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<BuildingEntity> >& map )
{
	if( arg.compare( L"$" ) == 0 ) { return shared_ptr<IfcEvaporativeCoolerTypeEnum>(); }
	if( arg.compare( L"*" ) == 0 ) { return shared_ptr<IfcEvaporativeCoolerTypeEnum>(); }
	shared_ptr<IfcEvaporativeCoolerTypeEnum> type_object( new IfcEvaporativeCoolerTypeEnum() );
	if( boost::iequals( arg, L".DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER." ) )
	{
		type_object->m_enum = IfcEvaporativeCoolerTypeEnum::ENUM_DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER;
	}
	else if( boost::iequals( arg, L".DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER." ) )
	{
		type_object->m_enum = IfcEvaporativeCoolerTypeEnum::ENUM_DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER;
	}
	else if( boost::iequals( arg, L".DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER." ) )
	{
		type_object->m_enum = IfcEvaporativeCoolerTypeEnum::ENUM_DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER;
	}
	else if( boost::iequals( arg, L".DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER." ) )
	{
		type_object->m_enum = IfcEvaporativeCoolerTypeEnum::ENUM_DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER;
	}
	else if( boost::iequals( arg, L".DIRECTEVAPORATIVEAIRWASHER." ) )
	{
		type_object->m_enum = IfcEvaporativeCoolerTypeEnum::ENUM_DIRECTEVAPORATIVEAIRWASHER;
	}
	else if( boost::iequals( arg, L".INDIRECTEVAPORATIVEPACKAGEAIRCOOLER." ) )
	{
		type_object->m_enum = IfcEvaporativeCoolerTypeEnum::ENUM_INDIRECTEVAPORATIVEPACKAGEAIRCOOLER;
	}
	else if( boost::iequals( arg, L".INDIRECTEVAPORATIVEWETCOIL." ) )
	{
		type_object->m_enum = IfcEvaporativeCoolerTypeEnum::ENUM_INDIRECTEVAPORATIVEWETCOIL;
	}
	else if( boost::iequals( arg, L".INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER." ) )
	{
		type_object->m_enum = IfcEvaporativeCoolerTypeEnum::ENUM_INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER;
	}
	else if( boost::iequals( arg, L".INDIRECTDIRECTCOMBINATION." ) )
	{
		type_object->m_enum = IfcEvaporativeCoolerTypeEnum::ENUM_INDIRECTDIRECTCOMBINATION;
	}
	else if( boost::iequals( arg, L".USERDEFINED." ) )
	{
		type_object->m_enum = IfcEvaporativeCoolerTypeEnum::ENUM_USERDEFINED;
	}
	else if( boost::iequals( arg, L".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcEvaporativeCoolerTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
