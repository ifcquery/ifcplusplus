/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4/include/IfcClosedShell.h"
#include "ifcpp/IFC4/include/IfcManifoldSolidBrep.h"
#include "ifcpp/IFC4/include/IfcPresentationLayerAssignment.h"
#include "ifcpp/IFC4/include/IfcStyledItem.h"

// ENTITY IfcManifoldSolidBrep 
IfcManifoldSolidBrep::IfcManifoldSolidBrep( int id ) { m_entity_id = id; }
IfcManifoldSolidBrep::~IfcManifoldSolidBrep() {}
shared_ptr<BuildingObject> IfcManifoldSolidBrep::getDeepCopy( BuildingCopyOptions& options )
{
	shared_ptr<IfcManifoldSolidBrep> copy_self( new IfcManifoldSolidBrep() );
	if( m_Outer ) { copy_self->m_Outer = dynamic_pointer_cast<IfcClosedShell>( m_Outer->getDeepCopy(options) ); }
	return copy_self;
}
void IfcManifoldSolidBrep::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_entity_id << "= IFCMANIFOLDSOLIDBREP" << "(";
	if( m_Outer ) { stream << "#" << m_Outer->m_entity_id; } else { stream << "$"; }
	stream << ");";
}
void IfcManifoldSolidBrep::getStepParameter( std::stringstream& stream, bool ) const { stream << "#" << m_entity_id; }
const std::wstring IfcManifoldSolidBrep::toString() const { return L"IfcManifoldSolidBrep"; }
void IfcManifoldSolidBrep::readStepArguments( const std::vector<std::wstring>& args, const std::map<int,shared_ptr<BuildingEntity> >& map )
{
	const size_t num_args = args.size();
	if( num_args != 1 ){ std::stringstream err; err << "Wrong parameter count for entity IfcManifoldSolidBrep, expecting 1, having " << num_args << ". Entity ID: " << m_entity_id << std::endl; throw BuildingException( err.str().c_str() ); }
	readEntityReference( args[0], m_Outer, map );
}
void IfcManifoldSolidBrep::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IfcSolidModel::getAttributes( vec_attributes );
	vec_attributes.emplace_back( std::make_pair( "Outer", m_Outer ) );
}
void IfcManifoldSolidBrep::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IfcSolidModel::getAttributesInverse( vec_attributes_inverse );
}
void IfcManifoldSolidBrep::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcSolidModel::setInverseCounterparts( ptr_self_entity );
}
void IfcManifoldSolidBrep::unlinkFromInverseCounterparts()
{
	IfcSolidModel::unlinkFromInverseCounterparts();
}
