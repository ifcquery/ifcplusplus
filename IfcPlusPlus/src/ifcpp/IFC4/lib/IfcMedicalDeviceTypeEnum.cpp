/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4/include/IfcMedicalDeviceTypeEnum.h"

// TYPE IfcMedicalDeviceTypeEnum = ENUMERATION OF	(AIRSTATION	,FEEDAIRUNIT	,OXYGENGENERATOR	,OXYGENPLANT	,VACUUMSTATION	,USERDEFINED	,NOTDEFINED);
IfcMedicalDeviceTypeEnum::~IfcMedicalDeviceTypeEnum() {}
shared_ptr<BuildingObject> IfcMedicalDeviceTypeEnum::getDeepCopy( BuildingCopyOptions& options )
{
	shared_ptr<IfcMedicalDeviceTypeEnum> copy_self( new IfcMedicalDeviceTypeEnum() );
	copy_self->m_enum = m_enum;
	return copy_self;
}
void IfcMedicalDeviceTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type ) const
{
	if( is_select_type ) { stream << "IFCMEDICALDEVICETYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_AIRSTATION:	stream << ".AIRSTATION."; break;
		case ENUM_FEEDAIRUNIT:	stream << ".FEEDAIRUNIT."; break;
		case ENUM_OXYGENGENERATOR:	stream << ".OXYGENGENERATOR."; break;
		case ENUM_OXYGENPLANT:	stream << ".OXYGENPLANT."; break;
		case ENUM_VACUUMSTATION:	stream << ".VACUUMSTATION."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
const std::wstring IfcMedicalDeviceTypeEnum::toString() const
{
	switch( m_enum ) 
	{
		case ENUM_AIRSTATION:	return L"AIRSTATION";
		case ENUM_FEEDAIRUNIT:	return L"FEEDAIRUNIT";
		case ENUM_OXYGENGENERATOR:	return L"OXYGENGENERATOR";
		case ENUM_OXYGENPLANT:	return L"OXYGENPLANT";
		case ENUM_VACUUMSTATION:	return L"VACUUMSTATION";
		case ENUM_USERDEFINED:	return L"USERDEFINED";
		case ENUM_NOTDEFINED:	return L"NOTDEFINED";
	}
	return L"";
}
shared_ptr<IfcMedicalDeviceTypeEnum> IfcMedicalDeviceTypeEnum::createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<BuildingEntity> >& map )
{
	if( arg.compare( L"$" ) == 0 ) { return shared_ptr<IfcMedicalDeviceTypeEnum>(); }
	if( arg.compare( L"*" ) == 0 ) { return shared_ptr<IfcMedicalDeviceTypeEnum>(); }
	shared_ptr<IfcMedicalDeviceTypeEnum> type_object( new IfcMedicalDeviceTypeEnum() );
	if( boost::iequals( arg, L".AIRSTATION." ) )
	{
		type_object->m_enum = IfcMedicalDeviceTypeEnum::ENUM_AIRSTATION;
	}
	else if( boost::iequals( arg, L".FEEDAIRUNIT." ) )
	{
		type_object->m_enum = IfcMedicalDeviceTypeEnum::ENUM_FEEDAIRUNIT;
	}
	else if( boost::iequals( arg, L".OXYGENGENERATOR." ) )
	{
		type_object->m_enum = IfcMedicalDeviceTypeEnum::ENUM_OXYGENGENERATOR;
	}
	else if( boost::iequals( arg, L".OXYGENPLANT." ) )
	{
		type_object->m_enum = IfcMedicalDeviceTypeEnum::ENUM_OXYGENPLANT;
	}
	else if( boost::iequals( arg, L".VACUUMSTATION." ) )
	{
		type_object->m_enum = IfcMedicalDeviceTypeEnum::ENUM_VACUUMSTATION;
	}
	else if( boost::iequals( arg, L".USERDEFINED." ) )
	{
		type_object->m_enum = IfcMedicalDeviceTypeEnum::ENUM_USERDEFINED;
	}
	else if( boost::iequals( arg, L".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcMedicalDeviceTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
