/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4/include/IfcPresentationStyleSelect.h"
#include "ifcpp/IFC4/include/IfcNullStyle.h"

// TYPE IfcNullStyle = ENUMERATION OF	(NULL);
IfcNullStyle::~IfcNullStyle() {}
shared_ptr<BuildingObject> IfcNullStyle::getDeepCopy( BuildingCopyOptions& options )
{
	shared_ptr<IfcNullStyle> copy_self( new IfcNullStyle() );
	copy_self->m_enum = m_enum;
	return copy_self;
}
void IfcNullStyle::getStepParameter( std::stringstream& stream, bool is_select_type ) const
{
	if( is_select_type ) { stream << "IFCNULLSTYLE("; }
	switch( m_enum )
	{
		case ENUM_ENUM_NULL:	stream << ".ENUM_NULL."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
const std::wstring IfcNullStyle::toString() const
{
	switch( m_enum ) 
	{
		case ENUM_ENUM_NULL:	return L"NULL";
	}
	return L"";
}
shared_ptr<IfcNullStyle> IfcNullStyle::createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<BuildingEntity> >& map )
{
	if( arg.compare( L"$" ) == 0 ) { return shared_ptr<IfcNullStyle>(); }
	if( arg.compare( L"*" ) == 0 ) { return shared_ptr<IfcNullStyle>(); }
	shared_ptr<IfcNullStyle> type_object( new IfcNullStyle() );
	if( boost::iequals( arg, L".ENUM_NULL." ) )
	{
		type_object->m_enum = IfcNullStyle::ENUM_ENUM_NULL;
	}
	return type_object;
}
