/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4/include/IfcLocalPlacement.h"
#include "ifcpp/IFC4/include/IfcObjectPlacement.h"
#include "ifcpp/IFC4/include/IfcProduct.h"

// ENTITY IfcObjectPlacement 
IfcObjectPlacement::IfcObjectPlacement() = default;
IfcObjectPlacement::IfcObjectPlacement( int id ) { m_entity_id = id; }
IfcObjectPlacement::~IfcObjectPlacement() = default;
shared_ptr<BuildingObject> IfcObjectPlacement::getDeepCopy( BuildingCopyOptions& options )
{
	shared_ptr<IfcObjectPlacement> copy_self( new IfcObjectPlacement() );
	return copy_self;
}
void IfcObjectPlacement::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_entity_id << "= IFCOBJECTPLACEMENT" << "(";
	stream << ");";
}
void IfcObjectPlacement::getStepParameter( std::stringstream& stream, bool  /*is_select_type*/) const { stream << "#" << m_entity_id; }
const std::wstring IfcObjectPlacement::toString() const { return L"IfcObjectPlacement"; }
void IfcObjectPlacement::readStepArguments( const std::vector<std::wstring>& args, const std::map<int,shared_ptr<BuildingEntity> >& map )
{
}
void IfcObjectPlacement::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
}
void IfcObjectPlacement::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	if( !m_PlacesObject_inverse.empty() )
	{
		shared_ptr<AttributeObjectVector> PlacesObject_inverse_vec_obj( new AttributeObjectVector() );
		for(const auto & i : m_PlacesObject_inverse)
		{
			if( !i.expired() )
			{
				PlacesObject_inverse_vec_obj->m_vec.push_back( shared_ptr<IfcProduct>( i ) );
			}
		}
		vec_attributes_inverse.emplace_back( "PlacesObject_inverse", PlacesObject_inverse_vec_obj );
	}
	if( !m_ReferencedByPlacements_inverse.empty() )
	{
		shared_ptr<AttributeObjectVector> ReferencedByPlacements_inverse_vec_obj( new AttributeObjectVector() );
		for(const auto & i : m_ReferencedByPlacements_inverse)
		{
			if( !i.expired() )
			{
				ReferencedByPlacements_inverse_vec_obj->m_vec.push_back( shared_ptr<IfcLocalPlacement>( i ) );
			}
		}
		vec_attributes_inverse.emplace_back( "ReferencedByPlacements_inverse", ReferencedByPlacements_inverse_vec_obj );
	}
}
void IfcObjectPlacement::setInverseCounterparts( shared_ptr<BuildingEntity>  /*ptr_self*/)
{
}
void IfcObjectPlacement::unlinkFromInverseCounterparts()
{
}
