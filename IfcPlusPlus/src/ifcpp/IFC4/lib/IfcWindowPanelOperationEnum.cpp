/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4/include/IfcWindowPanelOperationEnum.h"

// TYPE IfcWindowPanelOperationEnum = ENUMERATION OF	(SIDEHUNGRIGHTHAND	,SIDEHUNGLEFTHAND	,TILTANDTURNRIGHTHAND	,TILTANDTURNLEFTHAND	,TOPHUNG	,BOTTOMHUNG	,PIVOTHORIZONTAL	,PIVOTVERTICAL	,SLIDINGHORIZONTAL	,SLIDINGVERTICAL	,REMOVABLECASEMENT	,FIXEDCASEMENT	,OTHEROPERATION	,NOTDEFINED);
IfcWindowPanelOperationEnum::~IfcWindowPanelOperationEnum() {}
shared_ptr<BuildingObject> IfcWindowPanelOperationEnum::getDeepCopy( BuildingCopyOptions& options )
{
	shared_ptr<IfcWindowPanelOperationEnum> copy_self( new IfcWindowPanelOperationEnum() );
	copy_self->m_enum = m_enum;
	return copy_self;
}
void IfcWindowPanelOperationEnum::getStepParameter( std::stringstream& stream, bool is_select_type ) const
{
	if( is_select_type ) { stream << "IFCWINDOWPANELOPERATIONENUM("; }
	switch( m_enum )
	{
		case ENUM_SIDEHUNGRIGHTHAND:	stream << ".SIDEHUNGRIGHTHAND."; break;
		case ENUM_SIDEHUNGLEFTHAND:	stream << ".SIDEHUNGLEFTHAND."; break;
		case ENUM_TILTANDTURNRIGHTHAND:	stream << ".TILTANDTURNRIGHTHAND."; break;
		case ENUM_TILTANDTURNLEFTHAND:	stream << ".TILTANDTURNLEFTHAND."; break;
		case ENUM_TOPHUNG:	stream << ".TOPHUNG."; break;
		case ENUM_BOTTOMHUNG:	stream << ".BOTTOMHUNG."; break;
		case ENUM_PIVOTHORIZONTAL:	stream << ".PIVOTHORIZONTAL."; break;
		case ENUM_PIVOTVERTICAL:	stream << ".PIVOTVERTICAL."; break;
		case ENUM_SLIDINGHORIZONTAL:	stream << ".SLIDINGHORIZONTAL."; break;
		case ENUM_SLIDINGVERTICAL:	stream << ".SLIDINGVERTICAL."; break;
		case ENUM_REMOVABLECASEMENT:	stream << ".REMOVABLECASEMENT."; break;
		case ENUM_FIXEDCASEMENT:	stream << ".FIXEDCASEMENT."; break;
		case ENUM_OTHEROPERATION:	stream << ".OTHEROPERATION."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
const std::wstring IfcWindowPanelOperationEnum::toString() const
{
	switch( m_enum ) 
	{
		case ENUM_SIDEHUNGRIGHTHAND:	return L"SIDEHUNGRIGHTHAND";
		case ENUM_SIDEHUNGLEFTHAND:	return L"SIDEHUNGLEFTHAND";
		case ENUM_TILTANDTURNRIGHTHAND:	return L"TILTANDTURNRIGHTHAND";
		case ENUM_TILTANDTURNLEFTHAND:	return L"TILTANDTURNLEFTHAND";
		case ENUM_TOPHUNG:	return L"TOPHUNG";
		case ENUM_BOTTOMHUNG:	return L"BOTTOMHUNG";
		case ENUM_PIVOTHORIZONTAL:	return L"PIVOTHORIZONTAL";
		case ENUM_PIVOTVERTICAL:	return L"PIVOTVERTICAL";
		case ENUM_SLIDINGHORIZONTAL:	return L"SLIDINGHORIZONTAL";
		case ENUM_SLIDINGVERTICAL:	return L"SLIDINGVERTICAL";
		case ENUM_REMOVABLECASEMENT:	return L"REMOVABLECASEMENT";
		case ENUM_FIXEDCASEMENT:	return L"FIXEDCASEMENT";
		case ENUM_OTHEROPERATION:	return L"OTHEROPERATION";
		case ENUM_NOTDEFINED:	return L"NOTDEFINED";
	}
	return L"";
}
shared_ptr<IfcWindowPanelOperationEnum> IfcWindowPanelOperationEnum::createObjectFromSTEP( const std::wstring& arg, const std::map<int,shared_ptr<BuildingEntity> >& map )
{
	if( arg.compare( L"$" ) == 0 ) { return shared_ptr<IfcWindowPanelOperationEnum>(); }
	if( arg.compare( L"*" ) == 0 ) { return shared_ptr<IfcWindowPanelOperationEnum>(); }
	shared_ptr<IfcWindowPanelOperationEnum> type_object( new IfcWindowPanelOperationEnum() );
	if( boost::iequals( arg, L".SIDEHUNGRIGHTHAND." ) )
	{
		type_object->m_enum = IfcWindowPanelOperationEnum::ENUM_SIDEHUNGRIGHTHAND;
	}
	else if( boost::iequals( arg, L".SIDEHUNGLEFTHAND." ) )
	{
		type_object->m_enum = IfcWindowPanelOperationEnum::ENUM_SIDEHUNGLEFTHAND;
	}
	else if( boost::iequals( arg, L".TILTANDTURNRIGHTHAND." ) )
	{
		type_object->m_enum = IfcWindowPanelOperationEnum::ENUM_TILTANDTURNRIGHTHAND;
	}
	else if( boost::iequals( arg, L".TILTANDTURNLEFTHAND." ) )
	{
		type_object->m_enum = IfcWindowPanelOperationEnum::ENUM_TILTANDTURNLEFTHAND;
	}
	else if( boost::iequals( arg, L".TOPHUNG." ) )
	{
		type_object->m_enum = IfcWindowPanelOperationEnum::ENUM_TOPHUNG;
	}
	else if( boost::iequals( arg, L".BOTTOMHUNG." ) )
	{
		type_object->m_enum = IfcWindowPanelOperationEnum::ENUM_BOTTOMHUNG;
	}
	else if( boost::iequals( arg, L".PIVOTHORIZONTAL." ) )
	{
		type_object->m_enum = IfcWindowPanelOperationEnum::ENUM_PIVOTHORIZONTAL;
	}
	else if( boost::iequals( arg, L".PIVOTVERTICAL." ) )
	{
		type_object->m_enum = IfcWindowPanelOperationEnum::ENUM_PIVOTVERTICAL;
	}
	else if( boost::iequals( arg, L".SLIDINGHORIZONTAL." ) )
	{
		type_object->m_enum = IfcWindowPanelOperationEnum::ENUM_SLIDINGHORIZONTAL;
	}
	else if( boost::iequals( arg, L".SLIDINGVERTICAL." ) )
	{
		type_object->m_enum = IfcWindowPanelOperationEnum::ENUM_SLIDINGVERTICAL;
	}
	else if( boost::iequals( arg, L".REMOVABLECASEMENT." ) )
	{
		type_object->m_enum = IfcWindowPanelOperationEnum::ENUM_REMOVABLECASEMENT;
	}
	else if( boost::iequals( arg, L".FIXEDCASEMENT." ) )
	{
		type_object->m_enum = IfcWindowPanelOperationEnum::ENUM_FIXEDCASEMENT;
	}
	else if( boost::iequals( arg, L".OTHEROPERATION." ) )
	{
		type_object->m_enum = IfcWindowPanelOperationEnum::ENUM_OTHEROPERATION;
	}
	else if( boost::iequals( arg, L".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcWindowPanelOperationEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
