/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#pragma once
#include <vector>
#include <map>
#include <sstream>
#include <string>
#include "ifcpp/model/GlobalDefines.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingObject.h"

namespace IFC4X3
{
	// TYPE IfcBenchmarkEnum = ENUMERATION OF	(EQUALTO	,GREATERTHAN	,GREATERTHANOREQUALTO	,INCLUDEDIN	,INCLUDES	,LESSTHAN	,LESSTHANOREQUALTO	,NOTEQUALTO	,NOTINCLUDEDIN	,NOTINCLUDES);
	class IFCQUERY_EXPORT IfcBenchmarkEnum : virtual public BuildingObject
	{
	public:
		enum IfcBenchmarkEnumEnum
		{
			ENUM_EQUALTO,
			ENUM_GREATERTHAN,
			ENUM_GREATERTHANOREQUALTO,
			ENUM_INCLUDEDIN,
			ENUM_INCLUDES,
			ENUM_LESSTHAN,
			ENUM_LESSTHANOREQUALTO,
			ENUM_NOTEQUALTO,
			ENUM_NOTINCLUDEDIN,
			ENUM_NOTINCLUDES
		};

		IfcBenchmarkEnum() = default;
		IfcBenchmarkEnum( IfcBenchmarkEnumEnum e ) { m_enum = e; }
		virtual uint32_t classID() const { return 207745069; }
		virtual void getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const;
		static shared_ptr<IfcBenchmarkEnum> createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound );
		IfcBenchmarkEnumEnum m_enum;
	};
}
