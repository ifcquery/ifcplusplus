/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#pragma once
#include <vector>
#include <map>
#include <sstream>
#include <string>
#include "ifcpp/model/GlobalDefines.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingObject.h"

namespace IFC4X3
{
	// TYPE IfcCommunicationsApplianceTypeEnum = ENUMERATION OF	(ANTENNA	,AUTOMATON	,COMPUTER	,FAX	,GATEWAY	,INTELLIGENTPERIPHERAL	,IPNETWORKEQUIPMENT	,LINESIDEELECTRONICUNIT	,MODEM	,NETWORKAPPLIANCE	,NETWORKBRIDGE	,NETWORKHUB	,OPTICALLINETERMINAL	,OPTICALNETWORKUNIT	,PRINTER	,RADIOBLOCKCENTER	,REPEATER	,ROUTER	,SCANNER	,TELECOMMAND	,TELEPHONYEXCHANGE	,TRANSITIONCOMPONENT	,TRANSPONDER	,TRANSPORTEQUIPMENT	,USERDEFINED	,NOTDEFINED);
	class IFCQUERY_EXPORT IfcCommunicationsApplianceTypeEnum : virtual public BuildingObject
	{
	public:
		enum IfcCommunicationsApplianceTypeEnumEnum
		{
			ENUM_ANTENNA,
			ENUM_AUTOMATON,
			ENUM_COMPUTER,
			ENUM_FAX,
			ENUM_GATEWAY,
			ENUM_INTELLIGENTPERIPHERAL,
			ENUM_IPNETWORKEQUIPMENT,
			ENUM_LINESIDEELECTRONICUNIT,
			ENUM_MODEM,
			ENUM_NETWORKAPPLIANCE,
			ENUM_NETWORKBRIDGE,
			ENUM_NETWORKHUB,
			ENUM_OPTICALLINETERMINAL,
			ENUM_OPTICALNETWORKUNIT,
			ENUM_PRINTER,
			ENUM_RADIOBLOCKCENTER,
			ENUM_REPEATER,
			ENUM_ROUTER,
			ENUM_SCANNER,
			ENUM_TELECOMMAND,
			ENUM_TELEPHONYEXCHANGE,
			ENUM_TRANSITIONCOMPONENT,
			ENUM_TRANSPONDER,
			ENUM_TRANSPORTEQUIPMENT,
			ENUM_USERDEFINED,
			ENUM_NOTDEFINED
		};

		IfcCommunicationsApplianceTypeEnum() = default;
		IfcCommunicationsApplianceTypeEnum( IfcCommunicationsApplianceTypeEnumEnum e ) { m_enum = e; }
		virtual uint32_t classID() const { return 614319689; }
		virtual void getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const;
		static shared_ptr<IfcCommunicationsApplianceTypeEnum> createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound );
		IfcCommunicationsApplianceTypeEnumEnum m_enum;
	};
}
