/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#pragma once
#include "ifcpp/model/GlobalDefines.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingObject.h"
#include "IfcConversionBasedUnit.h"
namespace IFC4X3
{
	class IFCQUERY_EXPORT IfcReal;
	//ENTITY
	class IFCQUERY_EXPORT IfcConversionBasedUnitWithOffset : public IfcConversionBasedUnit
	{
	public:
		IfcConversionBasedUnitWithOffset() = default;
		IfcConversionBasedUnitWithOffset( int id );
		virtual void getStepLine( std::stringstream& stream, size_t precision ) const;
		virtual void getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const;
		virtual void readStepArguments( const std::vector<std::string>& args, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound );
		virtual void setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self );
		virtual uint8_t getNumAttributes() const { return 5; }
		virtual void getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const;
		virtual void getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const;
		virtual void unlinkFromInverseCounterparts();
		virtual uint32_t classID() const { return 2713554722; }

		// IfcNamedUnit -----------------------------------------------------------
		// attributes:
		//  shared_ptr<IfcDimensionalExponents>							m_Dimensions;
		//  shared_ptr<IfcUnitEnum>										m_UnitType;

		// IfcConversionBasedUnit -----------------------------------------------------------
		// attributes:
		//  shared_ptr<IfcLabel>										m_Name;
		//  shared_ptr<IfcMeasureWithUnit>								m_ConversionFactor;
		// inverse attributes:
		//  std::vector<weak_ptr<IfcExternalReferenceRelationship> >	m_HasExternalReference_inverse;

		// IfcConversionBasedUnitWithOffset -----------------------------------------------------------
		// attributes:
		shared_ptr<IfcReal>											m_ConversionOffset;
	};
}
