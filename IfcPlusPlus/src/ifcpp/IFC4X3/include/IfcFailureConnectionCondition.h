/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#pragma once
#include "ifcpp/model/GlobalDefines.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingObject.h"
#include "IfcStructuralConnectionCondition.h"
namespace IFC4X3
{
	class IFCQUERY_EXPORT IfcForceMeasure;
	//ENTITY
	class IFCQUERY_EXPORT IfcFailureConnectionCondition : public IfcStructuralConnectionCondition
	{
	public:
		IfcFailureConnectionCondition() = default;
		IfcFailureConnectionCondition( int id );
		virtual void getStepLine( std::stringstream& stream, size_t precision ) const;
		virtual void getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const;
		virtual void readStepArguments( const std::vector<std::string>& args, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound );
		virtual void setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self );
		virtual uint8_t getNumAttributes() const { return 7; }
		virtual void getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const;
		virtual void getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const;
		virtual void unlinkFromInverseCounterparts();
		virtual uint32_t classID() const { return 4219587988; }

		// IfcStructuralConnectionCondition -----------------------------------------------------------
		// attributes:
		//  shared_ptr<IfcLabel>		m_Name;						//optional

		// IfcFailureConnectionCondition -----------------------------------------------------------
		// attributes:
		shared_ptr<IfcForceMeasure>	m_TensionFailureX;			//optional
		shared_ptr<IfcForceMeasure>	m_TensionFailureY;			//optional
		shared_ptr<IfcForceMeasure>	m_TensionFailureZ;			//optional
		shared_ptr<IfcForceMeasure>	m_CompressionFailureX;		//optional
		shared_ptr<IfcForceMeasure>	m_CompressionFailureY;		//optional
		shared_ptr<IfcForceMeasure>	m_CompressionFailureZ;		//optional
	};
}
