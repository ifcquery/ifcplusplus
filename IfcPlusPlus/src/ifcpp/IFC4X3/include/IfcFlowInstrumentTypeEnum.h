/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#pragma once
#include <vector>
#include <map>
#include <sstream>
#include <string>
#include "ifcpp/model/GlobalDefines.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingObject.h"

namespace IFC4X3
{
	// TYPE IfcFlowInstrumentTypeEnum = ENUMERATION OF	(AMMETER	,COMBINED	,FREQUENCYMETER	,PHASEANGLEMETER	,POWERFACTORMETER	,PRESSUREGAUGE	,THERMOMETER	,VOLTMETER	,VOLTMETER_PEAK	,VOLTMETER_RMS	,USERDEFINED	,NOTDEFINED);
	class IFCQUERY_EXPORT IfcFlowInstrumentTypeEnum : virtual public BuildingObject
	{
	public:
		enum IfcFlowInstrumentTypeEnumEnum
		{
			ENUM_AMMETER,
			ENUM_COMBINED,
			ENUM_FREQUENCYMETER,
			ENUM_PHASEANGLEMETER,
			ENUM_POWERFACTORMETER,
			ENUM_PRESSUREGAUGE,
			ENUM_THERMOMETER,
			ENUM_VOLTMETER,
			ENUM_VOLTMETER_PEAK,
			ENUM_VOLTMETER_RMS,
			ENUM_USERDEFINED,
			ENUM_NOTDEFINED
		};

		IfcFlowInstrumentTypeEnum() = default;
		IfcFlowInstrumentTypeEnum( IfcFlowInstrumentTypeEnumEnum e ) { m_enum = e; }
		virtual uint32_t classID() const { return 897523405; }
		virtual void getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const;
		static shared_ptr<IfcFlowInstrumentTypeEnum> createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound );
		IfcFlowInstrumentTypeEnumEnum m_enum;
	};
}
