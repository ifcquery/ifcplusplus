/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#pragma once
#include "ifcpp/model/GlobalDefines.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingObject.h"
#include "IfcCoordinateReferenceSystem.h"
namespace IFC4X3
{
	class IFCQUERY_EXPORT IfcIdentifier;
	class IFCQUERY_EXPORT IfcNamedUnit;
	//ENTITY
	class IFCQUERY_EXPORT IfcGeographicCRS : public IfcCoordinateReferenceSystem
	{
	public:
		IfcGeographicCRS() = default;
		IfcGeographicCRS( int id );
		virtual void getStepLine( std::stringstream& stream, size_t precision ) const;
		virtual void getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const;
		virtual void readStepArguments( const std::vector<std::string>& args, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound );
		virtual void setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self );
		virtual uint8_t getNumAttributes() const { return 6; }
		virtual void getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const;
		virtual void getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const;
		virtual void unlinkFromInverseCounterparts();
		virtual uint32_t classID() const { return 917726184; }

		// IfcCoordinateReferenceSystem -----------------------------------------------------------
		// attributes:
		//  shared_ptr<IfcLabel>							m_Name;						//optional
		//  shared_ptr<IfcText>								m_Description;				//optional
		//  shared_ptr<IfcIdentifier>						m_GeodeticDatum;			//optional
		// inverse attributes:
		//  std::vector<weak_ptr<IfcCoordinateOperation> >	m_HasCoordinateOperation_inverse;
		//  std::vector<weak_ptr<IfcWellKnownText> >		m_WellKnownText_inverse;

		// IfcGeographicCRS -----------------------------------------------------------
		// attributes:
		shared_ptr<IfcIdentifier>						m_PrimeMeridian;			//optional
		shared_ptr<IfcNamedUnit>						m_AngleUnit;				//optional
		shared_ptr<IfcNamedUnit>						m_HeightUnit;				//optional
	};
}
