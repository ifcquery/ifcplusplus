/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#pragma once
#include "ifcpp/model/GlobalDefines.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingObject.h"
#include "IfcGeometricRepresentationContext.h"
namespace IFC4X3
{
	class IFCQUERY_EXPORT IfcGeometricRepresentationContext;
	class IFCQUERY_EXPORT IfcPositiveRatioMeasure;
	class IFCQUERY_EXPORT IfcGeometricProjectionEnum;
	class IFCQUERY_EXPORT IfcLabel;
	//ENTITY
	class IFCQUERY_EXPORT IfcGeometricRepresentationSubContext : public IfcGeometricRepresentationContext
	{
	public:
		IfcGeometricRepresentationSubContext() = default;
		IfcGeometricRepresentationSubContext( int id );
		virtual void getStepLine( std::stringstream& stream, size_t precision ) const;
		virtual void getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const;
		virtual void readStepArguments( const std::vector<std::string>& args, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound );
		virtual void setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self );
		virtual uint8_t getNumAttributes() const { return 10; }
		virtual void getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const;
		virtual void getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const;
		virtual void unlinkFromInverseCounterparts();
		virtual uint32_t classID() const { return 4142052618; }

		// IfcRepresentationContext -----------------------------------------------------------
		// attributes:
		//  shared_ptr<IfcLabel>											m_ContextIdentifier;		//optional
		//  shared_ptr<IfcLabel>											m_ContextType;				//optional
		// inverse attributes:
		//  std::vector<weak_ptr<IfcRepresentation> >						m_RepresentationsInContext_inverse;

		// IfcGeometricRepresentationContext -----------------------------------------------------------
		// attributes:
		//  shared_ptr<IfcDimensionCount>									m_CoordinateSpaceDimension;
		//  shared_ptr<IfcReal>												m_Precision;				//optional
		//  shared_ptr<IfcAxis2Placement>									m_WorldCoordinateSystem;
		//  shared_ptr<IfcDirection>										m_TrueNorth;				//optional
		// inverse attributes:
		//  std::vector<weak_ptr<IfcGeometricRepresentationSubContext> >	m_HasSubContexts_inverse;
		//  std::vector<weak_ptr<IfcCoordinateOperation> >					m_HasCoordinateOperation_inverse;

		// IfcGeometricRepresentationSubContext -----------------------------------------------------------
		// attributes:
		shared_ptr<IfcGeometricRepresentationContext>					m_ParentContext;
		shared_ptr<IfcPositiveRatioMeasure>								m_TargetScale;				//optional
		shared_ptr<IfcGeometricProjectionEnum>							m_TargetView;
		shared_ptr<IfcLabel>											m_UserDefinedTargetView;	//optional
	};
}
