/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#pragma once
#include "ifcpp/model/GlobalDefines.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingObject.h"
#include "IfcNamedUnit.h"
namespace IFC4X3
{
	class IFCQUERY_EXPORT IfcSIPrefix;
	class IFCQUERY_EXPORT IfcSIUnitName;
	//ENTITY
	class IFCQUERY_EXPORT IfcSIUnit : public IfcNamedUnit
	{
	public:
		IfcSIUnit() = default;
		IfcSIUnit( int id );
		virtual void getStepLine( std::stringstream& stream, size_t precision ) const;
		virtual void getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const;
		virtual void readStepArguments( const std::vector<std::string>& args, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound );
		virtual void setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self );
		virtual uint8_t getNumAttributes() const { return 4; }
		virtual void getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const;
		virtual void getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const;
		virtual void unlinkFromInverseCounterparts();
		virtual uint32_t classID() const { return 448429030; }

		// IfcNamedUnit -----------------------------------------------------------
		// attributes:
		//  shared_ptr<IfcDimensionalExponents>	m_Dimensions;
		//  shared_ptr<IfcUnitEnum>				m_UnitType;

		// IfcSIUnit -----------------------------------------------------------
		// attributes:
		shared_ptr<IfcSIPrefix>				m_Prefix;					//optional
		shared_ptr<IfcSIUnitName>			m_Name;
	};
}
