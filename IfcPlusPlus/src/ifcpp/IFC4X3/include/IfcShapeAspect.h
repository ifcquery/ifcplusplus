/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#pragma once
#include "ifcpp/model/GlobalDefines.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingObject.h"
#include "IfcResourceObjectSelect.h"
namespace IFC4X3
{
	class IFCQUERY_EXPORT IfcShapeModel;
	class IFCQUERY_EXPORT IfcLabel;
	class IFCQUERY_EXPORT IfcText;
	class IFCQUERY_EXPORT IfcLogical;
	class IFCQUERY_EXPORT IfcProductRepresentationSelect;
	class IFCQUERY_EXPORT IfcExternalReferenceRelationship;
	//ENTITY
	class IFCQUERY_EXPORT IfcShapeAspect : virtual public IfcResourceObjectSelect, public BuildingEntity
	{
	public:
		IfcShapeAspect() = default;
		IfcShapeAspect( int id );
		virtual void getStepLine( std::stringstream& stream, size_t precision ) const;
		virtual void getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const;
		virtual void readStepArguments( const std::vector<std::string>& args, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound );
		virtual void setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self );
		virtual uint8_t getNumAttributes() const { return 5; }
		virtual void getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const;
		virtual void getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const;
		virtual void unlinkFromInverseCounterparts();
		virtual uint32_t classID() const { return 867548509; }

		// IfcShapeAspect -----------------------------------------------------------
		// attributes:
		std::vector<shared_ptr<IfcShapeModel> >						m_ShapeRepresentations;
		shared_ptr<IfcLabel>										m_Name;						//optional
		shared_ptr<IfcText>											m_Description;				//optional
		shared_ptr<IfcLogical>										m_ProductDefinitional;
		shared_ptr<IfcProductRepresentationSelect>					m_PartOfProductDefinitionShape;	//optional
		// inverse attributes:
		std::vector<weak_ptr<IfcExternalReferenceRelationship> >	m_HasExternalReferences_inverse;
	};
}
