/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcActionSourceTypeEnum.h"

// TYPE IfcActionSourceTypeEnum = ENUMERATION OF	(BRAKES	,BUOYANCY	,COMPLETION_G1	,CREEP	,CURRENT	,DEAD_LOAD_G	,EARTHQUAKE_E	,ERECTION	,FIRE	,ICE	,IMPACT	,IMPULSE	,LACK_OF_FIT	,LIVE_LOAD_Q	,PRESTRESSING_P	,PROPPING	,RAIN	,SETTLEMENT_U	,SHRINKAGE	,SNOW_S	,SYSTEM_IMPERFECTION	,TEMPERATURE_T	,TRANSPORT	,WAVE	,WIND_W	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcActionSourceTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCACTIONSOURCETYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_BRAKES:	stream << ".BRAKES."; break;
		case ENUM_BUOYANCY:	stream << ".BUOYANCY."; break;
		case ENUM_COMPLETION_G1:	stream << ".COMPLETION_G1."; break;
		case ENUM_CREEP:	stream << ".CREEP."; break;
		case ENUM_CURRENT:	stream << ".CURRENT."; break;
		case ENUM_DEAD_LOAD_G:	stream << ".DEAD_LOAD_G."; break;
		case ENUM_EARTHQUAKE_E:	stream << ".EARTHQUAKE_E."; break;
		case ENUM_ERECTION:	stream << ".ERECTION."; break;
		case ENUM_FIRE:	stream << ".FIRE."; break;
		case ENUM_ICE:	stream << ".ICE."; break;
		case ENUM_IMPACT:	stream << ".IMPACT."; break;
		case ENUM_IMPULSE:	stream << ".IMPULSE."; break;
		case ENUM_LACK_OF_FIT:	stream << ".LACK_OF_FIT."; break;
		case ENUM_LIVE_LOAD_Q:	stream << ".LIVE_LOAD_Q."; break;
		case ENUM_PRESTRESSING_P:	stream << ".PRESTRESSING_P."; break;
		case ENUM_PROPPING:	stream << ".PROPPING."; break;
		case ENUM_RAIN:	stream << ".RAIN."; break;
		case ENUM_SETTLEMENT_U:	stream << ".SETTLEMENT_U."; break;
		case ENUM_SHRINKAGE:	stream << ".SHRINKAGE."; break;
		case ENUM_SNOW_S:	stream << ".SNOW_S."; break;
		case ENUM_SYSTEM_IMPERFECTION:	stream << ".SYSTEM_IMPERFECTION."; break;
		case ENUM_TEMPERATURE_T:	stream << ".TEMPERATURE_T."; break;
		case ENUM_TRANSPORT:	stream << ".TRANSPORT."; break;
		case ENUM_WAVE:	stream << ".WAVE."; break;
		case ENUM_WIND_W:	stream << ".WIND_W."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcActionSourceTypeEnum> IFC4X3::IfcActionSourceTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcActionSourceTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcActionSourceTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcActionSourceTypeEnum>(); }
	shared_ptr<IfcActionSourceTypeEnum> type_object( new IfcActionSourceTypeEnum() );
	if( std_iequal( arg, ".BRAKES." ) )
	{
		type_object->m_enum = IfcActionSourceTypeEnum::ENUM_BRAKES;
	}
	else if( std_iequal( arg, ".BUOYANCY." ) )
	{
		type_object->m_enum = IfcActionSourceTypeEnum::ENUM_BUOYANCY;
	}
	else if( std_iequal( arg, ".COMPLETION_G1." ) )
	{
		type_object->m_enum = IfcActionSourceTypeEnum::ENUM_COMPLETION_G1;
	}
	else if( std_iequal( arg, ".CREEP." ) )
	{
		type_object->m_enum = IfcActionSourceTypeEnum::ENUM_CREEP;
	}
	else if( std_iequal( arg, ".CURRENT." ) )
	{
		type_object->m_enum = IfcActionSourceTypeEnum::ENUM_CURRENT;
	}
	else if( std_iequal( arg, ".DEAD_LOAD_G." ) )
	{
		type_object->m_enum = IfcActionSourceTypeEnum::ENUM_DEAD_LOAD_G;
	}
	else if( std_iequal( arg, ".EARTHQUAKE_E." ) )
	{
		type_object->m_enum = IfcActionSourceTypeEnum::ENUM_EARTHQUAKE_E;
	}
	else if( std_iequal( arg, ".ERECTION." ) )
	{
		type_object->m_enum = IfcActionSourceTypeEnum::ENUM_ERECTION;
	}
	else if( std_iequal( arg, ".FIRE." ) )
	{
		type_object->m_enum = IfcActionSourceTypeEnum::ENUM_FIRE;
	}
	else if( std_iequal( arg, ".ICE." ) )
	{
		type_object->m_enum = IfcActionSourceTypeEnum::ENUM_ICE;
	}
	else if( std_iequal( arg, ".IMPACT." ) )
	{
		type_object->m_enum = IfcActionSourceTypeEnum::ENUM_IMPACT;
	}
	else if( std_iequal( arg, ".IMPULSE." ) )
	{
		type_object->m_enum = IfcActionSourceTypeEnum::ENUM_IMPULSE;
	}
	else if( std_iequal( arg, ".LACK_OF_FIT." ) )
	{
		type_object->m_enum = IfcActionSourceTypeEnum::ENUM_LACK_OF_FIT;
	}
	else if( std_iequal( arg, ".LIVE_LOAD_Q." ) )
	{
		type_object->m_enum = IfcActionSourceTypeEnum::ENUM_LIVE_LOAD_Q;
	}
	else if( std_iequal( arg, ".PRESTRESSING_P." ) )
	{
		type_object->m_enum = IfcActionSourceTypeEnum::ENUM_PRESTRESSING_P;
	}
	else if( std_iequal( arg, ".PROPPING." ) )
	{
		type_object->m_enum = IfcActionSourceTypeEnum::ENUM_PROPPING;
	}
	else if( std_iequal( arg, ".RAIN." ) )
	{
		type_object->m_enum = IfcActionSourceTypeEnum::ENUM_RAIN;
	}
	else if( std_iequal( arg, ".SETTLEMENT_U." ) )
	{
		type_object->m_enum = IfcActionSourceTypeEnum::ENUM_SETTLEMENT_U;
	}
	else if( std_iequal( arg, ".SHRINKAGE." ) )
	{
		type_object->m_enum = IfcActionSourceTypeEnum::ENUM_SHRINKAGE;
	}
	else if( std_iequal( arg, ".SNOW_S." ) )
	{
		type_object->m_enum = IfcActionSourceTypeEnum::ENUM_SNOW_S;
	}
	else if( std_iequal( arg, ".SYSTEM_IMPERFECTION." ) )
	{
		type_object->m_enum = IfcActionSourceTypeEnum::ENUM_SYSTEM_IMPERFECTION;
	}
	else if( std_iequal( arg, ".TEMPERATURE_T." ) )
	{
		type_object->m_enum = IfcActionSourceTypeEnum::ENUM_TEMPERATURE_T;
	}
	else if( std_iequal( arg, ".TRANSPORT." ) )
	{
		type_object->m_enum = IfcActionSourceTypeEnum::ENUM_TRANSPORT;
	}
	else if( std_iequal( arg, ".WAVE." ) )
	{
		type_object->m_enum = IfcActionSourceTypeEnum::ENUM_WAVE;
	}
	else if( std_iequal( arg, ".WIND_W." ) )
	{
		type_object->m_enum = IfcActionSourceTypeEnum::ENUM_WIND_W;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcActionSourceTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcActionSourceTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
