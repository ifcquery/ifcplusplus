/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcAirToAirHeatRecoveryTypeEnum.h"

// TYPE IfcAirToAirHeatRecoveryTypeEnum = ENUMERATION OF	(FIXEDPLATECOUNTERFLOWEXCHANGER	,FIXEDPLATECROSSFLOWEXCHANGER	,FIXEDPLATEPARALLELFLOWEXCHANGER	,HEATPIPE	,ROTARYWHEEL	,RUNAROUNDCOILLOOP	,THERMOSIPHONCOILTYPEHEATEXCHANGERS	,THERMOSIPHONSEALEDTUBEHEATEXCHANGERS	,TWINTOWERENTHALPYRECOVERYLOOPS	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcAirToAirHeatRecoveryTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCAIRTOAIRHEATRECOVERYTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_FIXEDPLATECOUNTERFLOWEXCHANGER:	stream << ".FIXEDPLATECOUNTERFLOWEXCHANGER."; break;
		case ENUM_FIXEDPLATECROSSFLOWEXCHANGER:	stream << ".FIXEDPLATECROSSFLOWEXCHANGER."; break;
		case ENUM_FIXEDPLATEPARALLELFLOWEXCHANGER:	stream << ".FIXEDPLATEPARALLELFLOWEXCHANGER."; break;
		case ENUM_HEATPIPE:	stream << ".HEATPIPE."; break;
		case ENUM_ROTARYWHEEL:	stream << ".ROTARYWHEEL."; break;
		case ENUM_RUNAROUNDCOILLOOP:	stream << ".RUNAROUNDCOILLOOP."; break;
		case ENUM_THERMOSIPHONCOILTYPEHEATEXCHANGERS:	stream << ".THERMOSIPHONCOILTYPEHEATEXCHANGERS."; break;
		case ENUM_THERMOSIPHONSEALEDTUBEHEATEXCHANGERS:	stream << ".THERMOSIPHONSEALEDTUBEHEATEXCHANGERS."; break;
		case ENUM_TWINTOWERENTHALPYRECOVERYLOOPS:	stream << ".TWINTOWERENTHALPYRECOVERYLOOPS."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcAirToAirHeatRecoveryTypeEnum> IFC4X3::IfcAirToAirHeatRecoveryTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcAirToAirHeatRecoveryTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcAirToAirHeatRecoveryTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcAirToAirHeatRecoveryTypeEnum>(); }
	shared_ptr<IfcAirToAirHeatRecoveryTypeEnum> type_object( new IfcAirToAirHeatRecoveryTypeEnum() );
	if( std_iequal( arg, ".FIXEDPLATECOUNTERFLOWEXCHANGER." ) )
	{
		type_object->m_enum = IfcAirToAirHeatRecoveryTypeEnum::ENUM_FIXEDPLATECOUNTERFLOWEXCHANGER;
	}
	else if( std_iequal( arg, ".FIXEDPLATECROSSFLOWEXCHANGER." ) )
	{
		type_object->m_enum = IfcAirToAirHeatRecoveryTypeEnum::ENUM_FIXEDPLATECROSSFLOWEXCHANGER;
	}
	else if( std_iequal( arg, ".FIXEDPLATEPARALLELFLOWEXCHANGER." ) )
	{
		type_object->m_enum = IfcAirToAirHeatRecoveryTypeEnum::ENUM_FIXEDPLATEPARALLELFLOWEXCHANGER;
	}
	else if( std_iequal( arg, ".HEATPIPE." ) )
	{
		type_object->m_enum = IfcAirToAirHeatRecoveryTypeEnum::ENUM_HEATPIPE;
	}
	else if( std_iequal( arg, ".ROTARYWHEEL." ) )
	{
		type_object->m_enum = IfcAirToAirHeatRecoveryTypeEnum::ENUM_ROTARYWHEEL;
	}
	else if( std_iequal( arg, ".RUNAROUNDCOILLOOP." ) )
	{
		type_object->m_enum = IfcAirToAirHeatRecoveryTypeEnum::ENUM_RUNAROUNDCOILLOOP;
	}
	else if( std_iequal( arg, ".THERMOSIPHONCOILTYPEHEATEXCHANGERS." ) )
	{
		type_object->m_enum = IfcAirToAirHeatRecoveryTypeEnum::ENUM_THERMOSIPHONCOILTYPEHEATEXCHANGERS;
	}
	else if( std_iequal( arg, ".THERMOSIPHONSEALEDTUBEHEATEXCHANGERS." ) )
	{
		type_object->m_enum = IfcAirToAirHeatRecoveryTypeEnum::ENUM_THERMOSIPHONSEALEDTUBEHEATEXCHANGERS;
	}
	else if( std_iequal( arg, ".TWINTOWERENTHALPYRECOVERYLOOPS." ) )
	{
		type_object->m_enum = IfcAirToAirHeatRecoveryTypeEnum::ENUM_TWINTOWERENTHALPYRECOVERYLOOPS;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcAirToAirHeatRecoveryTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcAirToAirHeatRecoveryTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
