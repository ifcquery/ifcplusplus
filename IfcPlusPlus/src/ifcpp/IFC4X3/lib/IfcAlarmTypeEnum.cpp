/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcAlarmTypeEnum.h"

// TYPE IfcAlarmTypeEnum = ENUMERATION OF	(BELL	,BREAKGLASSBUTTON	,LIGHT	,MANUALPULLBOX	,RAILWAYCROCODILE	,RAILWAYDETONATOR	,SIREN	,WHISTLE	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcAlarmTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCALARMTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_BELL:	stream << ".BELL."; break;
		case ENUM_BREAKGLASSBUTTON:	stream << ".BREAKGLASSBUTTON."; break;
		case ENUM_LIGHT:	stream << ".LIGHT."; break;
		case ENUM_MANUALPULLBOX:	stream << ".MANUALPULLBOX."; break;
		case ENUM_RAILWAYCROCODILE:	stream << ".RAILWAYCROCODILE."; break;
		case ENUM_RAILWAYDETONATOR:	stream << ".RAILWAYDETONATOR."; break;
		case ENUM_SIREN:	stream << ".SIREN."; break;
		case ENUM_WHISTLE:	stream << ".WHISTLE."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcAlarmTypeEnum> IFC4X3::IfcAlarmTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcAlarmTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcAlarmTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcAlarmTypeEnum>(); }
	shared_ptr<IfcAlarmTypeEnum> type_object( new IfcAlarmTypeEnum() );
	if( std_iequal( arg, ".BELL." ) )
	{
		type_object->m_enum = IfcAlarmTypeEnum::ENUM_BELL;
	}
	else if( std_iequal( arg, ".BREAKGLASSBUTTON." ) )
	{
		type_object->m_enum = IfcAlarmTypeEnum::ENUM_BREAKGLASSBUTTON;
	}
	else if( std_iequal( arg, ".LIGHT." ) )
	{
		type_object->m_enum = IfcAlarmTypeEnum::ENUM_LIGHT;
	}
	else if( std_iequal( arg, ".MANUALPULLBOX." ) )
	{
		type_object->m_enum = IfcAlarmTypeEnum::ENUM_MANUALPULLBOX;
	}
	else if( std_iequal( arg, ".RAILWAYCROCODILE." ) )
	{
		type_object->m_enum = IfcAlarmTypeEnum::ENUM_RAILWAYCROCODILE;
	}
	else if( std_iequal( arg, ".RAILWAYDETONATOR." ) )
	{
		type_object->m_enum = IfcAlarmTypeEnum::ENUM_RAILWAYDETONATOR;
	}
	else if( std_iequal( arg, ".SIREN." ) )
	{
		type_object->m_enum = IfcAlarmTypeEnum::ENUM_SIREN;
	}
	else if( std_iequal( arg, ".WHISTLE." ) )
	{
		type_object->m_enum = IfcAlarmTypeEnum::ENUM_WHISTLE;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcAlarmTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcAlarmTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
