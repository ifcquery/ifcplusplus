/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcAlignmentCantSegmentTypeEnum.h"

// TYPE IfcAlignmentCantSegmentTypeEnum = ENUMERATION OF	(BLOSSCURVE	,CONSTANTCANT	,COSINECURVE	,HELMERTCURVE	,LINEARTRANSITION	,SINECURVE	,VIENNESEBEND);
void IFC4X3::IfcAlignmentCantSegmentTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCALIGNMENTCANTSEGMENTTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_BLOSSCURVE:	stream << ".BLOSSCURVE."; break;
		case ENUM_CONSTANTCANT:	stream << ".CONSTANTCANT."; break;
		case ENUM_COSINECURVE:	stream << ".COSINECURVE."; break;
		case ENUM_HELMERTCURVE:	stream << ".HELMERTCURVE."; break;
		case ENUM_LINEARTRANSITION:	stream << ".LINEARTRANSITION."; break;
		case ENUM_SINECURVE:	stream << ".SINECURVE."; break;
		case ENUM_VIENNESEBEND:	stream << ".VIENNESEBEND."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcAlignmentCantSegmentTypeEnum> IFC4X3::IfcAlignmentCantSegmentTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcAlignmentCantSegmentTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcAlignmentCantSegmentTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcAlignmentCantSegmentTypeEnum>(); }
	shared_ptr<IfcAlignmentCantSegmentTypeEnum> type_object( new IfcAlignmentCantSegmentTypeEnum() );
	if( std_iequal( arg, ".BLOSSCURVE." ) )
	{
		type_object->m_enum = IfcAlignmentCantSegmentTypeEnum::ENUM_BLOSSCURVE;
	}
	else if( std_iequal( arg, ".CONSTANTCANT." ) )
	{
		type_object->m_enum = IfcAlignmentCantSegmentTypeEnum::ENUM_CONSTANTCANT;
	}
	else if( std_iequal( arg, ".COSINECURVE." ) )
	{
		type_object->m_enum = IfcAlignmentCantSegmentTypeEnum::ENUM_COSINECURVE;
	}
	else if( std_iequal( arg, ".HELMERTCURVE." ) )
	{
		type_object->m_enum = IfcAlignmentCantSegmentTypeEnum::ENUM_HELMERTCURVE;
	}
	else if( std_iequal( arg, ".LINEARTRANSITION." ) )
	{
		type_object->m_enum = IfcAlignmentCantSegmentTypeEnum::ENUM_LINEARTRANSITION;
	}
	else if( std_iequal( arg, ".SINECURVE." ) )
	{
		type_object->m_enum = IfcAlignmentCantSegmentTypeEnum::ENUM_SINECURVE;
	}
	else if( std_iequal( arg, ".VIENNESEBEND." ) )
	{
		type_object->m_enum = IfcAlignmentCantSegmentTypeEnum::ENUM_VIENNESEBEND;
	}
	return type_object;
}
