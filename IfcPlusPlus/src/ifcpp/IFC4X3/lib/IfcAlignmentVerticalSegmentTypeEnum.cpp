/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcAlignmentVerticalSegmentTypeEnum.h"

// TYPE IfcAlignmentVerticalSegmentTypeEnum = ENUMERATION OF	(CIRCULARARC	,CLOTHOID	,CONSTANTGRADIENT	,PARABOLICARC);
void IFC4X3::IfcAlignmentVerticalSegmentTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCALIGNMENTVERTICALSEGMENTTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_CIRCULARARC:	stream << ".CIRCULARARC."; break;
		case ENUM_CLOTHOID:	stream << ".CLOTHOID."; break;
		case ENUM_CONSTANTGRADIENT:	stream << ".CONSTANTGRADIENT."; break;
		case ENUM_PARABOLICARC:	stream << ".PARABOLICARC."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcAlignmentVerticalSegmentTypeEnum> IFC4X3::IfcAlignmentVerticalSegmentTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcAlignmentVerticalSegmentTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcAlignmentVerticalSegmentTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcAlignmentVerticalSegmentTypeEnum>(); }
	shared_ptr<IfcAlignmentVerticalSegmentTypeEnum> type_object( new IfcAlignmentVerticalSegmentTypeEnum() );
	if( std_iequal( arg, ".CIRCULARARC." ) )
	{
		type_object->m_enum = IfcAlignmentVerticalSegmentTypeEnum::ENUM_CIRCULARARC;
	}
	else if( std_iequal( arg, ".CLOTHOID." ) )
	{
		type_object->m_enum = IfcAlignmentVerticalSegmentTypeEnum::ENUM_CLOTHOID;
	}
	else if( std_iequal( arg, ".CONSTANTGRADIENT." ) )
	{
		type_object->m_enum = IfcAlignmentVerticalSegmentTypeEnum::ENUM_CONSTANTGRADIENT;
	}
	else if( std_iequal( arg, ".PARABOLICARC." ) )
	{
		type_object->m_enum = IfcAlignmentVerticalSegmentTypeEnum::ENUM_PARABOLICARC;
	}
	return type_object;
}
