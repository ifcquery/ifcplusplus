/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcAnnotationTypeEnum.h"

// TYPE IfcAnnotationTypeEnum = ENUMERATION OF	(CONTOURLINE	,DIMENSION	,ISOBAR	,ISOLUX	,ISOTHERM	,LEADER	,SURVEY	,SYMBOL	,TEXT	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcAnnotationTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCANNOTATIONTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_CONTOURLINE:	stream << ".CONTOURLINE."; break;
		case ENUM_DIMENSION:	stream << ".DIMENSION."; break;
		case ENUM_ISOBAR:	stream << ".ISOBAR."; break;
		case ENUM_ISOLUX:	stream << ".ISOLUX."; break;
		case ENUM_ISOTHERM:	stream << ".ISOTHERM."; break;
		case ENUM_LEADER:	stream << ".LEADER."; break;
		case ENUM_SURVEY:	stream << ".SURVEY."; break;
		case ENUM_SYMBOL:	stream << ".SYMBOL."; break;
		case ENUM_TEXT:	stream << ".TEXT."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcAnnotationTypeEnum> IFC4X3::IfcAnnotationTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcAnnotationTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcAnnotationTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcAnnotationTypeEnum>(); }
	shared_ptr<IfcAnnotationTypeEnum> type_object( new IfcAnnotationTypeEnum() );
	if( std_iequal( arg, ".CONTOURLINE." ) )
	{
		type_object->m_enum = IfcAnnotationTypeEnum::ENUM_CONTOURLINE;
	}
	else if( std_iequal( arg, ".DIMENSION." ) )
	{
		type_object->m_enum = IfcAnnotationTypeEnum::ENUM_DIMENSION;
	}
	else if( std_iequal( arg, ".ISOBAR." ) )
	{
		type_object->m_enum = IfcAnnotationTypeEnum::ENUM_ISOBAR;
	}
	else if( std_iequal( arg, ".ISOLUX." ) )
	{
		type_object->m_enum = IfcAnnotationTypeEnum::ENUM_ISOLUX;
	}
	else if( std_iequal( arg, ".ISOTHERM." ) )
	{
		type_object->m_enum = IfcAnnotationTypeEnum::ENUM_ISOTHERM;
	}
	else if( std_iequal( arg, ".LEADER." ) )
	{
		type_object->m_enum = IfcAnnotationTypeEnum::ENUM_LEADER;
	}
	else if( std_iequal( arg, ".SURVEY." ) )
	{
		type_object->m_enum = IfcAnnotationTypeEnum::ENUM_SURVEY;
	}
	else if( std_iequal( arg, ".SYMBOL." ) )
	{
		type_object->m_enum = IfcAnnotationTypeEnum::ENUM_SYMBOL;
	}
	else if( std_iequal( arg, ".TEXT." ) )
	{
		type_object->m_enum = IfcAnnotationTypeEnum::ENUM_TEXT;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcAnnotationTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcAnnotationTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
