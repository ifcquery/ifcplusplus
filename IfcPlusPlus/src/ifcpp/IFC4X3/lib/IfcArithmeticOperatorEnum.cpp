/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcArithmeticOperatorEnum.h"

// TYPE IfcArithmeticOperatorEnum = ENUMERATION OF	(ADD	,DIVIDE	,MODULO	,MULTIPLY	,SUBTRACT);
void IFC4X3::IfcArithmeticOperatorEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCARITHMETICOPERATORENUM("; }
	switch( m_enum )
	{
		case ENUM_ADD:	stream << ".ADD."; break;
		case ENUM_DIVIDE:	stream << ".DIVIDE."; break;
		case ENUM_MODULO:	stream << ".MODULO."; break;
		case ENUM_MULTIPLY:	stream << ".MULTIPLY."; break;
		case ENUM_SUBTRACT:	stream << ".SUBTRACT."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcArithmeticOperatorEnum> IFC4X3::IfcArithmeticOperatorEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcArithmeticOperatorEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcArithmeticOperatorEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcArithmeticOperatorEnum>(); }
	shared_ptr<IfcArithmeticOperatorEnum> type_object( new IfcArithmeticOperatorEnum() );
	if( std_iequal( arg, ".ADD." ) )
	{
		type_object->m_enum = IfcArithmeticOperatorEnum::ENUM_ADD;
	}
	else if( std_iequal( arg, ".DIVIDE." ) )
	{
		type_object->m_enum = IfcArithmeticOperatorEnum::ENUM_DIVIDE;
	}
	else if( std_iequal( arg, ".MODULO." ) )
	{
		type_object->m_enum = IfcArithmeticOperatorEnum::ENUM_MODULO;
	}
	else if( std_iequal( arg, ".MULTIPLY." ) )
	{
		type_object->m_enum = IfcArithmeticOperatorEnum::ENUM_MULTIPLY;
	}
	else if( std_iequal( arg, ".SUBTRACT." ) )
	{
		type_object->m_enum = IfcArithmeticOperatorEnum::ENUM_SUBTRACT;
	}
	return type_object;
}
