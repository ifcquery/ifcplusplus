/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcBenchmarkEnum.h"

// TYPE IfcBenchmarkEnum = ENUMERATION OF	(EQUALTO	,GREATERTHAN	,GREATERTHANOREQUALTO	,INCLUDEDIN	,INCLUDES	,LESSTHAN	,LESSTHANOREQUALTO	,NOTEQUALTO	,NOTINCLUDEDIN	,NOTINCLUDES);
void IFC4X3::IfcBenchmarkEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCBENCHMARKENUM("; }
	switch( m_enum )
	{
		case ENUM_EQUALTO:	stream << ".EQUALTO."; break;
		case ENUM_GREATERTHAN:	stream << ".GREATERTHAN."; break;
		case ENUM_GREATERTHANOREQUALTO:	stream << ".GREATERTHANOREQUALTO."; break;
		case ENUM_INCLUDEDIN:	stream << ".INCLUDEDIN."; break;
		case ENUM_INCLUDES:	stream << ".INCLUDES."; break;
		case ENUM_LESSTHAN:	stream << ".LESSTHAN."; break;
		case ENUM_LESSTHANOREQUALTO:	stream << ".LESSTHANOREQUALTO."; break;
		case ENUM_NOTEQUALTO:	stream << ".NOTEQUALTO."; break;
		case ENUM_NOTINCLUDEDIN:	stream << ".NOTINCLUDEDIN."; break;
		case ENUM_NOTINCLUDES:	stream << ".NOTINCLUDES."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcBenchmarkEnum> IFC4X3::IfcBenchmarkEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcBenchmarkEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcBenchmarkEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcBenchmarkEnum>(); }
	shared_ptr<IfcBenchmarkEnum> type_object( new IfcBenchmarkEnum() );
	if( std_iequal( arg, ".EQUALTO." ) )
	{
		type_object->m_enum = IfcBenchmarkEnum::ENUM_EQUALTO;
	}
	else if( std_iequal( arg, ".GREATERTHAN." ) )
	{
		type_object->m_enum = IfcBenchmarkEnum::ENUM_GREATERTHAN;
	}
	else if( std_iequal( arg, ".GREATERTHANOREQUALTO." ) )
	{
		type_object->m_enum = IfcBenchmarkEnum::ENUM_GREATERTHANOREQUALTO;
	}
	else if( std_iequal( arg, ".INCLUDEDIN." ) )
	{
		type_object->m_enum = IfcBenchmarkEnum::ENUM_INCLUDEDIN;
	}
	else if( std_iequal( arg, ".INCLUDES." ) )
	{
		type_object->m_enum = IfcBenchmarkEnum::ENUM_INCLUDES;
	}
	else if( std_iequal( arg, ".LESSTHAN." ) )
	{
		type_object->m_enum = IfcBenchmarkEnum::ENUM_LESSTHAN;
	}
	else if( std_iequal( arg, ".LESSTHANOREQUALTO." ) )
	{
		type_object->m_enum = IfcBenchmarkEnum::ENUM_LESSTHANOREQUALTO;
	}
	else if( std_iequal( arg, ".NOTEQUALTO." ) )
	{
		type_object->m_enum = IfcBenchmarkEnum::ENUM_NOTEQUALTO;
	}
	else if( std_iequal( arg, ".NOTINCLUDEDIN." ) )
	{
		type_object->m_enum = IfcBenchmarkEnum::ENUM_NOTINCLUDEDIN;
	}
	else if( std_iequal( arg, ".NOTINCLUDES." ) )
	{
		type_object->m_enum = IfcBenchmarkEnum::ENUM_NOTINCLUDES;
	}
	return type_object;
}
