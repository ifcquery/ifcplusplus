/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcBridgeTypeEnum.h"

// TYPE IfcBridgeTypeEnum = ENUMERATION OF	(ARCHED	,CABLE_STAYED	,CANTILEVER	,CULVERT	,FRAMEWORK	,GIRDER	,SUSPENSION	,TRUSS	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcBridgeTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCBRIDGETYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_ARCHED:	stream << ".ARCHED."; break;
		case ENUM_CABLE_STAYED:	stream << ".CABLE_STAYED."; break;
		case ENUM_CANTILEVER:	stream << ".CANTILEVER."; break;
		case ENUM_CULVERT:	stream << ".CULVERT."; break;
		case ENUM_FRAMEWORK:	stream << ".FRAMEWORK."; break;
		case ENUM_GIRDER:	stream << ".GIRDER."; break;
		case ENUM_SUSPENSION:	stream << ".SUSPENSION."; break;
		case ENUM_TRUSS:	stream << ".TRUSS."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcBridgeTypeEnum> IFC4X3::IfcBridgeTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcBridgeTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcBridgeTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcBridgeTypeEnum>(); }
	shared_ptr<IfcBridgeTypeEnum> type_object( new IfcBridgeTypeEnum() );
	if( std_iequal( arg, ".ARCHED." ) )
	{
		type_object->m_enum = IfcBridgeTypeEnum::ENUM_ARCHED;
	}
	else if( std_iequal( arg, ".CABLE_STAYED." ) )
	{
		type_object->m_enum = IfcBridgeTypeEnum::ENUM_CABLE_STAYED;
	}
	else if( std_iequal( arg, ".CANTILEVER." ) )
	{
		type_object->m_enum = IfcBridgeTypeEnum::ENUM_CANTILEVER;
	}
	else if( std_iequal( arg, ".CULVERT." ) )
	{
		type_object->m_enum = IfcBridgeTypeEnum::ENUM_CULVERT;
	}
	else if( std_iequal( arg, ".FRAMEWORK." ) )
	{
		type_object->m_enum = IfcBridgeTypeEnum::ENUM_FRAMEWORK;
	}
	else if( std_iequal( arg, ".GIRDER." ) )
	{
		type_object->m_enum = IfcBridgeTypeEnum::ENUM_GIRDER;
	}
	else if( std_iequal( arg, ".SUSPENSION." ) )
	{
		type_object->m_enum = IfcBridgeTypeEnum::ENUM_SUSPENSION;
	}
	else if( std_iequal( arg, ".TRUSS." ) )
	{
		type_object->m_enum = IfcBridgeTypeEnum::ENUM_TRUSS;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcBridgeTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcBridgeTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
