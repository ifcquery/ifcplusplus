/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcBuiltSystemTypeEnum.h"

// TYPE IfcBuiltSystemTypeEnum = ENUMERATION OF	(EROSIONPREVENTION	,FENESTRATION	,FOUNDATION	,LOADBEARING	,MOORING	,OUTERSHELL	,PRESTRESSING	,RAILWAYLINE	,RAILWAYTRACK	,REINFORCING	,SHADING	,TRACKCIRCUIT	,TRANSPORT	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcBuiltSystemTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCBUILTSYSTEMTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_EROSIONPREVENTION:	stream << ".EROSIONPREVENTION."; break;
		case ENUM_FENESTRATION:	stream << ".FENESTRATION."; break;
		case ENUM_FOUNDATION:	stream << ".FOUNDATION."; break;
		case ENUM_LOADBEARING:	stream << ".LOADBEARING."; break;
		case ENUM_MOORING:	stream << ".MOORING."; break;
		case ENUM_OUTERSHELL:	stream << ".OUTERSHELL."; break;
		case ENUM_PRESTRESSING:	stream << ".PRESTRESSING."; break;
		case ENUM_RAILWAYLINE:	stream << ".RAILWAYLINE."; break;
		case ENUM_RAILWAYTRACK:	stream << ".RAILWAYTRACK."; break;
		case ENUM_REINFORCING:	stream << ".REINFORCING."; break;
		case ENUM_SHADING:	stream << ".SHADING."; break;
		case ENUM_TRACKCIRCUIT:	stream << ".TRACKCIRCUIT."; break;
		case ENUM_TRANSPORT:	stream << ".TRANSPORT."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcBuiltSystemTypeEnum> IFC4X3::IfcBuiltSystemTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcBuiltSystemTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcBuiltSystemTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcBuiltSystemTypeEnum>(); }
	shared_ptr<IfcBuiltSystemTypeEnum> type_object( new IfcBuiltSystemTypeEnum() );
	if( std_iequal( arg, ".EROSIONPREVENTION." ) )
	{
		type_object->m_enum = IfcBuiltSystemTypeEnum::ENUM_EROSIONPREVENTION;
	}
	else if( std_iequal( arg, ".FENESTRATION." ) )
	{
		type_object->m_enum = IfcBuiltSystemTypeEnum::ENUM_FENESTRATION;
	}
	else if( std_iequal( arg, ".FOUNDATION." ) )
	{
		type_object->m_enum = IfcBuiltSystemTypeEnum::ENUM_FOUNDATION;
	}
	else if( std_iequal( arg, ".LOADBEARING." ) )
	{
		type_object->m_enum = IfcBuiltSystemTypeEnum::ENUM_LOADBEARING;
	}
	else if( std_iequal( arg, ".MOORING." ) )
	{
		type_object->m_enum = IfcBuiltSystemTypeEnum::ENUM_MOORING;
	}
	else if( std_iequal( arg, ".OUTERSHELL." ) )
	{
		type_object->m_enum = IfcBuiltSystemTypeEnum::ENUM_OUTERSHELL;
	}
	else if( std_iequal( arg, ".PRESTRESSING." ) )
	{
		type_object->m_enum = IfcBuiltSystemTypeEnum::ENUM_PRESTRESSING;
	}
	else if( std_iequal( arg, ".RAILWAYLINE." ) )
	{
		type_object->m_enum = IfcBuiltSystemTypeEnum::ENUM_RAILWAYLINE;
	}
	else if( std_iequal( arg, ".RAILWAYTRACK." ) )
	{
		type_object->m_enum = IfcBuiltSystemTypeEnum::ENUM_RAILWAYTRACK;
	}
	else if( std_iequal( arg, ".REINFORCING." ) )
	{
		type_object->m_enum = IfcBuiltSystemTypeEnum::ENUM_REINFORCING;
	}
	else if( std_iequal( arg, ".SHADING." ) )
	{
		type_object->m_enum = IfcBuiltSystemTypeEnum::ENUM_SHADING;
	}
	else if( std_iequal( arg, ".TRACKCIRCUIT." ) )
	{
		type_object->m_enum = IfcBuiltSystemTypeEnum::ENUM_TRACKCIRCUIT;
	}
	else if( std_iequal( arg, ".TRANSPORT." ) )
	{
		type_object->m_enum = IfcBuiltSystemTypeEnum::ENUM_TRANSPORT;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcBuiltSystemTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcBuiltSystemTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
