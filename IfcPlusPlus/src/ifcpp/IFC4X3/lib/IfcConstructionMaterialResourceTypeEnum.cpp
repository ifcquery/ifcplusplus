/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcConstructionMaterialResourceTypeEnum.h"

// TYPE IfcConstructionMaterialResourceTypeEnum = ENUMERATION OF	(AGGREGATES	,CONCRETE	,DRYWALL	,FUEL	,GYPSUM	,MASONRY	,METAL	,PLASTIC	,WOOD	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcConstructionMaterialResourceTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCCONSTRUCTIONMATERIALRESOURCETYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_AGGREGATES:	stream << ".AGGREGATES."; break;
		case ENUM_CONCRETE:	stream << ".CONCRETE."; break;
		case ENUM_DRYWALL:	stream << ".DRYWALL."; break;
		case ENUM_FUEL:	stream << ".FUEL."; break;
		case ENUM_GYPSUM:	stream << ".GYPSUM."; break;
		case ENUM_MASONRY:	stream << ".MASONRY."; break;
		case ENUM_METAL:	stream << ".METAL."; break;
		case ENUM_PLASTIC:	stream << ".PLASTIC."; break;
		case ENUM_WOOD:	stream << ".WOOD."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcConstructionMaterialResourceTypeEnum> IFC4X3::IfcConstructionMaterialResourceTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcConstructionMaterialResourceTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcConstructionMaterialResourceTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcConstructionMaterialResourceTypeEnum>(); }
	shared_ptr<IfcConstructionMaterialResourceTypeEnum> type_object( new IfcConstructionMaterialResourceTypeEnum() );
	if( std_iequal( arg, ".AGGREGATES." ) )
	{
		type_object->m_enum = IfcConstructionMaterialResourceTypeEnum::ENUM_AGGREGATES;
	}
	else if( std_iequal( arg, ".CONCRETE." ) )
	{
		type_object->m_enum = IfcConstructionMaterialResourceTypeEnum::ENUM_CONCRETE;
	}
	else if( std_iequal( arg, ".DRYWALL." ) )
	{
		type_object->m_enum = IfcConstructionMaterialResourceTypeEnum::ENUM_DRYWALL;
	}
	else if( std_iequal( arg, ".FUEL." ) )
	{
		type_object->m_enum = IfcConstructionMaterialResourceTypeEnum::ENUM_FUEL;
	}
	else if( std_iequal( arg, ".GYPSUM." ) )
	{
		type_object->m_enum = IfcConstructionMaterialResourceTypeEnum::ENUM_GYPSUM;
	}
	else if( std_iequal( arg, ".MASONRY." ) )
	{
		type_object->m_enum = IfcConstructionMaterialResourceTypeEnum::ENUM_MASONRY;
	}
	else if( std_iequal( arg, ".METAL." ) )
	{
		type_object->m_enum = IfcConstructionMaterialResourceTypeEnum::ENUM_METAL;
	}
	else if( std_iequal( arg, ".PLASTIC." ) )
	{
		type_object->m_enum = IfcConstructionMaterialResourceTypeEnum::ENUM_PLASTIC;
	}
	else if( std_iequal( arg, ".WOOD." ) )
	{
		type_object->m_enum = IfcConstructionMaterialResourceTypeEnum::ENUM_WOOD;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcConstructionMaterialResourceTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcConstructionMaterialResourceTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
