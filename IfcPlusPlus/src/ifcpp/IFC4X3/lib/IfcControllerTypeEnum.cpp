/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcControllerTypeEnum.h"

// TYPE IfcControllerTypeEnum = ENUMERATION OF	(FLOATING	,MULTIPOSITION	,PROGRAMMABLE	,PROPORTIONAL	,TWOPOSITION	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcControllerTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCCONTROLLERTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_FLOATING:	stream << ".FLOATING."; break;
		case ENUM_MULTIPOSITION:	stream << ".MULTIPOSITION."; break;
		case ENUM_PROGRAMMABLE:	stream << ".PROGRAMMABLE."; break;
		case ENUM_PROPORTIONAL:	stream << ".PROPORTIONAL."; break;
		case ENUM_TWOPOSITION:	stream << ".TWOPOSITION."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcControllerTypeEnum> IFC4X3::IfcControllerTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcControllerTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcControllerTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcControllerTypeEnum>(); }
	shared_ptr<IfcControllerTypeEnum> type_object( new IfcControllerTypeEnum() );
	if( std_iequal( arg, ".FLOATING." ) )
	{
		type_object->m_enum = IfcControllerTypeEnum::ENUM_FLOATING;
	}
	else if( std_iequal( arg, ".MULTIPOSITION." ) )
	{
		type_object->m_enum = IfcControllerTypeEnum::ENUM_MULTIPOSITION;
	}
	else if( std_iequal( arg, ".PROGRAMMABLE." ) )
	{
		type_object->m_enum = IfcControllerTypeEnum::ENUM_PROGRAMMABLE;
	}
	else if( std_iequal( arg, ".PROPORTIONAL." ) )
	{
		type_object->m_enum = IfcControllerTypeEnum::ENUM_PROPORTIONAL;
	}
	else if( std_iequal( arg, ".TWOPOSITION." ) )
	{
		type_object->m_enum = IfcControllerTypeEnum::ENUM_TWOPOSITION;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcControllerTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcControllerTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
