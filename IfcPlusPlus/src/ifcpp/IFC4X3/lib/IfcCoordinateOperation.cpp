/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcCoordinateOperation.h"
#include "ifcpp/IFC4X3/include/IfcCoordinateReferenceSystem.h"
#include "ifcpp/IFC4X3/include/IfcCoordinateReferenceSystemSelect.h"
#include "ifcpp/IFC4X3/include/IfcGeometricRepresentationContext.h"

// ENTITY IfcCoordinateOperation 
IFC4X3::IfcCoordinateOperation::IfcCoordinateOperation( int tag ) { m_tag = tag; }
void IFC4X3::IfcCoordinateOperation::getStepLine( std::stringstream& stream, size_t precision ) const
{
	stream << "#" << m_tag << "=IFCCOORDINATEOPERATION" << "(";
	if( m_SourceCRS ) { m_SourceCRS->getStepParameter( stream, true, precision ); } else { stream << "$" ; }
	stream << ",";
	if( m_TargetCRS ) { stream << "#" << m_TargetCRS->m_tag; } else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcCoordinateOperation::getStepParameter( std::stringstream& stream, bool /*is_select_type*/, size_t /*precision*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcCoordinateOperation::readStepArguments( const std::vector<std::string>& args, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	const size_t num_args = args.size();
	if( num_args > 0 ){m_SourceCRS = IfcCoordinateReferenceSystemSelect::createObjectFromSTEP( args[0], map, errorStream, entityIdNotFound );}
	if( num_args > 1 ){readEntityReference( args[1], m_TargetCRS, map, errorStream, entityIdNotFound );}
	if( num_args != 2 ){ errorStream << "Wrong parameter count for entity IfcCoordinateOperation, expecting 2, having " << num_args << ". Entity ID: " << m_tag << std::endl; }
}
void IFC4X3::IfcCoordinateOperation::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	vec_attributes.emplace_back( std::make_pair( "SourceCRS", m_SourceCRS ) );
	vec_attributes.emplace_back( std::make_pair( "TargetCRS", m_TargetCRS ) );
}
void IFC4X3::IfcCoordinateOperation::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
}
void IFC4X3::IfcCoordinateOperation::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	shared_ptr<IfcCoordinateOperation> ptr_self = dynamic_pointer_cast<IfcCoordinateOperation>( ptr_self_entity );
	if( !ptr_self ) { throw BuildingException( "IfcCoordinateOperation::setInverseCounterparts: type mismatch" ); }
	shared_ptr<IfcCoordinateReferenceSystem>  SourceCRS_IfcCoordinateReferenceSystem = dynamic_pointer_cast<IfcCoordinateReferenceSystem>( m_SourceCRS );
	if( SourceCRS_IfcCoordinateReferenceSystem )
	{
		SourceCRS_IfcCoordinateReferenceSystem->m_HasCoordinateOperation_inverse.emplace_back( ptr_self );
	}
	shared_ptr<IfcGeometricRepresentationContext>  SourceCRS_IfcGeometricRepresentationContext = dynamic_pointer_cast<IfcGeometricRepresentationContext>( m_SourceCRS );
	if( SourceCRS_IfcGeometricRepresentationContext )
	{
		SourceCRS_IfcGeometricRepresentationContext->m_HasCoordinateOperation_inverse.emplace_back( ptr_self );
	}
}
void IFC4X3::IfcCoordinateOperation::unlinkFromInverseCounterparts()
{
	shared_ptr<IfcCoordinateReferenceSystem>  SourceCRS_IfcCoordinateReferenceSystem = dynamic_pointer_cast<IfcCoordinateReferenceSystem>( m_SourceCRS );
	if( SourceCRS_IfcCoordinateReferenceSystem )
	{
		std::vector<weak_ptr<IfcCoordinateOperation> >& HasCoordinateOperation_inverse = SourceCRS_IfcCoordinateReferenceSystem->m_HasCoordinateOperation_inverse;
		for( auto it_HasCoordinateOperation_inverse = HasCoordinateOperation_inverse.begin(); it_HasCoordinateOperation_inverse != HasCoordinateOperation_inverse.end(); )
		{
			weak_ptr<IfcCoordinateOperation> self_candidate_weak = *it_HasCoordinateOperation_inverse;
			if( self_candidate_weak.expired() )
			{
				++it_HasCoordinateOperation_inverse;
				continue;
			}
			shared_ptr<IfcCoordinateOperation> self_candidate( *it_HasCoordinateOperation_inverse );
			if( self_candidate.get() == this )
			{
				it_HasCoordinateOperation_inverse= HasCoordinateOperation_inverse.erase( it_HasCoordinateOperation_inverse );
			}
			else
			{
				++it_HasCoordinateOperation_inverse;
			}
		}
	}
	shared_ptr<IfcGeometricRepresentationContext>  SourceCRS_IfcGeometricRepresentationContext = dynamic_pointer_cast<IfcGeometricRepresentationContext>( m_SourceCRS );
	if( SourceCRS_IfcGeometricRepresentationContext )
	{
		std::vector<weak_ptr<IfcCoordinateOperation> >& HasCoordinateOperation_inverse = SourceCRS_IfcGeometricRepresentationContext->m_HasCoordinateOperation_inverse;
		for( auto it_HasCoordinateOperation_inverse = HasCoordinateOperation_inverse.begin(); it_HasCoordinateOperation_inverse != HasCoordinateOperation_inverse.end(); )
		{
			weak_ptr<IfcCoordinateOperation> self_candidate_weak = *it_HasCoordinateOperation_inverse;
			if( self_candidate_weak.expired() )
			{
				++it_HasCoordinateOperation_inverse;
				continue;
			}
			shared_ptr<IfcCoordinateOperation> self_candidate( *it_HasCoordinateOperation_inverse );
			if( self_candidate.get() == this )
			{
				it_HasCoordinateOperation_inverse= HasCoordinateOperation_inverse.erase( it_HasCoordinateOperation_inverse );
			}
			else
			{
				++it_HasCoordinateOperation_inverse;
			}
		}
	}
}
