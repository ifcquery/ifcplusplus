/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcCoveringTypeEnum.h"

// TYPE IfcCoveringTypeEnum = ENUMERATION OF	(CEILING	,CLADDING	,COPING	,FLOORING	,INSULATION	,MEMBRANE	,MOLDING	,ROOFING	,SKIRTINGBOARD	,SLEEVING	,TOPPING	,WRAPPING	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcCoveringTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCCOVERINGTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_CEILING:	stream << ".CEILING."; break;
		case ENUM_CLADDING:	stream << ".CLADDING."; break;
		case ENUM_COPING:	stream << ".COPING."; break;
		case ENUM_FLOORING:	stream << ".FLOORING."; break;
		case ENUM_INSULATION:	stream << ".INSULATION."; break;
		case ENUM_MEMBRANE:	stream << ".MEMBRANE."; break;
		case ENUM_MOLDING:	stream << ".MOLDING."; break;
		case ENUM_ROOFING:	stream << ".ROOFING."; break;
		case ENUM_SKIRTINGBOARD:	stream << ".SKIRTINGBOARD."; break;
		case ENUM_SLEEVING:	stream << ".SLEEVING."; break;
		case ENUM_TOPPING:	stream << ".TOPPING."; break;
		case ENUM_WRAPPING:	stream << ".WRAPPING."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcCoveringTypeEnum> IFC4X3::IfcCoveringTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcCoveringTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcCoveringTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcCoveringTypeEnum>(); }
	shared_ptr<IfcCoveringTypeEnum> type_object( new IfcCoveringTypeEnum() );
	if( std_iequal( arg, ".CEILING." ) )
	{
		type_object->m_enum = IfcCoveringTypeEnum::ENUM_CEILING;
	}
	else if( std_iequal( arg, ".CLADDING." ) )
	{
		type_object->m_enum = IfcCoveringTypeEnum::ENUM_CLADDING;
	}
	else if( std_iequal( arg, ".COPING." ) )
	{
		type_object->m_enum = IfcCoveringTypeEnum::ENUM_COPING;
	}
	else if( std_iequal( arg, ".FLOORING." ) )
	{
		type_object->m_enum = IfcCoveringTypeEnum::ENUM_FLOORING;
	}
	else if( std_iequal( arg, ".INSULATION." ) )
	{
		type_object->m_enum = IfcCoveringTypeEnum::ENUM_INSULATION;
	}
	else if( std_iequal( arg, ".MEMBRANE." ) )
	{
		type_object->m_enum = IfcCoveringTypeEnum::ENUM_MEMBRANE;
	}
	else if( std_iequal( arg, ".MOLDING." ) )
	{
		type_object->m_enum = IfcCoveringTypeEnum::ENUM_MOLDING;
	}
	else if( std_iequal( arg, ".ROOFING." ) )
	{
		type_object->m_enum = IfcCoveringTypeEnum::ENUM_ROOFING;
	}
	else if( std_iequal( arg, ".SKIRTINGBOARD." ) )
	{
		type_object->m_enum = IfcCoveringTypeEnum::ENUM_SKIRTINGBOARD;
	}
	else if( std_iequal( arg, ".SLEEVING." ) )
	{
		type_object->m_enum = IfcCoveringTypeEnum::ENUM_SLEEVING;
	}
	else if( std_iequal( arg, ".TOPPING." ) )
	{
		type_object->m_enum = IfcCoveringTypeEnum::ENUM_TOPPING;
	}
	else if( std_iequal( arg, ".WRAPPING." ) )
	{
		type_object->m_enum = IfcCoveringTypeEnum::ENUM_WRAPPING;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcCoveringTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcCoveringTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
