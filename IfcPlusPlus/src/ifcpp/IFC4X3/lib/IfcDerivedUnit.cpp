/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcDerivedUnit.h"
#include "ifcpp/IFC4X3/include/IfcDerivedUnitElement.h"
#include "ifcpp/IFC4X3/include/IfcDerivedUnitEnum.h"
#include "ifcpp/IFC4X3/include/IfcLabel.h"

// ENTITY IfcDerivedUnit 
IFC4X3::IfcDerivedUnit::IfcDerivedUnit( int tag ) { m_tag = tag; }
void IFC4X3::IfcDerivedUnit::getStepLine( std::stringstream& stream, size_t precision ) const
{
	stream << "#" << m_tag << "=IFCDERIVEDUNIT" << "(";
	writeEntityList( stream, m_Elements );
	stream << ",";
	if( m_UnitType ) { m_UnitType->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_UserDefinedType ) { m_UserDefinedType->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_Name ) { m_Name->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcDerivedUnit::getStepParameter( std::stringstream& stream, bool /*is_select_type*/, size_t /*precision*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcDerivedUnit::readStepArguments( const std::vector<std::string>& args, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	const size_t num_args = args.size();
	if( num_args > 0 ){readEntityReferenceList( args[0], m_Elements, map, errorStream, entityIdNotFound );}
	if( num_args > 1 ){m_UnitType = IfcDerivedUnitEnum::createObjectFromSTEP( args[1], map, errorStream, entityIdNotFound );}
	if( num_args > 2 ){m_UserDefinedType = IfcLabel::createObjectFromSTEP( args[2], map, errorStream, entityIdNotFound );}
	if( num_args > 3 ){m_Name = IfcLabel::createObjectFromSTEP( args[3], map, errorStream, entityIdNotFound );}
	if( num_args != 4 ){ errorStream << "Wrong parameter count for entity IfcDerivedUnit, expecting 4, having " << num_args << ". Entity ID: " << m_tag << std::endl; }
}
void IFC4X3::IfcDerivedUnit::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	shared_ptr<AttributeObjectVector> Elements_vec_object( new AttributeObjectVector() );
	std::copy( m_Elements.begin(), m_Elements.end(), std::back_inserter( Elements_vec_object->m_vec ) );
	vec_attributes.emplace_back( std::make_pair( "Elements", Elements_vec_object ) );
	vec_attributes.emplace_back( std::make_pair( "UnitType", m_UnitType ) );
	vec_attributes.emplace_back( std::make_pair( "UserDefinedType", m_UserDefinedType ) );
	vec_attributes.emplace_back( std::make_pair( "Name", m_Name ) );
}
void IFC4X3::IfcDerivedUnit::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
}
void IFC4X3::IfcDerivedUnit::setInverseCounterparts( shared_ptr<BuildingEntity> )
{
}
void IFC4X3::IfcDerivedUnit::unlinkFromInverseCounterparts()
{
}
