/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcDerivedUnitEnum.h"

// TYPE IfcDerivedUnitEnum = ENUMERATION OF	(ACCELERATIONUNIT	,ANGULARVELOCITYUNIT	,AREADENSITYUNIT	,COMPOUNDPLANEANGLEUNIT	,CURVATUREUNIT	,DYNAMICVISCOSITYUNIT	,HEATFLUXDENSITYUNIT	,HEATINGVALUEUNIT	,INTEGERCOUNTRATEUNIT	,IONCONCENTRATIONUNIT	,ISOTHERMALMOISTURECAPACITYUNIT	,KINEMATICVISCOSITYUNIT	,LINEARFORCEUNIT	,LINEARMOMENTUNIT	,LINEARSTIFFNESSUNIT	,LINEARVELOCITYUNIT	,LUMINOUSINTENSITYDISTRIBUTIONUNIT	,MASSDENSITYUNIT	,MASSFLOWRATEUNIT	,MASSPERLENGTHUNIT	,MODULUSOFELASTICITYUNIT	,MODULUSOFLINEARSUBGRADEREACTIONUNIT	,MODULUSOFROTATIONALSUBGRADEREACTIONUNIT	,MODULUSOFSUBGRADEREACTIONUNIT	,MOISTUREDIFFUSIVITYUNIT	,MOLECULARWEIGHTUNIT	,MOMENTOFINERTIAUNIT	,PHUNIT	,PLANARFORCEUNIT	,ROTATIONALFREQUENCYUNIT	,ROTATIONALMASSUNIT	,ROTATIONALSTIFFNESSUNIT	,SECTIONAREAINTEGRALUNIT	,SECTIONMODULUSUNIT	,SHEARMODULUSUNIT	,SOUNDPOWERLEVELUNIT	,SOUNDPOWERUNIT	,SOUNDPRESSURELEVELUNIT	,SOUNDPRESSUREUNIT	,SPECIFICHEATCAPACITYUNIT	,TEMPERATUREGRADIENTUNIT	,TEMPERATURERATEOFCHANGEUNIT	,THERMALADMITTANCEUNIT	,THERMALCONDUCTANCEUNIT	,THERMALEXPANSIONCOEFFICIENTUNIT	,THERMALRESISTANCEUNIT	,THERMALTRANSMITTANCEUNIT	,TORQUEUNIT	,VAPORPERMEABILITYUNIT	,VOLUMETRICFLOWRATEUNIT	,WARPINGCONSTANTUNIT	,WARPINGMOMENTUNIT	,USERDEFINED);
void IFC4X3::IfcDerivedUnitEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCDERIVEDUNITENUM("; }
	switch( m_enum )
	{
		case ENUM_ACCELERATIONUNIT:	stream << ".ACCELERATIONUNIT."; break;
		case ENUM_ANGULARVELOCITYUNIT:	stream << ".ANGULARVELOCITYUNIT."; break;
		case ENUM_AREADENSITYUNIT:	stream << ".AREADENSITYUNIT."; break;
		case ENUM_COMPOUNDPLANEANGLEUNIT:	stream << ".COMPOUNDPLANEANGLEUNIT."; break;
		case ENUM_CURVATUREUNIT:	stream << ".CURVATUREUNIT."; break;
		case ENUM_DYNAMICVISCOSITYUNIT:	stream << ".DYNAMICVISCOSITYUNIT."; break;
		case ENUM_HEATFLUXDENSITYUNIT:	stream << ".HEATFLUXDENSITYUNIT."; break;
		case ENUM_HEATINGVALUEUNIT:	stream << ".HEATINGVALUEUNIT."; break;
		case ENUM_INTEGERCOUNTRATEUNIT:	stream << ".INTEGERCOUNTRATEUNIT."; break;
		case ENUM_IONCONCENTRATIONUNIT:	stream << ".IONCONCENTRATIONUNIT."; break;
		case ENUM_ISOTHERMALMOISTURECAPACITYUNIT:	stream << ".ISOTHERMALMOISTURECAPACITYUNIT."; break;
		case ENUM_KINEMATICVISCOSITYUNIT:	stream << ".KINEMATICVISCOSITYUNIT."; break;
		case ENUM_LINEARFORCEUNIT:	stream << ".LINEARFORCEUNIT."; break;
		case ENUM_LINEARMOMENTUNIT:	stream << ".LINEARMOMENTUNIT."; break;
		case ENUM_LINEARSTIFFNESSUNIT:	stream << ".LINEARSTIFFNESSUNIT."; break;
		case ENUM_LINEARVELOCITYUNIT:	stream << ".LINEARVELOCITYUNIT."; break;
		case ENUM_LUMINOUSINTENSITYDISTRIBUTIONUNIT:	stream << ".LUMINOUSINTENSITYDISTRIBUTIONUNIT."; break;
		case ENUM_MASSDENSITYUNIT:	stream << ".MASSDENSITYUNIT."; break;
		case ENUM_MASSFLOWRATEUNIT:	stream << ".MASSFLOWRATEUNIT."; break;
		case ENUM_MASSPERLENGTHUNIT:	stream << ".MASSPERLENGTHUNIT."; break;
		case ENUM_MODULUSOFELASTICITYUNIT:	stream << ".MODULUSOFELASTICITYUNIT."; break;
		case ENUM_MODULUSOFLINEARSUBGRADEREACTIONUNIT:	stream << ".MODULUSOFLINEARSUBGRADEREACTIONUNIT."; break;
		case ENUM_MODULUSOFROTATIONALSUBGRADEREACTIONUNIT:	stream << ".MODULUSOFROTATIONALSUBGRADEREACTIONUNIT."; break;
		case ENUM_MODULUSOFSUBGRADEREACTIONUNIT:	stream << ".MODULUSOFSUBGRADEREACTIONUNIT."; break;
		case ENUM_MOISTUREDIFFUSIVITYUNIT:	stream << ".MOISTUREDIFFUSIVITYUNIT."; break;
		case ENUM_MOLECULARWEIGHTUNIT:	stream << ".MOLECULARWEIGHTUNIT."; break;
		case ENUM_MOMENTOFINERTIAUNIT:	stream << ".MOMENTOFINERTIAUNIT."; break;
		case ENUM_PHUNIT:	stream << ".PHUNIT."; break;
		case ENUM_PLANARFORCEUNIT:	stream << ".PLANARFORCEUNIT."; break;
		case ENUM_ROTATIONALFREQUENCYUNIT:	stream << ".ROTATIONALFREQUENCYUNIT."; break;
		case ENUM_ROTATIONALMASSUNIT:	stream << ".ROTATIONALMASSUNIT."; break;
		case ENUM_ROTATIONALSTIFFNESSUNIT:	stream << ".ROTATIONALSTIFFNESSUNIT."; break;
		case ENUM_SECTIONAREAINTEGRALUNIT:	stream << ".SECTIONAREAINTEGRALUNIT."; break;
		case ENUM_SECTIONMODULUSUNIT:	stream << ".SECTIONMODULUSUNIT."; break;
		case ENUM_SHEARMODULUSUNIT:	stream << ".SHEARMODULUSUNIT."; break;
		case ENUM_SOUNDPOWERLEVELUNIT:	stream << ".SOUNDPOWERLEVELUNIT."; break;
		case ENUM_SOUNDPOWERUNIT:	stream << ".SOUNDPOWERUNIT."; break;
		case ENUM_SOUNDPRESSURELEVELUNIT:	stream << ".SOUNDPRESSURELEVELUNIT."; break;
		case ENUM_SOUNDPRESSUREUNIT:	stream << ".SOUNDPRESSUREUNIT."; break;
		case ENUM_SPECIFICHEATCAPACITYUNIT:	stream << ".SPECIFICHEATCAPACITYUNIT."; break;
		case ENUM_TEMPERATUREGRADIENTUNIT:	stream << ".TEMPERATUREGRADIENTUNIT."; break;
		case ENUM_TEMPERATURERATEOFCHANGEUNIT:	stream << ".TEMPERATURERATEOFCHANGEUNIT."; break;
		case ENUM_THERMALADMITTANCEUNIT:	stream << ".THERMALADMITTANCEUNIT."; break;
		case ENUM_THERMALCONDUCTANCEUNIT:	stream << ".THERMALCONDUCTANCEUNIT."; break;
		case ENUM_THERMALEXPANSIONCOEFFICIENTUNIT:	stream << ".THERMALEXPANSIONCOEFFICIENTUNIT."; break;
		case ENUM_THERMALRESISTANCEUNIT:	stream << ".THERMALRESISTANCEUNIT."; break;
		case ENUM_THERMALTRANSMITTANCEUNIT:	stream << ".THERMALTRANSMITTANCEUNIT."; break;
		case ENUM_TORQUEUNIT:	stream << ".TORQUEUNIT."; break;
		case ENUM_VAPORPERMEABILITYUNIT:	stream << ".VAPORPERMEABILITYUNIT."; break;
		case ENUM_VOLUMETRICFLOWRATEUNIT:	stream << ".VOLUMETRICFLOWRATEUNIT."; break;
		case ENUM_WARPINGCONSTANTUNIT:	stream << ".WARPINGCONSTANTUNIT."; break;
		case ENUM_WARPINGMOMENTUNIT:	stream << ".WARPINGMOMENTUNIT."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcDerivedUnitEnum> IFC4X3::IfcDerivedUnitEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcDerivedUnitEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcDerivedUnitEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcDerivedUnitEnum>(); }
	shared_ptr<IfcDerivedUnitEnum> type_object( new IfcDerivedUnitEnum() );
	if( std_iequal( arg, ".ACCELERATIONUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_ACCELERATIONUNIT;
	}
	else if( std_iequal( arg, ".ANGULARVELOCITYUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_ANGULARVELOCITYUNIT;
	}
	else if( std_iequal( arg, ".AREADENSITYUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_AREADENSITYUNIT;
	}
	else if( std_iequal( arg, ".COMPOUNDPLANEANGLEUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_COMPOUNDPLANEANGLEUNIT;
	}
	else if( std_iequal( arg, ".CURVATUREUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_CURVATUREUNIT;
	}
	else if( std_iequal( arg, ".DYNAMICVISCOSITYUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_DYNAMICVISCOSITYUNIT;
	}
	else if( std_iequal( arg, ".HEATFLUXDENSITYUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_HEATFLUXDENSITYUNIT;
	}
	else if( std_iequal( arg, ".HEATINGVALUEUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_HEATINGVALUEUNIT;
	}
	else if( std_iequal( arg, ".INTEGERCOUNTRATEUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_INTEGERCOUNTRATEUNIT;
	}
	else if( std_iequal( arg, ".IONCONCENTRATIONUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_IONCONCENTRATIONUNIT;
	}
	else if( std_iequal( arg, ".ISOTHERMALMOISTURECAPACITYUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_ISOTHERMALMOISTURECAPACITYUNIT;
	}
	else if( std_iequal( arg, ".KINEMATICVISCOSITYUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_KINEMATICVISCOSITYUNIT;
	}
	else if( std_iequal( arg, ".LINEARFORCEUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_LINEARFORCEUNIT;
	}
	else if( std_iequal( arg, ".LINEARMOMENTUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_LINEARMOMENTUNIT;
	}
	else if( std_iequal( arg, ".LINEARSTIFFNESSUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_LINEARSTIFFNESSUNIT;
	}
	else if( std_iequal( arg, ".LINEARVELOCITYUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_LINEARVELOCITYUNIT;
	}
	else if( std_iequal( arg, ".LUMINOUSINTENSITYDISTRIBUTIONUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_LUMINOUSINTENSITYDISTRIBUTIONUNIT;
	}
	else if( std_iequal( arg, ".MASSDENSITYUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_MASSDENSITYUNIT;
	}
	else if( std_iequal( arg, ".MASSFLOWRATEUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_MASSFLOWRATEUNIT;
	}
	else if( std_iequal( arg, ".MASSPERLENGTHUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_MASSPERLENGTHUNIT;
	}
	else if( std_iequal( arg, ".MODULUSOFELASTICITYUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_MODULUSOFELASTICITYUNIT;
	}
	else if( std_iequal( arg, ".MODULUSOFLINEARSUBGRADEREACTIONUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_MODULUSOFLINEARSUBGRADEREACTIONUNIT;
	}
	else if( std_iequal( arg, ".MODULUSOFROTATIONALSUBGRADEREACTIONUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_MODULUSOFROTATIONALSUBGRADEREACTIONUNIT;
	}
	else if( std_iequal( arg, ".MODULUSOFSUBGRADEREACTIONUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_MODULUSOFSUBGRADEREACTIONUNIT;
	}
	else if( std_iequal( arg, ".MOISTUREDIFFUSIVITYUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_MOISTUREDIFFUSIVITYUNIT;
	}
	else if( std_iequal( arg, ".MOLECULARWEIGHTUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_MOLECULARWEIGHTUNIT;
	}
	else if( std_iequal( arg, ".MOMENTOFINERTIAUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_MOMENTOFINERTIAUNIT;
	}
	else if( std_iequal( arg, ".PHUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_PHUNIT;
	}
	else if( std_iequal( arg, ".PLANARFORCEUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_PLANARFORCEUNIT;
	}
	else if( std_iequal( arg, ".ROTATIONALFREQUENCYUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_ROTATIONALFREQUENCYUNIT;
	}
	else if( std_iequal( arg, ".ROTATIONALMASSUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_ROTATIONALMASSUNIT;
	}
	else if( std_iequal( arg, ".ROTATIONALSTIFFNESSUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_ROTATIONALSTIFFNESSUNIT;
	}
	else if( std_iequal( arg, ".SECTIONAREAINTEGRALUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_SECTIONAREAINTEGRALUNIT;
	}
	else if( std_iequal( arg, ".SECTIONMODULUSUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_SECTIONMODULUSUNIT;
	}
	else if( std_iequal( arg, ".SHEARMODULUSUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_SHEARMODULUSUNIT;
	}
	else if( std_iequal( arg, ".SOUNDPOWERLEVELUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_SOUNDPOWERLEVELUNIT;
	}
	else if( std_iequal( arg, ".SOUNDPOWERUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_SOUNDPOWERUNIT;
	}
	else if( std_iequal( arg, ".SOUNDPRESSURELEVELUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_SOUNDPRESSURELEVELUNIT;
	}
	else if( std_iequal( arg, ".SOUNDPRESSUREUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_SOUNDPRESSUREUNIT;
	}
	else if( std_iequal( arg, ".SPECIFICHEATCAPACITYUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_SPECIFICHEATCAPACITYUNIT;
	}
	else if( std_iequal( arg, ".TEMPERATUREGRADIENTUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_TEMPERATUREGRADIENTUNIT;
	}
	else if( std_iequal( arg, ".TEMPERATURERATEOFCHANGEUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_TEMPERATURERATEOFCHANGEUNIT;
	}
	else if( std_iequal( arg, ".THERMALADMITTANCEUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_THERMALADMITTANCEUNIT;
	}
	else if( std_iequal( arg, ".THERMALCONDUCTANCEUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_THERMALCONDUCTANCEUNIT;
	}
	else if( std_iequal( arg, ".THERMALEXPANSIONCOEFFICIENTUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_THERMALEXPANSIONCOEFFICIENTUNIT;
	}
	else if( std_iequal( arg, ".THERMALRESISTANCEUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_THERMALRESISTANCEUNIT;
	}
	else if( std_iequal( arg, ".THERMALTRANSMITTANCEUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_THERMALTRANSMITTANCEUNIT;
	}
	else if( std_iequal( arg, ".TORQUEUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_TORQUEUNIT;
	}
	else if( std_iequal( arg, ".VAPORPERMEABILITYUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_VAPORPERMEABILITYUNIT;
	}
	else if( std_iequal( arg, ".VOLUMETRICFLOWRATEUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_VOLUMETRICFLOWRATEUNIT;
	}
	else if( std_iequal( arg, ".WARPINGCONSTANTUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_WARPINGCONSTANTUNIT;
	}
	else if( std_iequal( arg, ".WARPINGMOMENTUNIT." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_WARPINGMOMENTUNIT;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcDerivedUnitEnum::ENUM_USERDEFINED;
	}
	return type_object;
}
