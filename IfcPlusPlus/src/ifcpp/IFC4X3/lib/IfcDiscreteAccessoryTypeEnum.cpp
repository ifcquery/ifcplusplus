/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcDiscreteAccessoryTypeEnum.h"

// TYPE IfcDiscreteAccessoryTypeEnum = ENUMERATION OF	(ANCHORPLATE	,BIRDPROTECTION	,BRACKET	,CABLEARRANGER	,ELASTIC_CUSHION	,EXPANSION_JOINT_DEVICE	,FILLER	,FLASHING	,INSULATOR	,LOCK	,PANEL_STRENGTHENING	,POINTMACHINEMOUNTINGDEVICE	,POINT_MACHINE_LOCKING_DEVICE	,RAILBRACE	,RAILPAD	,RAIL_LUBRICATION	,RAIL_MECHANICAL_EQUIPMENT	,SHOE	,SLIDINGCHAIR	,SOUNDABSORPTION	,TENSIONINGEQUIPMENT	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcDiscreteAccessoryTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCDISCRETEACCESSORYTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_ANCHORPLATE:	stream << ".ANCHORPLATE."; break;
		case ENUM_BIRDPROTECTION:	stream << ".BIRDPROTECTION."; break;
		case ENUM_BRACKET:	stream << ".BRACKET."; break;
		case ENUM_CABLEARRANGER:	stream << ".CABLEARRANGER."; break;
		case ENUM_ELASTIC_CUSHION:	stream << ".ELASTIC_CUSHION."; break;
		case ENUM_EXPANSION_JOINT_DEVICE:	stream << ".EXPANSION_JOINT_DEVICE."; break;
		case ENUM_FILLER:	stream << ".FILLER."; break;
		case ENUM_FLASHING:	stream << ".FLASHING."; break;
		case ENUM_INSULATOR:	stream << ".INSULATOR."; break;
		case ENUM_LOCK:	stream << ".LOCK."; break;
		case ENUM_PANEL_STRENGTHENING:	stream << ".PANEL_STRENGTHENING."; break;
		case ENUM_POINTMACHINEMOUNTINGDEVICE:	stream << ".POINTMACHINEMOUNTINGDEVICE."; break;
		case ENUM_POINT_MACHINE_LOCKING_DEVICE:	stream << ".POINT_MACHINE_LOCKING_DEVICE."; break;
		case ENUM_RAILBRACE:	stream << ".RAILBRACE."; break;
		case ENUM_RAILPAD:	stream << ".RAILPAD."; break;
		case ENUM_RAIL_LUBRICATION:	stream << ".RAIL_LUBRICATION."; break;
		case ENUM_RAIL_MECHANICAL_EQUIPMENT:	stream << ".RAIL_MECHANICAL_EQUIPMENT."; break;
		case ENUM_SHOE:	stream << ".SHOE."; break;
		case ENUM_SLIDINGCHAIR:	stream << ".SLIDINGCHAIR."; break;
		case ENUM_SOUNDABSORPTION:	stream << ".SOUNDABSORPTION."; break;
		case ENUM_TENSIONINGEQUIPMENT:	stream << ".TENSIONINGEQUIPMENT."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcDiscreteAccessoryTypeEnum> IFC4X3::IfcDiscreteAccessoryTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcDiscreteAccessoryTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcDiscreteAccessoryTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcDiscreteAccessoryTypeEnum>(); }
	shared_ptr<IfcDiscreteAccessoryTypeEnum> type_object( new IfcDiscreteAccessoryTypeEnum() );
	if( std_iequal( arg, ".ANCHORPLATE." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_ANCHORPLATE;
	}
	else if( std_iequal( arg, ".BIRDPROTECTION." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_BIRDPROTECTION;
	}
	else if( std_iequal( arg, ".BRACKET." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_BRACKET;
	}
	else if( std_iequal( arg, ".CABLEARRANGER." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_CABLEARRANGER;
	}
	else if( std_iequal( arg, ".ELASTIC_CUSHION." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_ELASTIC_CUSHION;
	}
	else if( std_iequal( arg, ".EXPANSION_JOINT_DEVICE." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_EXPANSION_JOINT_DEVICE;
	}
	else if( std_iequal( arg, ".FILLER." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_FILLER;
	}
	else if( std_iequal( arg, ".FLASHING." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_FLASHING;
	}
	else if( std_iequal( arg, ".INSULATOR." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_INSULATOR;
	}
	else if( std_iequal( arg, ".LOCK." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_LOCK;
	}
	else if( std_iequal( arg, ".PANEL_STRENGTHENING." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_PANEL_STRENGTHENING;
	}
	else if( std_iequal( arg, ".POINTMACHINEMOUNTINGDEVICE." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_POINTMACHINEMOUNTINGDEVICE;
	}
	else if( std_iequal( arg, ".POINT_MACHINE_LOCKING_DEVICE." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_POINT_MACHINE_LOCKING_DEVICE;
	}
	else if( std_iequal( arg, ".RAILBRACE." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_RAILBRACE;
	}
	else if( std_iequal( arg, ".RAILPAD." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_RAILPAD;
	}
	else if( std_iequal( arg, ".RAIL_LUBRICATION." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_RAIL_LUBRICATION;
	}
	else if( std_iequal( arg, ".RAIL_MECHANICAL_EQUIPMENT." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_RAIL_MECHANICAL_EQUIPMENT;
	}
	else if( std_iequal( arg, ".SHOE." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_SHOE;
	}
	else if( std_iequal( arg, ".SLIDINGCHAIR." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_SLIDINGCHAIR;
	}
	else if( std_iequal( arg, ".SOUNDABSORPTION." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_SOUNDABSORPTION;
	}
	else if( std_iequal( arg, ".TENSIONINGEQUIPMENT." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_TENSIONINGEQUIPMENT;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcDiscreteAccessoryTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
