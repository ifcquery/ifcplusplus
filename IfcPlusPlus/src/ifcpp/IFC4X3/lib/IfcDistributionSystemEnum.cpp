/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcDistributionSystemEnum.h"

// TYPE IfcDistributionSystemEnum = ENUMERATION OF	(AIRCONDITIONING	,AUDIOVISUAL	,CATENARY_SYSTEM	,CHEMICAL	,CHILLEDWATER	,COMMUNICATION	,COMPRESSEDAIR	,CONDENSERWATER	,CONTROL	,CONVEYING	,DATA	,DISPOSAL	,DOMESTICCOLDWATER	,DOMESTICHOTWATER	,DRAINAGE	,EARTHING	,ELECTRICAL	,ELECTROACOUSTIC	,EXHAUST	,FIREPROTECTION	,FIXEDTRANSMISSIONNETWORK	,FUEL	,GAS	,HAZARDOUS	,HEATING	,LIGHTING	,LIGHTNINGPROTECTION	,MOBILENETWORK	,MONITORINGSYSTEM	,MUNICIPALSOLIDWASTE	,OIL	,OPERATIONAL	,OPERATIONALTELEPHONYSYSTEM	,OVERHEAD_CONTACTLINE_SYSTEM	,POWERGENERATION	,RAINWATER	,REFRIGERATION	,RETURN_CIRCUIT	,SECURITY	,SEWAGE	,SIGNAL	,STORMWATER	,TELEPHONE	,TV	,VACUUM	,VENT	,VENTILATION	,WASTEWATER	,WATERSUPPLY	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcDistributionSystemEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCDISTRIBUTIONSYSTEMENUM("; }
	switch( m_enum )
	{
		case ENUM_AIRCONDITIONING:	stream << ".AIRCONDITIONING."; break;
		case ENUM_AUDIOVISUAL:	stream << ".AUDIOVISUAL."; break;
		case ENUM_CATENARY_SYSTEM:	stream << ".CATENARY_SYSTEM."; break;
		case ENUM_CHEMICAL:	stream << ".CHEMICAL."; break;
		case ENUM_CHILLEDWATER:	stream << ".CHILLEDWATER."; break;
		case ENUM_COMMUNICATION:	stream << ".COMMUNICATION."; break;
		case ENUM_COMPRESSEDAIR:	stream << ".COMPRESSEDAIR."; break;
		case ENUM_CONDENSERWATER:	stream << ".CONDENSERWATER."; break;
		case ENUM_CONTROL:	stream << ".CONTROL."; break;
		case ENUM_CONVEYING:	stream << ".CONVEYING."; break;
		case ENUM_DATA:	stream << ".DATA."; break;
		case ENUM_DISPOSAL:	stream << ".DISPOSAL."; break;
		case ENUM_DOMESTICCOLDWATER:	stream << ".DOMESTICCOLDWATER."; break;
		case ENUM_DOMESTICHOTWATER:	stream << ".DOMESTICHOTWATER."; break;
		case ENUM_DRAINAGE:	stream << ".DRAINAGE."; break;
		case ENUM_EARTHING:	stream << ".EARTHING."; break;
		case ENUM_ELECTRICAL:	stream << ".ELECTRICAL."; break;
		case ENUM_ELECTROACOUSTIC:	stream << ".ELECTROACOUSTIC."; break;
		case ENUM_EXHAUST:	stream << ".EXHAUST."; break;
		case ENUM_FIREPROTECTION:	stream << ".FIREPROTECTION."; break;
		case ENUM_FIXEDTRANSMISSIONNETWORK:	stream << ".FIXEDTRANSMISSIONNETWORK."; break;
		case ENUM_FUEL:	stream << ".FUEL."; break;
		case ENUM_GAS:	stream << ".GAS."; break;
		case ENUM_HAZARDOUS:	stream << ".HAZARDOUS."; break;
		case ENUM_HEATING:	stream << ".HEATING."; break;
		case ENUM_LIGHTING:	stream << ".LIGHTING."; break;
		case ENUM_LIGHTNINGPROTECTION:	stream << ".LIGHTNINGPROTECTION."; break;
		case ENUM_MOBILENETWORK:	stream << ".MOBILENETWORK."; break;
		case ENUM_MONITORINGSYSTEM:	stream << ".MONITORINGSYSTEM."; break;
		case ENUM_MUNICIPALSOLIDWASTE:	stream << ".MUNICIPALSOLIDWASTE."; break;
		case ENUM_OIL:	stream << ".OIL."; break;
		case ENUM_OPERATIONAL:	stream << ".OPERATIONAL."; break;
		case ENUM_OPERATIONALTELEPHONYSYSTEM:	stream << ".OPERATIONALTELEPHONYSYSTEM."; break;
		case ENUM_OVERHEAD_CONTACTLINE_SYSTEM:	stream << ".OVERHEAD_CONTACTLINE_SYSTEM."; break;
		case ENUM_POWERGENERATION:	stream << ".POWERGENERATION."; break;
		case ENUM_RAINWATER:	stream << ".RAINWATER."; break;
		case ENUM_REFRIGERATION:	stream << ".REFRIGERATION."; break;
		case ENUM_RETURN_CIRCUIT:	stream << ".RETURN_CIRCUIT."; break;
		case ENUM_SECURITY:	stream << ".SECURITY."; break;
		case ENUM_SEWAGE:	stream << ".SEWAGE."; break;
		case ENUM_SIGNAL:	stream << ".SIGNAL."; break;
		case ENUM_STORMWATER:	stream << ".STORMWATER."; break;
		case ENUM_TELEPHONE:	stream << ".TELEPHONE."; break;
		case ENUM_TV:	stream << ".TV."; break;
		case ENUM_VACUUM:	stream << ".VACUUM."; break;
		case ENUM_VENT:	stream << ".VENT."; break;
		case ENUM_VENTILATION:	stream << ".VENTILATION."; break;
		case ENUM_WASTEWATER:	stream << ".WASTEWATER."; break;
		case ENUM_WATERSUPPLY:	stream << ".WATERSUPPLY."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcDistributionSystemEnum> IFC4X3::IfcDistributionSystemEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcDistributionSystemEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcDistributionSystemEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcDistributionSystemEnum>(); }
	shared_ptr<IfcDistributionSystemEnum> type_object( new IfcDistributionSystemEnum() );
	if( std_iequal( arg, ".AIRCONDITIONING." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_AIRCONDITIONING;
	}
	else if( std_iequal( arg, ".AUDIOVISUAL." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_AUDIOVISUAL;
	}
	else if( std_iequal( arg, ".CATENARY_SYSTEM." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_CATENARY_SYSTEM;
	}
	else if( std_iequal( arg, ".CHEMICAL." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_CHEMICAL;
	}
	else if( std_iequal( arg, ".CHILLEDWATER." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_CHILLEDWATER;
	}
	else if( std_iequal( arg, ".COMMUNICATION." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_COMMUNICATION;
	}
	else if( std_iequal( arg, ".COMPRESSEDAIR." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_COMPRESSEDAIR;
	}
	else if( std_iequal( arg, ".CONDENSERWATER." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_CONDENSERWATER;
	}
	else if( std_iequal( arg, ".CONTROL." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_CONTROL;
	}
	else if( std_iequal( arg, ".CONVEYING." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_CONVEYING;
	}
	else if( std_iequal( arg, ".DATA." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_DATA;
	}
	else if( std_iequal( arg, ".DISPOSAL." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_DISPOSAL;
	}
	else if( std_iequal( arg, ".DOMESTICCOLDWATER." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_DOMESTICCOLDWATER;
	}
	else if( std_iequal( arg, ".DOMESTICHOTWATER." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_DOMESTICHOTWATER;
	}
	else if( std_iequal( arg, ".DRAINAGE." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_DRAINAGE;
	}
	else if( std_iequal( arg, ".EARTHING." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_EARTHING;
	}
	else if( std_iequal( arg, ".ELECTRICAL." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_ELECTRICAL;
	}
	else if( std_iequal( arg, ".ELECTROACOUSTIC." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_ELECTROACOUSTIC;
	}
	else if( std_iequal( arg, ".EXHAUST." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_EXHAUST;
	}
	else if( std_iequal( arg, ".FIREPROTECTION." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_FIREPROTECTION;
	}
	else if( std_iequal( arg, ".FIXEDTRANSMISSIONNETWORK." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_FIXEDTRANSMISSIONNETWORK;
	}
	else if( std_iequal( arg, ".FUEL." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_FUEL;
	}
	else if( std_iequal( arg, ".GAS." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_GAS;
	}
	else if( std_iequal( arg, ".HAZARDOUS." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_HAZARDOUS;
	}
	else if( std_iequal( arg, ".HEATING." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_HEATING;
	}
	else if( std_iequal( arg, ".LIGHTING." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_LIGHTING;
	}
	else if( std_iequal( arg, ".LIGHTNINGPROTECTION." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_LIGHTNINGPROTECTION;
	}
	else if( std_iequal( arg, ".MOBILENETWORK." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_MOBILENETWORK;
	}
	else if( std_iequal( arg, ".MONITORINGSYSTEM." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_MONITORINGSYSTEM;
	}
	else if( std_iequal( arg, ".MUNICIPALSOLIDWASTE." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_MUNICIPALSOLIDWASTE;
	}
	else if( std_iequal( arg, ".OIL." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_OIL;
	}
	else if( std_iequal( arg, ".OPERATIONAL." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_OPERATIONAL;
	}
	else if( std_iequal( arg, ".OPERATIONALTELEPHONYSYSTEM." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_OPERATIONALTELEPHONYSYSTEM;
	}
	else if( std_iequal( arg, ".OVERHEAD_CONTACTLINE_SYSTEM." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_OVERHEAD_CONTACTLINE_SYSTEM;
	}
	else if( std_iequal( arg, ".POWERGENERATION." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_POWERGENERATION;
	}
	else if( std_iequal( arg, ".RAINWATER." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_RAINWATER;
	}
	else if( std_iequal( arg, ".REFRIGERATION." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_REFRIGERATION;
	}
	else if( std_iequal( arg, ".RETURN_CIRCUIT." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_RETURN_CIRCUIT;
	}
	else if( std_iequal( arg, ".SECURITY." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_SECURITY;
	}
	else if( std_iequal( arg, ".SEWAGE." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_SEWAGE;
	}
	else if( std_iequal( arg, ".SIGNAL." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_SIGNAL;
	}
	else if( std_iequal( arg, ".STORMWATER." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_STORMWATER;
	}
	else if( std_iequal( arg, ".TELEPHONE." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_TELEPHONE;
	}
	else if( std_iequal( arg, ".TV." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_TV;
	}
	else if( std_iequal( arg, ".VACUUM." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_VACUUM;
	}
	else if( std_iequal( arg, ".VENT." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_VENT;
	}
	else if( std_iequal( arg, ".VENTILATION." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_VENTILATION;
	}
	else if( std_iequal( arg, ".WASTEWATER." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_WASTEWATER;
	}
	else if( std_iequal( arg, ".WATERSUPPLY." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_WATERSUPPLY;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcDistributionSystemEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
