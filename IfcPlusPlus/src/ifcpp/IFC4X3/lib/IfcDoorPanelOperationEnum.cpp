/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcDoorPanelOperationEnum.h"

// TYPE IfcDoorPanelOperationEnum = ENUMERATION OF	(DOUBLE_ACTING	,FIXEDPANEL	,FOLDING	,REVOLVING	,ROLLINGUP	,SLIDING	,SWINGING	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcDoorPanelOperationEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCDOORPANELOPERATIONENUM("; }
	switch( m_enum )
	{
		case ENUM_DOUBLE_ACTING:	stream << ".DOUBLE_ACTING."; break;
		case ENUM_FIXEDPANEL:	stream << ".FIXEDPANEL."; break;
		case ENUM_FOLDING:	stream << ".FOLDING."; break;
		case ENUM_REVOLVING:	stream << ".REVOLVING."; break;
		case ENUM_ROLLINGUP:	stream << ".ROLLINGUP."; break;
		case ENUM_SLIDING:	stream << ".SLIDING."; break;
		case ENUM_SWINGING:	stream << ".SWINGING."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcDoorPanelOperationEnum> IFC4X3::IfcDoorPanelOperationEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcDoorPanelOperationEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcDoorPanelOperationEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcDoorPanelOperationEnum>(); }
	shared_ptr<IfcDoorPanelOperationEnum> type_object( new IfcDoorPanelOperationEnum() );
	if( std_iequal( arg, ".DOUBLE_ACTING." ) )
	{
		type_object->m_enum = IfcDoorPanelOperationEnum::ENUM_DOUBLE_ACTING;
	}
	else if( std_iequal( arg, ".FIXEDPANEL." ) )
	{
		type_object->m_enum = IfcDoorPanelOperationEnum::ENUM_FIXEDPANEL;
	}
	else if( std_iequal( arg, ".FOLDING." ) )
	{
		type_object->m_enum = IfcDoorPanelOperationEnum::ENUM_FOLDING;
	}
	else if( std_iequal( arg, ".REVOLVING." ) )
	{
		type_object->m_enum = IfcDoorPanelOperationEnum::ENUM_REVOLVING;
	}
	else if( std_iequal( arg, ".ROLLINGUP." ) )
	{
		type_object->m_enum = IfcDoorPanelOperationEnum::ENUM_ROLLINGUP;
	}
	else if( std_iequal( arg, ".SLIDING." ) )
	{
		type_object->m_enum = IfcDoorPanelOperationEnum::ENUM_SLIDING;
	}
	else if( std_iequal( arg, ".SWINGING." ) )
	{
		type_object->m_enum = IfcDoorPanelOperationEnum::ENUM_SWINGING;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcDoorPanelOperationEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcDoorPanelOperationEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
