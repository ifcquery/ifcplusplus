/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcDoorStyleOperationEnum.h"

// TYPE IfcDoorStyleOperationEnum = ENUMERATION OF	(DOUBLE_DOOR_DOUBLE_SWING	,DOUBLE_DOOR_FOLDING	,DOUBLE_DOOR_SINGLE_SWING	,DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT	,DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT	,DOUBLE_DOOR_SLIDING	,DOUBLE_SWING_LEFT	,DOUBLE_SWING_RIGHT	,FOLDING_TO_LEFT	,FOLDING_TO_RIGHT	,REVOLVING	,ROLLINGUP	,SINGLE_SWING_LEFT	,SINGLE_SWING_RIGHT	,SLIDING_TO_LEFT	,SLIDING_TO_RIGHT	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcDoorStyleOperationEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCDOORSTYLEOPERATIONENUM("; }
	switch( m_enum )
	{
		case ENUM_DOUBLE_DOOR_DOUBLE_SWING:	stream << ".DOUBLE_DOOR_DOUBLE_SWING."; break;
		case ENUM_DOUBLE_DOOR_FOLDING:	stream << ".DOUBLE_DOOR_FOLDING."; break;
		case ENUM_DOUBLE_DOOR_SINGLE_SWING:	stream << ".DOUBLE_DOOR_SINGLE_SWING."; break;
		case ENUM_DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT:	stream << ".DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT."; break;
		case ENUM_DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT:	stream << ".DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT."; break;
		case ENUM_DOUBLE_DOOR_SLIDING:	stream << ".DOUBLE_DOOR_SLIDING."; break;
		case ENUM_DOUBLE_SWING_LEFT:	stream << ".DOUBLE_SWING_LEFT."; break;
		case ENUM_DOUBLE_SWING_RIGHT:	stream << ".DOUBLE_SWING_RIGHT."; break;
		case ENUM_FOLDING_TO_LEFT:	stream << ".FOLDING_TO_LEFT."; break;
		case ENUM_FOLDING_TO_RIGHT:	stream << ".FOLDING_TO_RIGHT."; break;
		case ENUM_REVOLVING:	stream << ".REVOLVING."; break;
		case ENUM_ROLLINGUP:	stream << ".ROLLINGUP."; break;
		case ENUM_SINGLE_SWING_LEFT:	stream << ".SINGLE_SWING_LEFT."; break;
		case ENUM_SINGLE_SWING_RIGHT:	stream << ".SINGLE_SWING_RIGHT."; break;
		case ENUM_SLIDING_TO_LEFT:	stream << ".SLIDING_TO_LEFT."; break;
		case ENUM_SLIDING_TO_RIGHT:	stream << ".SLIDING_TO_RIGHT."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcDoorStyleOperationEnum> IFC4X3::IfcDoorStyleOperationEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcDoorStyleOperationEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcDoorStyleOperationEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcDoorStyleOperationEnum>(); }
	shared_ptr<IfcDoorStyleOperationEnum> type_object( new IfcDoorStyleOperationEnum() );
	if( std_iequal( arg, ".DOUBLE_DOOR_DOUBLE_SWING." ) )
	{
		type_object->m_enum = IfcDoorStyleOperationEnum::ENUM_DOUBLE_DOOR_DOUBLE_SWING;
	}
	else if( std_iequal( arg, ".DOUBLE_DOOR_FOLDING." ) )
	{
		type_object->m_enum = IfcDoorStyleOperationEnum::ENUM_DOUBLE_DOOR_FOLDING;
	}
	else if( std_iequal( arg, ".DOUBLE_DOOR_SINGLE_SWING." ) )
	{
		type_object->m_enum = IfcDoorStyleOperationEnum::ENUM_DOUBLE_DOOR_SINGLE_SWING;
	}
	else if( std_iequal( arg, ".DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT." ) )
	{
		type_object->m_enum = IfcDoorStyleOperationEnum::ENUM_DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_LEFT;
	}
	else if( std_iequal( arg, ".DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT." ) )
	{
		type_object->m_enum = IfcDoorStyleOperationEnum::ENUM_DOUBLE_DOOR_SINGLE_SWING_OPPOSITE_RIGHT;
	}
	else if( std_iequal( arg, ".DOUBLE_DOOR_SLIDING." ) )
	{
		type_object->m_enum = IfcDoorStyleOperationEnum::ENUM_DOUBLE_DOOR_SLIDING;
	}
	else if( std_iequal( arg, ".DOUBLE_SWING_LEFT." ) )
	{
		type_object->m_enum = IfcDoorStyleOperationEnum::ENUM_DOUBLE_SWING_LEFT;
	}
	else if( std_iequal( arg, ".DOUBLE_SWING_RIGHT." ) )
	{
		type_object->m_enum = IfcDoorStyleOperationEnum::ENUM_DOUBLE_SWING_RIGHT;
	}
	else if( std_iequal( arg, ".FOLDING_TO_LEFT." ) )
	{
		type_object->m_enum = IfcDoorStyleOperationEnum::ENUM_FOLDING_TO_LEFT;
	}
	else if( std_iequal( arg, ".FOLDING_TO_RIGHT." ) )
	{
		type_object->m_enum = IfcDoorStyleOperationEnum::ENUM_FOLDING_TO_RIGHT;
	}
	else if( std_iequal( arg, ".REVOLVING." ) )
	{
		type_object->m_enum = IfcDoorStyleOperationEnum::ENUM_REVOLVING;
	}
	else if( std_iequal( arg, ".ROLLINGUP." ) )
	{
		type_object->m_enum = IfcDoorStyleOperationEnum::ENUM_ROLLINGUP;
	}
	else if( std_iequal( arg, ".SINGLE_SWING_LEFT." ) )
	{
		type_object->m_enum = IfcDoorStyleOperationEnum::ENUM_SINGLE_SWING_LEFT;
	}
	else if( std_iequal( arg, ".SINGLE_SWING_RIGHT." ) )
	{
		type_object->m_enum = IfcDoorStyleOperationEnum::ENUM_SINGLE_SWING_RIGHT;
	}
	else if( std_iequal( arg, ".SLIDING_TO_LEFT." ) )
	{
		type_object->m_enum = IfcDoorStyleOperationEnum::ENUM_SLIDING_TO_LEFT;
	}
	else if( std_iequal( arg, ".SLIDING_TO_RIGHT." ) )
	{
		type_object->m_enum = IfcDoorStyleOperationEnum::ENUM_SLIDING_TO_RIGHT;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcDoorStyleOperationEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcDoorStyleOperationEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
