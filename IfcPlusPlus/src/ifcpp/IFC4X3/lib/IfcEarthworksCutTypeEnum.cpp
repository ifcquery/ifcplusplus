/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcEarthworksCutTypeEnum.h"

// TYPE IfcEarthworksCutTypeEnum = ENUMERATION OF	(BASE_EXCAVATION	,CUT	,DREDGING	,EXCAVATION	,OVEREXCAVATION	,PAVEMENTMILLING	,STEPEXCAVATION	,TOPSOILREMOVAL	,TRENCH	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcEarthworksCutTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCEARTHWORKSCUTTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_BASE_EXCAVATION:	stream << ".BASE_EXCAVATION."; break;
		case ENUM_CUT:	stream << ".CUT."; break;
		case ENUM_DREDGING:	stream << ".DREDGING."; break;
		case ENUM_EXCAVATION:	stream << ".EXCAVATION."; break;
		case ENUM_OVEREXCAVATION:	stream << ".OVEREXCAVATION."; break;
		case ENUM_PAVEMENTMILLING:	stream << ".PAVEMENTMILLING."; break;
		case ENUM_STEPEXCAVATION:	stream << ".STEPEXCAVATION."; break;
		case ENUM_TOPSOILREMOVAL:	stream << ".TOPSOILREMOVAL."; break;
		case ENUM_TRENCH:	stream << ".TRENCH."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcEarthworksCutTypeEnum> IFC4X3::IfcEarthworksCutTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcEarthworksCutTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcEarthworksCutTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcEarthworksCutTypeEnum>(); }
	shared_ptr<IfcEarthworksCutTypeEnum> type_object( new IfcEarthworksCutTypeEnum() );
	if( std_iequal( arg, ".BASE_EXCAVATION." ) )
	{
		type_object->m_enum = IfcEarthworksCutTypeEnum::ENUM_BASE_EXCAVATION;
	}
	else if( std_iequal( arg, ".CUT." ) )
	{
		type_object->m_enum = IfcEarthworksCutTypeEnum::ENUM_CUT;
	}
	else if( std_iequal( arg, ".DREDGING." ) )
	{
		type_object->m_enum = IfcEarthworksCutTypeEnum::ENUM_DREDGING;
	}
	else if( std_iequal( arg, ".EXCAVATION." ) )
	{
		type_object->m_enum = IfcEarthworksCutTypeEnum::ENUM_EXCAVATION;
	}
	else if( std_iequal( arg, ".OVEREXCAVATION." ) )
	{
		type_object->m_enum = IfcEarthworksCutTypeEnum::ENUM_OVEREXCAVATION;
	}
	else if( std_iequal( arg, ".PAVEMENTMILLING." ) )
	{
		type_object->m_enum = IfcEarthworksCutTypeEnum::ENUM_PAVEMENTMILLING;
	}
	else if( std_iequal( arg, ".STEPEXCAVATION." ) )
	{
		type_object->m_enum = IfcEarthworksCutTypeEnum::ENUM_STEPEXCAVATION;
	}
	else if( std_iequal( arg, ".TOPSOILREMOVAL." ) )
	{
		type_object->m_enum = IfcEarthworksCutTypeEnum::ENUM_TOPSOILREMOVAL;
	}
	else if( std_iequal( arg, ".TRENCH." ) )
	{
		type_object->m_enum = IfcEarthworksCutTypeEnum::ENUM_TRENCH;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcEarthworksCutTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcEarthworksCutTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
