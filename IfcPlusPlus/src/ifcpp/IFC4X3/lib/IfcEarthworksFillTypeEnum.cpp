/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcEarthworksFillTypeEnum.h"

// TYPE IfcEarthworksFillTypeEnum = ENUMERATION OF	(BACKFILL	,COUNTERWEIGHT	,EMBANKMENT	,SLOPEFILL	,SUBGRADE	,SUBGRADEBED	,TRANSITIONSECTION	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcEarthworksFillTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCEARTHWORKSFILLTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_BACKFILL:	stream << ".BACKFILL."; break;
		case ENUM_COUNTERWEIGHT:	stream << ".COUNTERWEIGHT."; break;
		case ENUM_EMBANKMENT:	stream << ".EMBANKMENT."; break;
		case ENUM_SLOPEFILL:	stream << ".SLOPEFILL."; break;
		case ENUM_SUBGRADE:	stream << ".SUBGRADE."; break;
		case ENUM_SUBGRADEBED:	stream << ".SUBGRADEBED."; break;
		case ENUM_TRANSITIONSECTION:	stream << ".TRANSITIONSECTION."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcEarthworksFillTypeEnum> IFC4X3::IfcEarthworksFillTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcEarthworksFillTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcEarthworksFillTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcEarthworksFillTypeEnum>(); }
	shared_ptr<IfcEarthworksFillTypeEnum> type_object( new IfcEarthworksFillTypeEnum() );
	if( std_iequal( arg, ".BACKFILL." ) )
	{
		type_object->m_enum = IfcEarthworksFillTypeEnum::ENUM_BACKFILL;
	}
	else if( std_iequal( arg, ".COUNTERWEIGHT." ) )
	{
		type_object->m_enum = IfcEarthworksFillTypeEnum::ENUM_COUNTERWEIGHT;
	}
	else if( std_iequal( arg, ".EMBANKMENT." ) )
	{
		type_object->m_enum = IfcEarthworksFillTypeEnum::ENUM_EMBANKMENT;
	}
	else if( std_iequal( arg, ".SLOPEFILL." ) )
	{
		type_object->m_enum = IfcEarthworksFillTypeEnum::ENUM_SLOPEFILL;
	}
	else if( std_iequal( arg, ".SUBGRADE." ) )
	{
		type_object->m_enum = IfcEarthworksFillTypeEnum::ENUM_SUBGRADE;
	}
	else if( std_iequal( arg, ".SUBGRADEBED." ) )
	{
		type_object->m_enum = IfcEarthworksFillTypeEnum::ENUM_SUBGRADEBED;
	}
	else if( std_iequal( arg, ".TRANSITIONSECTION." ) )
	{
		type_object->m_enum = IfcEarthworksFillTypeEnum::ENUM_TRANSITIONSECTION;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcEarthworksFillTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcEarthworksFillTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
