/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcEvaporativeCoolerTypeEnum.h"

// TYPE IfcEvaporativeCoolerTypeEnum = ENUMERATION OF	(DIRECTEVAPORATIVEAIRWASHER	,DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER	,DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER	,DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER	,DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER	,INDIRECTDIRECTCOMBINATION	,INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER	,INDIRECTEVAPORATIVEPACKAGEAIRCOOLER	,INDIRECTEVAPORATIVEWETCOIL	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcEvaporativeCoolerTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCEVAPORATIVECOOLERTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_DIRECTEVAPORATIVEAIRWASHER:	stream << ".DIRECTEVAPORATIVEAIRWASHER."; break;
		case ENUM_DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER:	stream << ".DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER."; break;
		case ENUM_DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER:	stream << ".DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER."; break;
		case ENUM_DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER:	stream << ".DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER."; break;
		case ENUM_DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER:	stream << ".DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER."; break;
		case ENUM_INDIRECTDIRECTCOMBINATION:	stream << ".INDIRECTDIRECTCOMBINATION."; break;
		case ENUM_INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER:	stream << ".INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER."; break;
		case ENUM_INDIRECTEVAPORATIVEPACKAGEAIRCOOLER:	stream << ".INDIRECTEVAPORATIVEPACKAGEAIRCOOLER."; break;
		case ENUM_INDIRECTEVAPORATIVEWETCOIL:	stream << ".INDIRECTEVAPORATIVEWETCOIL."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcEvaporativeCoolerTypeEnum> IFC4X3::IfcEvaporativeCoolerTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcEvaporativeCoolerTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcEvaporativeCoolerTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcEvaporativeCoolerTypeEnum>(); }
	shared_ptr<IfcEvaporativeCoolerTypeEnum> type_object( new IfcEvaporativeCoolerTypeEnum() );
	if( std_iequal( arg, ".DIRECTEVAPORATIVEAIRWASHER." ) )
	{
		type_object->m_enum = IfcEvaporativeCoolerTypeEnum::ENUM_DIRECTEVAPORATIVEAIRWASHER;
	}
	else if( std_iequal( arg, ".DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER." ) )
	{
		type_object->m_enum = IfcEvaporativeCoolerTypeEnum::ENUM_DIRECTEVAPORATIVEPACKAGEDROTARYAIRCOOLER;
	}
	else if( std_iequal( arg, ".DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER." ) )
	{
		type_object->m_enum = IfcEvaporativeCoolerTypeEnum::ENUM_DIRECTEVAPORATIVERANDOMMEDIAAIRCOOLER;
	}
	else if( std_iequal( arg, ".DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER." ) )
	{
		type_object->m_enum = IfcEvaporativeCoolerTypeEnum::ENUM_DIRECTEVAPORATIVERIGIDMEDIAAIRCOOLER;
	}
	else if( std_iequal( arg, ".DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER." ) )
	{
		type_object->m_enum = IfcEvaporativeCoolerTypeEnum::ENUM_DIRECTEVAPORATIVESLINGERSPACKAGEDAIRCOOLER;
	}
	else if( std_iequal( arg, ".INDIRECTDIRECTCOMBINATION." ) )
	{
		type_object->m_enum = IfcEvaporativeCoolerTypeEnum::ENUM_INDIRECTDIRECTCOMBINATION;
	}
	else if( std_iequal( arg, ".INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER." ) )
	{
		type_object->m_enum = IfcEvaporativeCoolerTypeEnum::ENUM_INDIRECTEVAPORATIVECOOLINGTOWERORCOILCOOLER;
	}
	else if( std_iequal( arg, ".INDIRECTEVAPORATIVEPACKAGEAIRCOOLER." ) )
	{
		type_object->m_enum = IfcEvaporativeCoolerTypeEnum::ENUM_INDIRECTEVAPORATIVEPACKAGEAIRCOOLER;
	}
	else if( std_iequal( arg, ".INDIRECTEVAPORATIVEWETCOIL." ) )
	{
		type_object->m_enum = IfcEvaporativeCoolerTypeEnum::ENUM_INDIRECTEVAPORATIVEWETCOIL;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcEvaporativeCoolerTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcEvaporativeCoolerTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
