/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcEvaporatorTypeEnum.h"

// TYPE IfcEvaporatorTypeEnum = ENUMERATION OF	(DIRECTEXPANSION	,DIRECTEXPANSIONBRAZEDPLATE	,DIRECTEXPANSIONSHELLANDTUBE	,DIRECTEXPANSIONTUBEINTUBE	,FLOODEDSHELLANDTUBE	,SHELLANDCOIL	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcEvaporatorTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCEVAPORATORTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_DIRECTEXPANSION:	stream << ".DIRECTEXPANSION."; break;
		case ENUM_DIRECTEXPANSIONBRAZEDPLATE:	stream << ".DIRECTEXPANSIONBRAZEDPLATE."; break;
		case ENUM_DIRECTEXPANSIONSHELLANDTUBE:	stream << ".DIRECTEXPANSIONSHELLANDTUBE."; break;
		case ENUM_DIRECTEXPANSIONTUBEINTUBE:	stream << ".DIRECTEXPANSIONTUBEINTUBE."; break;
		case ENUM_FLOODEDSHELLANDTUBE:	stream << ".FLOODEDSHELLANDTUBE."; break;
		case ENUM_SHELLANDCOIL:	stream << ".SHELLANDCOIL."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcEvaporatorTypeEnum> IFC4X3::IfcEvaporatorTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcEvaporatorTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcEvaporatorTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcEvaporatorTypeEnum>(); }
	shared_ptr<IfcEvaporatorTypeEnum> type_object( new IfcEvaporatorTypeEnum() );
	if( std_iequal( arg, ".DIRECTEXPANSION." ) )
	{
		type_object->m_enum = IfcEvaporatorTypeEnum::ENUM_DIRECTEXPANSION;
	}
	else if( std_iequal( arg, ".DIRECTEXPANSIONBRAZEDPLATE." ) )
	{
		type_object->m_enum = IfcEvaporatorTypeEnum::ENUM_DIRECTEXPANSIONBRAZEDPLATE;
	}
	else if( std_iequal( arg, ".DIRECTEXPANSIONSHELLANDTUBE." ) )
	{
		type_object->m_enum = IfcEvaporatorTypeEnum::ENUM_DIRECTEXPANSIONSHELLANDTUBE;
	}
	else if( std_iequal( arg, ".DIRECTEXPANSIONTUBEINTUBE." ) )
	{
		type_object->m_enum = IfcEvaporatorTypeEnum::ENUM_DIRECTEXPANSIONTUBEINTUBE;
	}
	else if( std_iequal( arg, ".FLOODEDSHELLANDTUBE." ) )
	{
		type_object->m_enum = IfcEvaporatorTypeEnum::ENUM_FLOODEDSHELLANDTUBE;
	}
	else if( std_iequal( arg, ".SHELLANDCOIL." ) )
	{
		type_object->m_enum = IfcEvaporatorTypeEnum::ENUM_SHELLANDCOIL;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcEvaporatorTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcEvaporatorTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
