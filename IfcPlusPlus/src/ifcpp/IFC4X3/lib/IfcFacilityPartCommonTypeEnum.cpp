/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcFacilityPartCommonTypeEnum.h"

// TYPE IfcFacilityPartCommonTypeEnum = ENUMERATION OF	(ABOVEGROUND	,BELOWGROUND	,JUNCTION	,LEVELCROSSING	,SEGMENT	,SUBSTRUCTURE	,SUPERSTRUCTURE	,TERMINAL	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcFacilityPartCommonTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCFACILITYPARTCOMMONTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_ABOVEGROUND:	stream << ".ABOVEGROUND."; break;
		case ENUM_BELOWGROUND:	stream << ".BELOWGROUND."; break;
		case ENUM_JUNCTION:	stream << ".JUNCTION."; break;
		case ENUM_LEVELCROSSING:	stream << ".LEVELCROSSING."; break;
		case ENUM_SEGMENT:	stream << ".SEGMENT."; break;
		case ENUM_SUBSTRUCTURE:	stream << ".SUBSTRUCTURE."; break;
		case ENUM_SUPERSTRUCTURE:	stream << ".SUPERSTRUCTURE."; break;
		case ENUM_TERMINAL:	stream << ".TERMINAL."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcFacilityPartCommonTypeEnum> IFC4X3::IfcFacilityPartCommonTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcFacilityPartCommonTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcFacilityPartCommonTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcFacilityPartCommonTypeEnum>(); }
	shared_ptr<IfcFacilityPartCommonTypeEnum> type_object( new IfcFacilityPartCommonTypeEnum() );
	if( std_iequal( arg, ".ABOVEGROUND." ) )
	{
		type_object->m_enum = IfcFacilityPartCommonTypeEnum::ENUM_ABOVEGROUND;
	}
	else if( std_iequal( arg, ".BELOWGROUND." ) )
	{
		type_object->m_enum = IfcFacilityPartCommonTypeEnum::ENUM_BELOWGROUND;
	}
	else if( std_iequal( arg, ".JUNCTION." ) )
	{
		type_object->m_enum = IfcFacilityPartCommonTypeEnum::ENUM_JUNCTION;
	}
	else if( std_iequal( arg, ".LEVELCROSSING." ) )
	{
		type_object->m_enum = IfcFacilityPartCommonTypeEnum::ENUM_LEVELCROSSING;
	}
	else if( std_iequal( arg, ".SEGMENT." ) )
	{
		type_object->m_enum = IfcFacilityPartCommonTypeEnum::ENUM_SEGMENT;
	}
	else if( std_iequal( arg, ".SUBSTRUCTURE." ) )
	{
		type_object->m_enum = IfcFacilityPartCommonTypeEnum::ENUM_SUBSTRUCTURE;
	}
	else if( std_iequal( arg, ".SUPERSTRUCTURE." ) )
	{
		type_object->m_enum = IfcFacilityPartCommonTypeEnum::ENUM_SUPERSTRUCTURE;
	}
	else if( std_iequal( arg, ".TERMINAL." ) )
	{
		type_object->m_enum = IfcFacilityPartCommonTypeEnum::ENUM_TERMINAL;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcFacilityPartCommonTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcFacilityPartCommonTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
