/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcFanTypeEnum.h"

// TYPE IfcFanTypeEnum = ENUMERATION OF	(CENTRIFUGALAIRFOIL	,CENTRIFUGALBACKWARDINCLINEDCURVED	,CENTRIFUGALFORWARDCURVED	,CENTRIFUGALRADIAL	,PROPELLORAXIAL	,TUBEAXIAL	,VANEAXIAL	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcFanTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCFANTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_CENTRIFUGALAIRFOIL:	stream << ".CENTRIFUGALAIRFOIL."; break;
		case ENUM_CENTRIFUGALBACKWARDINCLINEDCURVED:	stream << ".CENTRIFUGALBACKWARDINCLINEDCURVED."; break;
		case ENUM_CENTRIFUGALFORWARDCURVED:	stream << ".CENTRIFUGALFORWARDCURVED."; break;
		case ENUM_CENTRIFUGALRADIAL:	stream << ".CENTRIFUGALRADIAL."; break;
		case ENUM_PROPELLORAXIAL:	stream << ".PROPELLORAXIAL."; break;
		case ENUM_TUBEAXIAL:	stream << ".TUBEAXIAL."; break;
		case ENUM_VANEAXIAL:	stream << ".VANEAXIAL."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcFanTypeEnum> IFC4X3::IfcFanTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcFanTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcFanTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcFanTypeEnum>(); }
	shared_ptr<IfcFanTypeEnum> type_object( new IfcFanTypeEnum() );
	if( std_iequal( arg, ".CENTRIFUGALAIRFOIL." ) )
	{
		type_object->m_enum = IfcFanTypeEnum::ENUM_CENTRIFUGALAIRFOIL;
	}
	else if( std_iequal( arg, ".CENTRIFUGALBACKWARDINCLINEDCURVED." ) )
	{
		type_object->m_enum = IfcFanTypeEnum::ENUM_CENTRIFUGALBACKWARDINCLINEDCURVED;
	}
	else if( std_iequal( arg, ".CENTRIFUGALFORWARDCURVED." ) )
	{
		type_object->m_enum = IfcFanTypeEnum::ENUM_CENTRIFUGALFORWARDCURVED;
	}
	else if( std_iequal( arg, ".CENTRIFUGALRADIAL." ) )
	{
		type_object->m_enum = IfcFanTypeEnum::ENUM_CENTRIFUGALRADIAL;
	}
	else if( std_iequal( arg, ".PROPELLORAXIAL." ) )
	{
		type_object->m_enum = IfcFanTypeEnum::ENUM_PROPELLORAXIAL;
	}
	else if( std_iequal( arg, ".TUBEAXIAL." ) )
	{
		type_object->m_enum = IfcFanTypeEnum::ENUM_TUBEAXIAL;
	}
	else if( std_iequal( arg, ".VANEAXIAL." ) )
	{
		type_object->m_enum = IfcFanTypeEnum::ENUM_VANEAXIAL;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcFanTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcFanTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
