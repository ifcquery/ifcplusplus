/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcFurnitureTypeEnum.h"

// TYPE IfcFurnitureTypeEnum = ENUMERATION OF	(BED	,CHAIR	,DESK	,FILECABINET	,SHELF	,SOFA	,TABLE	,TECHNICALCABINET	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcFurnitureTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCFURNITURETYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_BED:	stream << ".BED."; break;
		case ENUM_CHAIR:	stream << ".CHAIR."; break;
		case ENUM_DESK:	stream << ".DESK."; break;
		case ENUM_FILECABINET:	stream << ".FILECABINET."; break;
		case ENUM_SHELF:	stream << ".SHELF."; break;
		case ENUM_SOFA:	stream << ".SOFA."; break;
		case ENUM_TABLE:	stream << ".TABLE."; break;
		case ENUM_TECHNICALCABINET:	stream << ".TECHNICALCABINET."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcFurnitureTypeEnum> IFC4X3::IfcFurnitureTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcFurnitureTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcFurnitureTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcFurnitureTypeEnum>(); }
	shared_ptr<IfcFurnitureTypeEnum> type_object( new IfcFurnitureTypeEnum() );
	if( std_iequal( arg, ".BED." ) )
	{
		type_object->m_enum = IfcFurnitureTypeEnum::ENUM_BED;
	}
	else if( std_iequal( arg, ".CHAIR." ) )
	{
		type_object->m_enum = IfcFurnitureTypeEnum::ENUM_CHAIR;
	}
	else if( std_iequal( arg, ".DESK." ) )
	{
		type_object->m_enum = IfcFurnitureTypeEnum::ENUM_DESK;
	}
	else if( std_iequal( arg, ".FILECABINET." ) )
	{
		type_object->m_enum = IfcFurnitureTypeEnum::ENUM_FILECABINET;
	}
	else if( std_iequal( arg, ".SHELF." ) )
	{
		type_object->m_enum = IfcFurnitureTypeEnum::ENUM_SHELF;
	}
	else if( std_iequal( arg, ".SOFA." ) )
	{
		type_object->m_enum = IfcFurnitureTypeEnum::ENUM_SOFA;
	}
	else if( std_iequal( arg, ".TABLE." ) )
	{
		type_object->m_enum = IfcFurnitureTypeEnum::ENUM_TABLE;
	}
	else if( std_iequal( arg, ".TECHNICALCABINET." ) )
	{
		type_object->m_enum = IfcFurnitureTypeEnum::ENUM_TECHNICALCABINET;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcFurnitureTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcFurnitureTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
