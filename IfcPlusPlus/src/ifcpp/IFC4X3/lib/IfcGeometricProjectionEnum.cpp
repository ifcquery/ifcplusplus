/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcGeometricProjectionEnum.h"

// TYPE IfcGeometricProjectionEnum = ENUMERATION OF	(ELEVATION_VIEW	,GRAPH_VIEW	,MODEL_VIEW	,PLAN_VIEW	,REFLECTED_PLAN_VIEW	,SECTION_VIEW	,SKETCH_VIEW	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcGeometricProjectionEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCGEOMETRICPROJECTIONENUM("; }
	switch( m_enum )
	{
		case ENUM_ELEVATION_VIEW:	stream << ".ELEVATION_VIEW."; break;
		case ENUM_GRAPH_VIEW:	stream << ".GRAPH_VIEW."; break;
		case ENUM_MODEL_VIEW:	stream << ".MODEL_VIEW."; break;
		case ENUM_PLAN_VIEW:	stream << ".PLAN_VIEW."; break;
		case ENUM_REFLECTED_PLAN_VIEW:	stream << ".REFLECTED_PLAN_VIEW."; break;
		case ENUM_SECTION_VIEW:	stream << ".SECTION_VIEW."; break;
		case ENUM_SKETCH_VIEW:	stream << ".SKETCH_VIEW."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcGeometricProjectionEnum> IFC4X3::IfcGeometricProjectionEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcGeometricProjectionEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcGeometricProjectionEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcGeometricProjectionEnum>(); }
	shared_ptr<IfcGeometricProjectionEnum> type_object( new IfcGeometricProjectionEnum() );
	if( std_iequal( arg, ".ELEVATION_VIEW." ) )
	{
		type_object->m_enum = IfcGeometricProjectionEnum::ENUM_ELEVATION_VIEW;
	}
	else if( std_iequal( arg, ".GRAPH_VIEW." ) )
	{
		type_object->m_enum = IfcGeometricProjectionEnum::ENUM_GRAPH_VIEW;
	}
	else if( std_iequal( arg, ".MODEL_VIEW." ) )
	{
		type_object->m_enum = IfcGeometricProjectionEnum::ENUM_MODEL_VIEW;
	}
	else if( std_iequal( arg, ".PLAN_VIEW." ) )
	{
		type_object->m_enum = IfcGeometricProjectionEnum::ENUM_PLAN_VIEW;
	}
	else if( std_iequal( arg, ".REFLECTED_PLAN_VIEW." ) )
	{
		type_object->m_enum = IfcGeometricProjectionEnum::ENUM_REFLECTED_PLAN_VIEW;
	}
	else if( std_iequal( arg, ".SECTION_VIEW." ) )
	{
		type_object->m_enum = IfcGeometricProjectionEnum::ENUM_SECTION_VIEW;
	}
	else if( std_iequal( arg, ".SKETCH_VIEW." ) )
	{
		type_object->m_enum = IfcGeometricProjectionEnum::ENUM_SKETCH_VIEW;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcGeometricProjectionEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcGeometricProjectionEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
