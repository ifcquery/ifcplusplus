/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcBoolean.h"
#include "ifcpp/IFC4X3/include/IfcCurve.h"
#include "ifcpp/IFC4X3/include/IfcGrid.h"
#include "ifcpp/IFC4X3/include/IfcGridAxis.h"
#include "ifcpp/IFC4X3/include/IfcLabel.h"
#include "ifcpp/IFC4X3/include/IfcVirtualGridIntersection.h"

// ENTITY IfcGridAxis 
IFC4X3::IfcGridAxis::IfcGridAxis( int tag ) { m_tag = tag; }
void IFC4X3::IfcGridAxis::getStepLine( std::stringstream& stream, size_t precision ) const
{
	stream << "#" << m_tag << "=IFCGRIDAXIS" << "(";
	if( m_AxisTag ) { m_AxisTag->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_AxisCurve ) { stream << "#" << m_AxisCurve->m_tag; } else { stream << "$"; }
	stream << ",";
	if( m_SameSense ) { m_SameSense->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcGridAxis::getStepParameter( std::stringstream& stream, bool /*is_select_type*/, size_t /*precision*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcGridAxis::readStepArguments( const std::vector<std::string>& args, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	const size_t num_args = args.size();
	if( num_args > 0 ){m_AxisTag = IfcLabel::createObjectFromSTEP( args[0], map, errorStream, entityIdNotFound );}
	if( num_args > 1 ){readEntityReference( args[1], m_AxisCurve, map, errorStream, entityIdNotFound );}
	if( num_args > 2 ){m_SameSense = IfcBoolean::createObjectFromSTEP( args[2], map, errorStream, entityIdNotFound );}
	if( num_args != 3 ){ errorStream << "Wrong parameter count for entity IfcGridAxis, expecting 3, having " << num_args << ". Entity ID: " << m_tag << std::endl; }
}
void IFC4X3::IfcGridAxis::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	vec_attributes.emplace_back( std::make_pair( "AxisTag", m_AxisTag ) );
	vec_attributes.emplace_back( std::make_pair( "AxisCurve", m_AxisCurve ) );
	vec_attributes.emplace_back( std::make_pair( "SameSense", m_SameSense ) );
}
void IFC4X3::IfcGridAxis::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	shared_ptr<AttributeObjectVector> PartOfW_inverse_vec_obj( new AttributeObjectVector() );
	for( size_t i=0; i<m_PartOfW_inverse.size(); ++i )
	{
		if( !m_PartOfW_inverse[i].expired() )
		{
			PartOfW_inverse_vec_obj->m_vec.emplace_back( shared_ptr<IfcGrid>( m_PartOfW_inverse[i] ) );
		}
	}
	vec_attributes_inverse.emplace_back( std::make_pair( "PartOfW_inverse", PartOfW_inverse_vec_obj ) );
	shared_ptr<AttributeObjectVector> PartOfV_inverse_vec_obj( new AttributeObjectVector() );
	for( size_t i=0; i<m_PartOfV_inverse.size(); ++i )
	{
		if( !m_PartOfV_inverse[i].expired() )
		{
			PartOfV_inverse_vec_obj->m_vec.emplace_back( shared_ptr<IfcGrid>( m_PartOfV_inverse[i] ) );
		}
	}
	vec_attributes_inverse.emplace_back( std::make_pair( "PartOfV_inverse", PartOfV_inverse_vec_obj ) );
	shared_ptr<AttributeObjectVector> PartOfU_inverse_vec_obj( new AttributeObjectVector() );
	for( size_t i=0; i<m_PartOfU_inverse.size(); ++i )
	{
		if( !m_PartOfU_inverse[i].expired() )
		{
			PartOfU_inverse_vec_obj->m_vec.emplace_back( shared_ptr<IfcGrid>( m_PartOfU_inverse[i] ) );
		}
	}
	vec_attributes_inverse.emplace_back( std::make_pair( "PartOfU_inverse", PartOfU_inverse_vec_obj ) );
	shared_ptr<AttributeObjectVector> HasIntersections_inverse_vec_obj( new AttributeObjectVector() );
	for( size_t i=0; i<m_HasIntersections_inverse.size(); ++i )
	{
		if( !m_HasIntersections_inverse[i].expired() )
		{
			HasIntersections_inverse_vec_obj->m_vec.emplace_back( shared_ptr<IfcVirtualGridIntersection>( m_HasIntersections_inverse[i] ) );
		}
	}
	vec_attributes_inverse.emplace_back( std::make_pair( "HasIntersections_inverse", HasIntersections_inverse_vec_obj ) );
}
void IFC4X3::IfcGridAxis::setInverseCounterparts( shared_ptr<BuildingEntity> )
{
}
void IFC4X3::IfcGridAxis::unlinkFromInverseCounterparts()
{
}
