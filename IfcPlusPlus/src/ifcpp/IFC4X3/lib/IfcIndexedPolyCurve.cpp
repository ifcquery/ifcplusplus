/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcBoolean.h"
#include "ifcpp/IFC4X3/include/IfcCartesianPointList.h"
#include "ifcpp/IFC4X3/include/IfcIndexedPolyCurve.h"
#include "ifcpp/IFC4X3/include/IfcPresentationLayerAssignment.h"
#include "ifcpp/IFC4X3/include/IfcSegmentIndexSelect.h"
#include "ifcpp/IFC4X3/include/IfcStyledItem.h"

// ENTITY IfcIndexedPolyCurve 
IFC4X3::IfcIndexedPolyCurve::IfcIndexedPolyCurve( int tag ) { m_tag = tag; }
void IFC4X3::IfcIndexedPolyCurve::getStepLine( std::stringstream& stream, size_t precision ) const
{
	stream << "#" << m_tag << "=IFCINDEXEDPOLYCURVE" << "(";
	if( m_Points ) { stream << "#" << m_Points->m_tag; } else { stream << "$"; }
	stream << ",";
	if( m_Segments.size() > 0 )
	{
		stream << "(";
		for( size_t ii = 0; ii < m_Segments.size(); ++ii )
		{
			if( ii > 0 )
			{
				stream << ",";
			}
			const shared_ptr<IfcSegmentIndexSelect>& type_object = m_Segments[ii];
			if( type_object )
			{
				type_object->getStepParameter( stream, true, precision );
			}
			else
			{
				stream << "$";
			}
		}
		stream << ")";
	}
	else { stream << "$"; }
	stream << ",";
	if( m_SelfIntersect ) { m_SelfIntersect->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcIndexedPolyCurve::getStepParameter( std::stringstream& stream, bool /*is_select_type*/, size_t /*precision*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcIndexedPolyCurve::readStepArguments( const std::vector<std::string>& args, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	const size_t num_args = args.size();
	if( num_args > 0 ){readEntityReference( args[0], m_Points, map, errorStream, entityIdNotFound );}
	if( num_args > 1 ){readSelectList( args[1], m_Segments, map, errorStream, entityIdNotFound );}
	if( num_args > 2 ){m_SelfIntersect = IfcBoolean::createObjectFromSTEP( args[2], map, errorStream, entityIdNotFound );}
	if( num_args != 3 ){ errorStream << "Wrong parameter count for entity IfcIndexedPolyCurve, expecting 3, having " << num_args << ". Entity ID: " << m_tag << std::endl; }
}
void IFC4X3::IfcIndexedPolyCurve::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IFC4X3::IfcBoundedCurve::getAttributes( vec_attributes );
	vec_attributes.emplace_back( std::make_pair( "Points", m_Points ) );
	shared_ptr<AttributeObjectVector> Segments_vec_object( new AttributeObjectVector() );
	std::copy( m_Segments.begin(), m_Segments.end(), std::back_inserter( Segments_vec_object->m_vec ) );
	vec_attributes.emplace_back( std::make_pair( "Segments", Segments_vec_object ) );
	vec_attributes.emplace_back( std::make_pair( "SelfIntersect", m_SelfIntersect ) );
}
void IFC4X3::IfcIndexedPolyCurve::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IFC4X3::IfcBoundedCurve::getAttributesInverse( vec_attributes_inverse );
}
void IFC4X3::IfcIndexedPolyCurve::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcBoundedCurve::setInverseCounterparts( ptr_self_entity );
}
void IFC4X3::IfcIndexedPolyCurve::unlinkFromInverseCounterparts()
{
	IfcBoundedCurve::unlinkFromInverseCounterparts();
}
