/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcIndexedTextureMap.h"
#include "ifcpp/IFC4X3/include/IfcSurfaceTexture.h"
#include "ifcpp/IFC4X3/include/IfcTessellatedFaceSet.h"
#include "ifcpp/IFC4X3/include/IfcTextureVertexList.h"

// ENTITY IfcIndexedTextureMap 
IFC4X3::IfcIndexedTextureMap::IfcIndexedTextureMap( int tag ) { m_tag = tag; }
void IFC4X3::IfcIndexedTextureMap::getStepLine( std::stringstream& stream, size_t precision ) const
{
	stream << "#" << m_tag << "=IFCINDEXEDTEXTUREMAP" << "(";
	writeEntityList( stream, m_Maps );
	stream << ",";
	if( m_MappedTo ) { stream << "#" << m_MappedTo->m_tag; } else { stream << "$"; }
	stream << ",";
	if( m_TexCoords ) { stream << "#" << m_TexCoords->m_tag; } else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcIndexedTextureMap::getStepParameter( std::stringstream& stream, bool /*is_select_type*/, size_t /*precision*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcIndexedTextureMap::readStepArguments( const std::vector<std::string>& args, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	const size_t num_args = args.size();
	if( num_args > 0 ){readEntityReferenceList( args[0], m_Maps, map, errorStream, entityIdNotFound );}
	if( num_args > 1 ){readEntityReference( args[1], m_MappedTo, map, errorStream, entityIdNotFound );}
	if( num_args > 2 ){readEntityReference( args[2], m_TexCoords, map, errorStream, entityIdNotFound );}
	if( num_args != 3 ){ errorStream << "Wrong parameter count for entity IfcIndexedTextureMap, expecting 3, having " << num_args << ". Entity ID: " << m_tag << std::endl; }
}
void IFC4X3::IfcIndexedTextureMap::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IFC4X3::IfcTextureCoordinate::getAttributes( vec_attributes );
	vec_attributes.emplace_back( std::make_pair( "MappedTo", m_MappedTo ) );
	vec_attributes.emplace_back( std::make_pair( "TexCoords", m_TexCoords ) );
}
void IFC4X3::IfcIndexedTextureMap::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IFC4X3::IfcTextureCoordinate::getAttributesInverse( vec_attributes_inverse );
}
void IFC4X3::IfcIndexedTextureMap::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcTextureCoordinate::setInverseCounterparts( ptr_self_entity );
	shared_ptr<IfcIndexedTextureMap> ptr_self = dynamic_pointer_cast<IfcIndexedTextureMap>( ptr_self_entity );
	if( !ptr_self ) { throw BuildingException( "IfcIndexedTextureMap::setInverseCounterparts: type mismatch" ); }
	if( m_MappedTo )
	{
		m_MappedTo->m_HasTextures_inverse.emplace_back( ptr_self );
	}
}
void IFC4X3::IfcIndexedTextureMap::unlinkFromInverseCounterparts()
{
	IfcTextureCoordinate::unlinkFromInverseCounterparts();
	if( m_MappedTo )
	{
		std::vector<weak_ptr<IfcIndexedTextureMap> >& HasTextures_inverse = m_MappedTo->m_HasTextures_inverse;
		for( auto it_HasTextures_inverse = HasTextures_inverse.begin(); it_HasTextures_inverse != HasTextures_inverse.end(); )
		{
			weak_ptr<IfcIndexedTextureMap> self_candidate_weak = *it_HasTextures_inverse;
			if( self_candidate_weak.expired() )
			{
				++it_HasTextures_inverse;
				continue;
			}
			shared_ptr<IfcIndexedTextureMap> self_candidate( *it_HasTextures_inverse );
			if( self_candidate.get() == this )
			{
				it_HasTextures_inverse= HasTextures_inverse.erase( it_HasTextures_inverse );
			}
			else
			{
				++it_HasTextures_inverse;
			}
		}
	}
}
