/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcExternalReferenceRelationship.h"
#include "ifcpp/IFC4X3/include/IfcIdentifier.h"
#include "ifcpp/IFC4X3/include/IfcLabel.h"
#include "ifcpp/IFC4X3/include/IfcLanguageId.h"
#include "ifcpp/IFC4X3/include/IfcLibraryInformation.h"
#include "ifcpp/IFC4X3/include/IfcLibraryReference.h"
#include "ifcpp/IFC4X3/include/IfcRelAssociatesLibrary.h"
#include "ifcpp/IFC4X3/include/IfcText.h"
#include "ifcpp/IFC4X3/include/IfcURIReference.h"

// ENTITY IfcLibraryReference 
IFC4X3::IfcLibraryReference::IfcLibraryReference( int tag ) { m_tag = tag; }
void IFC4X3::IfcLibraryReference::getStepLine( std::stringstream& stream, size_t precision ) const
{
	stream << "#" << m_tag << "=IFCLIBRARYREFERENCE" << "(";
	if( m_Location ) { m_Location->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_Identification ) { m_Identification->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_Name ) { m_Name->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_Description ) { m_Description->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_Language ) { m_Language->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_ReferencedLibrary ) { stream << "#" << m_ReferencedLibrary->m_tag; } else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcLibraryReference::getStepParameter( std::stringstream& stream, bool /*is_select_type*/, size_t /*precision*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcLibraryReference::readStepArguments( const std::vector<std::string>& args, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	const size_t num_args = args.size();
	if( num_args > 0 ){m_Location = IfcURIReference::createObjectFromSTEP( args[0], map, errorStream, entityIdNotFound );}
	if( num_args > 1 ){m_Identification = IfcIdentifier::createObjectFromSTEP( args[1], map, errorStream, entityIdNotFound );}
	if( num_args > 2 ){m_Name = IfcLabel::createObjectFromSTEP( args[2], map, errorStream, entityIdNotFound );}
	if( num_args > 3 ){m_Description = IfcText::createObjectFromSTEP( args[3], map, errorStream, entityIdNotFound );}
	if( num_args > 4 ){m_Language = IfcLanguageId::createObjectFromSTEP( args[4], map, errorStream, entityIdNotFound );}
	if( num_args > 5 ){readEntityReference( args[5], m_ReferencedLibrary, map, errorStream, entityIdNotFound );}
	if( num_args != 6 ){ errorStream << "Wrong parameter count for entity IfcLibraryReference, expecting 6, having " << num_args << ". Entity ID: " << m_tag << std::endl; }
}
void IFC4X3::IfcLibraryReference::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IFC4X3::IfcExternalReference::getAttributes( vec_attributes );
	vec_attributes.emplace_back( std::make_pair( "Description", m_Description ) );
	vec_attributes.emplace_back( std::make_pair( "Language", m_Language ) );
	vec_attributes.emplace_back( std::make_pair( "ReferencedLibrary", m_ReferencedLibrary ) );
}
void IFC4X3::IfcLibraryReference::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IFC4X3::IfcExternalReference::getAttributesInverse( vec_attributes_inverse );
	shared_ptr<AttributeObjectVector> LibraryRefForObjects_inverse_vec_obj( new AttributeObjectVector() );
	for( size_t i=0; i<m_LibraryRefForObjects_inverse.size(); ++i )
	{
		if( !m_LibraryRefForObjects_inverse[i].expired() )
		{
			LibraryRefForObjects_inverse_vec_obj->m_vec.emplace_back( shared_ptr<IfcRelAssociatesLibrary>( m_LibraryRefForObjects_inverse[i] ) );
		}
	}
	vec_attributes_inverse.emplace_back( std::make_pair( "LibraryRefForObjects_inverse", LibraryRefForObjects_inverse_vec_obj ) );
}
void IFC4X3::IfcLibraryReference::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcExternalReference::setInverseCounterparts( ptr_self_entity );
	shared_ptr<IfcLibraryReference> ptr_self = dynamic_pointer_cast<IfcLibraryReference>( ptr_self_entity );
	if( !ptr_self ) { throw BuildingException( "IfcLibraryReference::setInverseCounterparts: type mismatch" ); }
	if( m_ReferencedLibrary )
	{
		m_ReferencedLibrary->m_HasLibraryReferences_inverse.emplace_back( ptr_self );
	}
}
void IFC4X3::IfcLibraryReference::unlinkFromInverseCounterparts()
{
	IfcExternalReference::unlinkFromInverseCounterparts();
	if( m_ReferencedLibrary )
	{
		std::vector<weak_ptr<IfcLibraryReference> >& HasLibraryReferences_inverse = m_ReferencedLibrary->m_HasLibraryReferences_inverse;
		for( auto it_HasLibraryReferences_inverse = HasLibraryReferences_inverse.begin(); it_HasLibraryReferences_inverse != HasLibraryReferences_inverse.end(); )
		{
			weak_ptr<IfcLibraryReference> self_candidate_weak = *it_HasLibraryReferences_inverse;
			if( self_candidate_weak.expired() )
			{
				++it_HasLibraryReferences_inverse;
				continue;
			}
			shared_ptr<IfcLibraryReference> self_candidate( *it_HasLibraryReferences_inverse );
			if( self_candidate.get() == this )
			{
				it_HasLibraryReferences_inverse= HasLibraryReferences_inverse.erase( it_HasLibraryReferences_inverse );
			}
			else
			{
				++it_HasLibraryReferences_inverse;
			}
		}
	}
}
