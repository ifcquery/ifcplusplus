/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcCoordinateReferenceSystem.h"
#include "ifcpp/IFC4X3/include/IfcCoordinateReferenceSystemSelect.h"
#include "ifcpp/IFC4X3/include/IfcLengthMeasure.h"
#include "ifcpp/IFC4X3/include/IfcMapConversionScaled.h"
#include "ifcpp/IFC4X3/include/IfcReal.h"

// ENTITY IfcMapConversionScaled 
IFC4X3::IfcMapConversionScaled::IfcMapConversionScaled( int tag ) { m_tag = tag; }
void IFC4X3::IfcMapConversionScaled::getStepLine( std::stringstream& stream, size_t precision ) const
{
	stream << "#" << m_tag << "=IFCMAPCONVERSIONSCALED" << "(";
	if( m_SourceCRS ) { m_SourceCRS->getStepParameter( stream, true, precision ); } else { stream << "$" ; }
	stream << ",";
	if( m_TargetCRS ) { stream << "#" << m_TargetCRS->m_tag; } else { stream << "$"; }
	stream << ",";
	if( m_Eastings ) { m_Eastings->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_Northings ) { m_Northings->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_OrthogonalHeight ) { m_OrthogonalHeight->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_XAxisAbscissa ) { m_XAxisAbscissa->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_XAxisOrdinate ) { m_XAxisOrdinate->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_Scale ) { m_Scale->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_FactorX ) { m_FactorX->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_FactorY ) { m_FactorY->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_FactorZ ) { m_FactorZ->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcMapConversionScaled::getStepParameter( std::stringstream& stream, bool /*is_select_type*/, size_t /*precision*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcMapConversionScaled::readStepArguments( const std::vector<std::string>& args, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	const size_t num_args = args.size();
	if( num_args > 0 ){m_SourceCRS = IfcCoordinateReferenceSystemSelect::createObjectFromSTEP( args[0], map, errorStream, entityIdNotFound );}
	if( num_args > 1 ){readEntityReference( args[1], m_TargetCRS, map, errorStream, entityIdNotFound );}
	if( num_args > 2 ){m_Eastings = IfcLengthMeasure::createObjectFromSTEP( args[2], map, errorStream, entityIdNotFound );}
	if( num_args > 3 ){m_Northings = IfcLengthMeasure::createObjectFromSTEP( args[3], map, errorStream, entityIdNotFound );}
	if( num_args > 4 ){m_OrthogonalHeight = IfcLengthMeasure::createObjectFromSTEP( args[4], map, errorStream, entityIdNotFound );}
	if( num_args > 5 ){m_XAxisAbscissa = IfcReal::createObjectFromSTEP( args[5], map, errorStream, entityIdNotFound );}
	if( num_args > 6 ){m_XAxisOrdinate = IfcReal::createObjectFromSTEP( args[6], map, errorStream, entityIdNotFound );}
	if( num_args > 7 ){m_Scale = IfcReal::createObjectFromSTEP( args[7], map, errorStream, entityIdNotFound );}
	if( num_args > 8 ){m_FactorX = IfcReal::createObjectFromSTEP( args[8], map, errorStream, entityIdNotFound );}
	if( num_args > 9 ){m_FactorY = IfcReal::createObjectFromSTEP( args[9], map, errorStream, entityIdNotFound );}
	if( num_args > 10 ){m_FactorZ = IfcReal::createObjectFromSTEP( args[10], map, errorStream, entityIdNotFound );}
	if( num_args != 11 ){ errorStream << "Wrong parameter count for entity IfcMapConversionScaled, expecting 11, having " << num_args << ". Entity ID: " << m_tag << std::endl; }
}
void IFC4X3::IfcMapConversionScaled::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IFC4X3::IfcMapConversion::getAttributes( vec_attributes );
	vec_attributes.emplace_back( std::make_pair( "FactorX", m_FactorX ) );
	vec_attributes.emplace_back( std::make_pair( "FactorY", m_FactorY ) );
	vec_attributes.emplace_back( std::make_pair( "FactorZ", m_FactorZ ) );
}
void IFC4X3::IfcMapConversionScaled::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IFC4X3::IfcMapConversion::getAttributesInverse( vec_attributes_inverse );
}
void IFC4X3::IfcMapConversionScaled::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcMapConversion::setInverseCounterparts( ptr_self_entity );
}
void IFC4X3::IfcMapConversionScaled::unlinkFromInverseCounterparts()
{
	IfcMapConversion::unlinkFromInverseCounterparts();
}
