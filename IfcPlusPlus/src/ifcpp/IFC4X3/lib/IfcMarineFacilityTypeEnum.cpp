/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcMarineFacilityTypeEnum.h"

// TYPE IfcMarineFacilityTypeEnum = ENUMERATION OF	(BARRIERBEACH	,BREAKWATER	,CANAL	,DRYDOCK	,FLOATINGDOCK	,HYDROLIFT	,JETTY	,LAUNCHRECOVERY	,MARINEDEFENCE	,NAVIGATIONALCHANNEL	,PORT	,QUAY	,REVETMENT	,SHIPLIFT	,SHIPLOCK	,SHIPYARD	,SLIPWAY	,WATERWAY	,WATERWAYSHIPLIFT	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcMarineFacilityTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCMARINEFACILITYTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_BARRIERBEACH:	stream << ".BARRIERBEACH."; break;
		case ENUM_BREAKWATER:	stream << ".BREAKWATER."; break;
		case ENUM_CANAL:	stream << ".CANAL."; break;
		case ENUM_DRYDOCK:	stream << ".DRYDOCK."; break;
		case ENUM_FLOATINGDOCK:	stream << ".FLOATINGDOCK."; break;
		case ENUM_HYDROLIFT:	stream << ".HYDROLIFT."; break;
		case ENUM_JETTY:	stream << ".JETTY."; break;
		case ENUM_LAUNCHRECOVERY:	stream << ".LAUNCHRECOVERY."; break;
		case ENUM_MARINEDEFENCE:	stream << ".MARINEDEFENCE."; break;
		case ENUM_NAVIGATIONALCHANNEL:	stream << ".NAVIGATIONALCHANNEL."; break;
		case ENUM_PORT:	stream << ".PORT."; break;
		case ENUM_QUAY:	stream << ".QUAY."; break;
		case ENUM_REVETMENT:	stream << ".REVETMENT."; break;
		case ENUM_SHIPLIFT:	stream << ".SHIPLIFT."; break;
		case ENUM_SHIPLOCK:	stream << ".SHIPLOCK."; break;
		case ENUM_SHIPYARD:	stream << ".SHIPYARD."; break;
		case ENUM_SLIPWAY:	stream << ".SLIPWAY."; break;
		case ENUM_WATERWAY:	stream << ".WATERWAY."; break;
		case ENUM_WATERWAYSHIPLIFT:	stream << ".WATERWAYSHIPLIFT."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcMarineFacilityTypeEnum> IFC4X3::IfcMarineFacilityTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcMarineFacilityTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcMarineFacilityTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcMarineFacilityTypeEnum>(); }
	shared_ptr<IfcMarineFacilityTypeEnum> type_object( new IfcMarineFacilityTypeEnum() );
	if( std_iequal( arg, ".BARRIERBEACH." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_BARRIERBEACH;
	}
	else if( std_iequal( arg, ".BREAKWATER." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_BREAKWATER;
	}
	else if( std_iequal( arg, ".CANAL." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_CANAL;
	}
	else if( std_iequal( arg, ".DRYDOCK." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_DRYDOCK;
	}
	else if( std_iequal( arg, ".FLOATINGDOCK." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_FLOATINGDOCK;
	}
	else if( std_iequal( arg, ".HYDROLIFT." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_HYDROLIFT;
	}
	else if( std_iequal( arg, ".JETTY." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_JETTY;
	}
	else if( std_iequal( arg, ".LAUNCHRECOVERY." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_LAUNCHRECOVERY;
	}
	else if( std_iequal( arg, ".MARINEDEFENCE." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_MARINEDEFENCE;
	}
	else if( std_iequal( arg, ".NAVIGATIONALCHANNEL." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_NAVIGATIONALCHANNEL;
	}
	else if( std_iequal( arg, ".PORT." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_PORT;
	}
	else if( std_iequal( arg, ".QUAY." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_QUAY;
	}
	else if( std_iequal( arg, ".REVETMENT." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_REVETMENT;
	}
	else if( std_iequal( arg, ".SHIPLIFT." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_SHIPLIFT;
	}
	else if( std_iequal( arg, ".SHIPLOCK." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_SHIPLOCK;
	}
	else if( std_iequal( arg, ".SHIPYARD." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_SHIPYARD;
	}
	else if( std_iequal( arg, ".SLIPWAY." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_SLIPWAY;
	}
	else if( std_iequal( arg, ".WATERWAY." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_WATERWAY;
	}
	else if( std_iequal( arg, ".WATERWAYSHIPLIFT." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_WATERWAYSHIPLIFT;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcMarineFacilityTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
