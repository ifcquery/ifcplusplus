/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcClassificationSelect.h"
#include "ifcpp/IFC4X3/include/IfcMaterial.h"
#include "ifcpp/IFC4X3/include/IfcMaterialClassificationRelationship.h"

// ENTITY IfcMaterialClassificationRelationship 
IFC4X3::IfcMaterialClassificationRelationship::IfcMaterialClassificationRelationship( int tag ) { m_tag = tag; }
void IFC4X3::IfcMaterialClassificationRelationship::getStepLine( std::stringstream& stream, size_t precision ) const
{
	stream << "#" << m_tag << "=IFCMATERIALCLASSIFICATIONRELATIONSHIP" << "(";
	stream << "(";
	for( size_t ii = 0; ii < m_MaterialClassifications.size(); ++ii )
	{
		if( ii > 0 )
		{
			stream << ",";
		}
		const shared_ptr<IfcClassificationSelect>& type_object = m_MaterialClassifications[ii];
		if( type_object )
		{
			type_object->getStepParameter( stream, true, precision );
		}
		else
		{
			stream << "$";
		}
	}
	stream << ")";
	stream << ",";
	if( m_ClassifiedMaterial ) { stream << "#" << m_ClassifiedMaterial->m_tag; } else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcMaterialClassificationRelationship::getStepParameter( std::stringstream& stream, bool /*is_select_type*/, size_t /*precision*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcMaterialClassificationRelationship::readStepArguments( const std::vector<std::string>& args, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	const size_t num_args = args.size();
	if( num_args > 0 ){readSelectList( args[0], m_MaterialClassifications, map, errorStream, entityIdNotFound );}
	if( num_args > 1 ){readEntityReference( args[1], m_ClassifiedMaterial, map, errorStream, entityIdNotFound );}
	if( num_args != 2 ){ errorStream << "Wrong parameter count for entity IfcMaterialClassificationRelationship, expecting 2, having " << num_args << ". Entity ID: " << m_tag << std::endl; }
}
void IFC4X3::IfcMaterialClassificationRelationship::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	shared_ptr<AttributeObjectVector> MaterialClassifications_vec_object( new AttributeObjectVector() );
	std::copy( m_MaterialClassifications.begin(), m_MaterialClassifications.end(), std::back_inserter( MaterialClassifications_vec_object->m_vec ) );
	vec_attributes.emplace_back( std::make_pair( "MaterialClassifications", MaterialClassifications_vec_object ) );
	vec_attributes.emplace_back( std::make_pair( "ClassifiedMaterial", m_ClassifiedMaterial ) );
}
void IFC4X3::IfcMaterialClassificationRelationship::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
}
void IFC4X3::IfcMaterialClassificationRelationship::setInverseCounterparts( shared_ptr<BuildingEntity> )
{
}
void IFC4X3::IfcMaterialClassificationRelationship::unlinkFromInverseCounterparts()
{
}
