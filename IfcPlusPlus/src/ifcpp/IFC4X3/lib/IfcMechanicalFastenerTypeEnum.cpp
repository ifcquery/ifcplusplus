/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcMechanicalFastenerTypeEnum.h"

// TYPE IfcMechanicalFastenerTypeEnum = ENUMERATION OF	(ANCHORBOLT	,BOLT	,CHAIN	,COUPLER	,DOWEL	,NAIL	,NAILPLATE	,RAILFASTENING	,RAILJOINT	,RIVET	,ROPE	,SCREW	,SHEARCONNECTOR	,STAPLE	,STUDSHEARCONNECTOR	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcMechanicalFastenerTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCMECHANICALFASTENERTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_ANCHORBOLT:	stream << ".ANCHORBOLT."; break;
		case ENUM_BOLT:	stream << ".BOLT."; break;
		case ENUM_CHAIN:	stream << ".CHAIN."; break;
		case ENUM_COUPLER:	stream << ".COUPLER."; break;
		case ENUM_DOWEL:	stream << ".DOWEL."; break;
		case ENUM_NAIL:	stream << ".NAIL."; break;
		case ENUM_NAILPLATE:	stream << ".NAILPLATE."; break;
		case ENUM_RAILFASTENING:	stream << ".RAILFASTENING."; break;
		case ENUM_RAILJOINT:	stream << ".RAILJOINT."; break;
		case ENUM_RIVET:	stream << ".RIVET."; break;
		case ENUM_ROPE:	stream << ".ROPE."; break;
		case ENUM_SCREW:	stream << ".SCREW."; break;
		case ENUM_SHEARCONNECTOR:	stream << ".SHEARCONNECTOR."; break;
		case ENUM_STAPLE:	stream << ".STAPLE."; break;
		case ENUM_STUDSHEARCONNECTOR:	stream << ".STUDSHEARCONNECTOR."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcMechanicalFastenerTypeEnum> IFC4X3::IfcMechanicalFastenerTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcMechanicalFastenerTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcMechanicalFastenerTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcMechanicalFastenerTypeEnum>(); }
	shared_ptr<IfcMechanicalFastenerTypeEnum> type_object( new IfcMechanicalFastenerTypeEnum() );
	if( std_iequal( arg, ".ANCHORBOLT." ) )
	{
		type_object->m_enum = IfcMechanicalFastenerTypeEnum::ENUM_ANCHORBOLT;
	}
	else if( std_iequal( arg, ".BOLT." ) )
	{
		type_object->m_enum = IfcMechanicalFastenerTypeEnum::ENUM_BOLT;
	}
	else if( std_iequal( arg, ".CHAIN." ) )
	{
		type_object->m_enum = IfcMechanicalFastenerTypeEnum::ENUM_CHAIN;
	}
	else if( std_iequal( arg, ".COUPLER." ) )
	{
		type_object->m_enum = IfcMechanicalFastenerTypeEnum::ENUM_COUPLER;
	}
	else if( std_iequal( arg, ".DOWEL." ) )
	{
		type_object->m_enum = IfcMechanicalFastenerTypeEnum::ENUM_DOWEL;
	}
	else if( std_iequal( arg, ".NAIL." ) )
	{
		type_object->m_enum = IfcMechanicalFastenerTypeEnum::ENUM_NAIL;
	}
	else if( std_iequal( arg, ".NAILPLATE." ) )
	{
		type_object->m_enum = IfcMechanicalFastenerTypeEnum::ENUM_NAILPLATE;
	}
	else if( std_iequal( arg, ".RAILFASTENING." ) )
	{
		type_object->m_enum = IfcMechanicalFastenerTypeEnum::ENUM_RAILFASTENING;
	}
	else if( std_iequal( arg, ".RAILJOINT." ) )
	{
		type_object->m_enum = IfcMechanicalFastenerTypeEnum::ENUM_RAILJOINT;
	}
	else if( std_iequal( arg, ".RIVET." ) )
	{
		type_object->m_enum = IfcMechanicalFastenerTypeEnum::ENUM_RIVET;
	}
	else if( std_iequal( arg, ".ROPE." ) )
	{
		type_object->m_enum = IfcMechanicalFastenerTypeEnum::ENUM_ROPE;
	}
	else if( std_iequal( arg, ".SCREW." ) )
	{
		type_object->m_enum = IfcMechanicalFastenerTypeEnum::ENUM_SCREW;
	}
	else if( std_iequal( arg, ".SHEARCONNECTOR." ) )
	{
		type_object->m_enum = IfcMechanicalFastenerTypeEnum::ENUM_SHEARCONNECTOR;
	}
	else if( std_iequal( arg, ".STAPLE." ) )
	{
		type_object->m_enum = IfcMechanicalFastenerTypeEnum::ENUM_STAPLE;
	}
	else if( std_iequal( arg, ".STUDSHEARCONNECTOR." ) )
	{
		type_object->m_enum = IfcMechanicalFastenerTypeEnum::ENUM_STUDSHEARCONNECTOR;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcMechanicalFastenerTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcMechanicalFastenerTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
