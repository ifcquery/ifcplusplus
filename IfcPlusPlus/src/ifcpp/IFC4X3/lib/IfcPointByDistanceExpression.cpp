/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcCurve.h"
#include "ifcpp/IFC4X3/include/IfcCurveMeasureSelect.h"
#include "ifcpp/IFC4X3/include/IfcLengthMeasure.h"
#include "ifcpp/IFC4X3/include/IfcPointByDistanceExpression.h"
#include "ifcpp/IFC4X3/include/IfcPresentationLayerAssignment.h"
#include "ifcpp/IFC4X3/include/IfcStyledItem.h"

// ENTITY IfcPointByDistanceExpression 
IFC4X3::IfcPointByDistanceExpression::IfcPointByDistanceExpression( int tag ) { m_tag = tag; }
void IFC4X3::IfcPointByDistanceExpression::getStepLine( std::stringstream& stream, size_t precision ) const
{
	stream << "#" << m_tag << "=IFCPOINTBYDISTANCEEXPRESSION" << "(";
	if( m_DistanceAlong ) { m_DistanceAlong->getStepParameter( stream, true, precision ); } else { stream << "$" ; }
	stream << ",";
	if( m_OffsetLateral ) { m_OffsetLateral->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_OffsetVertical ) { m_OffsetVertical->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_OffsetLongitudinal ) { m_OffsetLongitudinal->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_BasisCurve ) { stream << "#" << m_BasisCurve->m_tag; } else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcPointByDistanceExpression::getStepParameter( std::stringstream& stream, bool /*is_select_type*/, size_t /*precision*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcPointByDistanceExpression::readStepArguments( const std::vector<std::string>& args, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	const size_t num_args = args.size();
	if( num_args > 0 ){m_DistanceAlong = IfcCurveMeasureSelect::createObjectFromSTEP( args[0], map, errorStream, entityIdNotFound );}
	if( num_args > 1 ){m_OffsetLateral = IfcLengthMeasure::createObjectFromSTEP( args[1], map, errorStream, entityIdNotFound );}
	if( num_args > 2 ){m_OffsetVertical = IfcLengthMeasure::createObjectFromSTEP( args[2], map, errorStream, entityIdNotFound );}
	if( num_args > 3 ){m_OffsetLongitudinal = IfcLengthMeasure::createObjectFromSTEP( args[3], map, errorStream, entityIdNotFound );}
	if( num_args > 4 ){readEntityReference( args[4], m_BasisCurve, map, errorStream, entityIdNotFound );}
	if( num_args != 5 ){ errorStream << "Wrong parameter count for entity IfcPointByDistanceExpression, expecting 5, having " << num_args << ". Entity ID: " << m_tag << std::endl; }
}
void IFC4X3::IfcPointByDistanceExpression::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IFC4X3::IfcPoint::getAttributes( vec_attributes );
	vec_attributes.emplace_back( std::make_pair( "DistanceAlong", m_DistanceAlong ) );
	vec_attributes.emplace_back( std::make_pair( "OffsetLateral", m_OffsetLateral ) );
	vec_attributes.emplace_back( std::make_pair( "OffsetVertical", m_OffsetVertical ) );
	vec_attributes.emplace_back( std::make_pair( "OffsetLongitudinal", m_OffsetLongitudinal ) );
	vec_attributes.emplace_back( std::make_pair( "BasisCurve", m_BasisCurve ) );
}
void IFC4X3::IfcPointByDistanceExpression::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IFC4X3::IfcPoint::getAttributesInverse( vec_attributes_inverse );
}
void IFC4X3::IfcPointByDistanceExpression::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcPoint::setInverseCounterparts( ptr_self_entity );
}
void IFC4X3::IfcPointByDistanceExpression::unlinkFromInverseCounterparts()
{
	IfcPoint::unlinkFromInverseCounterparts();
}
