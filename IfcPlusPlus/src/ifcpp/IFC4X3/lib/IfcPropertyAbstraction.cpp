/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcExternalReferenceRelationship.h"
#include "ifcpp/IFC4X3/include/IfcPropertyAbstraction.h"

// ENTITY IfcPropertyAbstraction 
IFC4X3::IfcPropertyAbstraction::IfcPropertyAbstraction( int tag ) { m_tag = tag; }
void IFC4X3::IfcPropertyAbstraction::getStepLine( std::stringstream& stream, size_t precision ) const
{
	stream << "#" << m_tag << "=IFCPROPERTYABSTRACTION" << "(";
	stream << ");";
}
void IFC4X3::IfcPropertyAbstraction::getStepParameter( std::stringstream& stream, bool /*is_select_type*/, size_t /*precision*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcPropertyAbstraction::readStepArguments( const std::vector<std::string>& args, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
}
void IFC4X3::IfcPropertyAbstraction::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
}
void IFC4X3::IfcPropertyAbstraction::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	shared_ptr<AttributeObjectVector> HasExternalReferences_inverse_vec_obj( new AttributeObjectVector() );
	for( size_t i=0; i<m_HasExternalReferences_inverse.size(); ++i )
	{
		if( !m_HasExternalReferences_inverse[i].expired() )
		{
			HasExternalReferences_inverse_vec_obj->m_vec.emplace_back( shared_ptr<IfcExternalReferenceRelationship>( m_HasExternalReferences_inverse[i] ) );
		}
	}
	vec_attributes_inverse.emplace_back( std::make_pair( "HasExternalReferences_inverse", HasExternalReferences_inverse_vec_obj ) );
}
void IFC4X3::IfcPropertyAbstraction::setInverseCounterparts( shared_ptr<BuildingEntity> )
{
}
void IFC4X3::IfcPropertyAbstraction::unlinkFromInverseCounterparts()
{
}
