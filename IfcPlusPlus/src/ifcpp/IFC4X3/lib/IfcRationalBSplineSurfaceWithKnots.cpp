/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcBSplineSurfaceForm.h"
#include "ifcpp/IFC4X3/include/IfcCartesianPoint.h"
#include "ifcpp/IFC4X3/include/IfcInteger.h"
#include "ifcpp/IFC4X3/include/IfcKnotType.h"
#include "ifcpp/IFC4X3/include/IfcLogical.h"
#include "ifcpp/IFC4X3/include/IfcParameterValue.h"
#include "ifcpp/IFC4X3/include/IfcPresentationLayerAssignment.h"
#include "ifcpp/IFC4X3/include/IfcRationalBSplineSurfaceWithKnots.h"
#include "ifcpp/IFC4X3/include/IfcReal.h"
#include "ifcpp/IFC4X3/include/IfcStyledItem.h"

// ENTITY IfcRationalBSplineSurfaceWithKnots 
IFC4X3::IfcRationalBSplineSurfaceWithKnots::IfcRationalBSplineSurfaceWithKnots( int tag ) { m_tag = tag; }
void IFC4X3::IfcRationalBSplineSurfaceWithKnots::getStepLine( std::stringstream& stream, size_t precision ) const
{
	stream << "#" << m_tag << "=IFCRATIONALBSPLINESURFACEWITHKNOTS" << "(";
	if( m_UDegree ) { m_UDegree->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_VDegree ) { m_VDegree->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	writeEntityList2D( stream, m_ControlPointsList );
	stream << ",";
	if( m_SurfaceForm ) { m_SurfaceForm->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_UClosed ) { m_UClosed->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_VClosed ) { m_VClosed->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_SelfIntersect ) { m_SelfIntersect->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	writeTypeOfIntList( stream, m_UMultiplicities, false );
	stream << ",";
	writeTypeOfIntList( stream, m_VMultiplicities, false );
	stream << ",";
	writeTypeOfRealList( stream, m_UKnots, false, precision );
	stream << ",";
	writeTypeOfRealList( stream, m_VKnots, false, precision );
	stream << ",";
	if( m_KnotSpec ) { m_KnotSpec->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	writeTypeOfRealList2D( stream, m_WeightsData, false, precision );
	stream << ");";
}
void IFC4X3::IfcRationalBSplineSurfaceWithKnots::getStepParameter( std::stringstream& stream, bool /*is_select_type*/, size_t /*precision*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcRationalBSplineSurfaceWithKnots::readStepArguments( const std::vector<std::string>& args, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	const size_t num_args = args.size();
	if( num_args > 0 ){m_UDegree = IfcInteger::createObjectFromSTEP( args[0], map, errorStream, entityIdNotFound );}
	if( num_args > 1 ){m_VDegree = IfcInteger::createObjectFromSTEP( args[1], map, errorStream, entityIdNotFound );}
	if( num_args > 2 ){readEntityReferenceList2D( args[2], m_ControlPointsList, map, errorStream, entityIdNotFound );}
	if( num_args > 3 ){m_SurfaceForm = IfcBSplineSurfaceForm::createObjectFromSTEP( args[3], map, errorStream, entityIdNotFound );}
	if( num_args > 4 ){m_UClosed = IfcLogical::createObjectFromSTEP( args[4], map, errorStream, entityIdNotFound );}
	if( num_args > 5 ){m_VClosed = IfcLogical::createObjectFromSTEP( args[5], map, errorStream, entityIdNotFound );}
	if( num_args > 6 ){m_SelfIntersect = IfcLogical::createObjectFromSTEP( args[6], map, errorStream, entityIdNotFound );}
	if( num_args > 7 ){readTypeOfIntegerList( args[7], m_UMultiplicities );}
	if( num_args > 8 ){readTypeOfIntegerList( args[8], m_VMultiplicities );}
	if( num_args > 9 ){readTypeOfRealList( args[9], m_UKnots );}
	if( num_args > 10 ){readTypeOfRealList( args[10], m_VKnots );}
	if( num_args > 11 ){m_KnotSpec = IfcKnotType::createObjectFromSTEP( args[11], map, errorStream, entityIdNotFound );}
	if( num_args > 12 ){readTypeOfRealList2D( args[12], m_WeightsData );}
	if( num_args != 13 ){ errorStream << "Wrong parameter count for entity IfcRationalBSplineSurfaceWithKnots, expecting 13, having " << num_args << ". Entity ID: " << m_tag << std::endl; }
}
void IFC4X3::IfcRationalBSplineSurfaceWithKnots::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IFC4X3::IfcBSplineSurfaceWithKnots::getAttributes( vec_attributes );
	shared_ptr<AttributeObjectVector> WeightsData_vector( new AttributeObjectVector() );
	vec_attributes.emplace_back( std::make_pair( "WeightsData", WeightsData_vector ) );
	for( size_t ii=0; ii<m_WeightsData.size(); ++ii )
	{
		const std::vector<shared_ptr<IfcReal> >& vec_ii = m_WeightsData[ii];
		shared_ptr<AttributeObjectVector> inner_vector( new AttributeObjectVector() );
		WeightsData_vector->m_vec.push_back( inner_vector );
		std::copy(vec_ii.begin(), vec_ii.end(), std::back_inserter(inner_vector->m_vec));
	}
}
void IFC4X3::IfcRationalBSplineSurfaceWithKnots::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IFC4X3::IfcBSplineSurfaceWithKnots::getAttributesInverse( vec_attributes_inverse );
}
void IFC4X3::IfcRationalBSplineSurfaceWithKnots::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcBSplineSurfaceWithKnots::setInverseCounterparts( ptr_self_entity );
}
void IFC4X3::IfcRationalBSplineSurfaceWithKnots::unlinkFromInverseCounterparts()
{
	IfcBSplineSurfaceWithKnots::unlinkFromInverseCounterparts();
}
