/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcIdentifier.h"
#include "ifcpp/IFC4X3/include/IfcInteger.h"
#include "ifcpp/IFC4X3/include/IfcLabel.h"
#include "ifcpp/IFC4X3/include/IfcReference.h"

// ENTITY IfcReference 
IFC4X3::IfcReference::IfcReference( int tag ) { m_tag = tag; }
void IFC4X3::IfcReference::getStepLine( std::stringstream& stream, size_t precision ) const
{
	stream << "#" << m_tag << "=IFCREFERENCE" << "(";
	if( m_TypeIdentifier ) { m_TypeIdentifier->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_AttributeIdentifier ) { m_AttributeIdentifier->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_InstanceName ) { m_InstanceName->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	writeTypeOfIntList( stream, m_ListPositions, true );
	stream << ",";
	if( m_InnerReference ) { stream << "#" << m_InnerReference->m_tag; } else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcReference::getStepParameter( std::stringstream& stream, bool /*is_select_type*/, size_t /*precision*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcReference::readStepArguments( const std::vector<std::string>& args, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	const size_t num_args = args.size();
	if( num_args > 0 ){m_TypeIdentifier = IfcIdentifier::createObjectFromSTEP( args[0], map, errorStream, entityIdNotFound );}
	if( num_args > 1 ){m_AttributeIdentifier = IfcIdentifier::createObjectFromSTEP( args[1], map, errorStream, entityIdNotFound );}
	if( num_args > 2 ){m_InstanceName = IfcLabel::createObjectFromSTEP( args[2], map, errorStream, entityIdNotFound );}
	if( num_args > 3 ){readTypeOfIntegerList( args[3], m_ListPositions );}
	if( num_args > 4 ){readEntityReference( args[4], m_InnerReference, map, errorStream, entityIdNotFound );}
	if( num_args != 5 ){ errorStream << "Wrong parameter count for entity IfcReference, expecting 5, having " << num_args << ". Entity ID: " << m_tag << std::endl; }
}
void IFC4X3::IfcReference::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	vec_attributes.emplace_back( std::make_pair( "TypeIdentifier", m_TypeIdentifier ) );
	vec_attributes.emplace_back( std::make_pair( "AttributeIdentifier", m_AttributeIdentifier ) );
	vec_attributes.emplace_back( std::make_pair( "InstanceName", m_InstanceName ) );
	shared_ptr<AttributeObjectVector> ListPositions_vec_object( new AttributeObjectVector() );
	std::copy( m_ListPositions.begin(), m_ListPositions.end(), std::back_inserter( ListPositions_vec_object->m_vec ) );
	vec_attributes.emplace_back( std::make_pair( "ListPositions", ListPositions_vec_object ) );
	vec_attributes.emplace_back( std::make_pair( "InnerReference", m_InnerReference ) );
}
void IFC4X3::IfcReference::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
}
void IFC4X3::IfcReference::setInverseCounterparts( shared_ptr<BuildingEntity> )
{
}
void IFC4X3::IfcReference::unlinkFromInverseCounterparts()
{
}
