/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcReferentTypeEnum.h"

// TYPE IfcReferentTypeEnum = ENUMERATION OF	(BOUNDARY	,INTERSECTION	,KILOPOINT	,LANDMARK	,MILEPOINT	,POSITION	,REFERENCEMARKER	,STATION	,SUPERELEVATIONEVENT	,WIDTHEVENT	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcReferentTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCREFERENTTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_BOUNDARY:	stream << ".BOUNDARY."; break;
		case ENUM_INTERSECTION:	stream << ".INTERSECTION."; break;
		case ENUM_KILOPOINT:	stream << ".KILOPOINT."; break;
		case ENUM_LANDMARK:	stream << ".LANDMARK."; break;
		case ENUM_MILEPOINT:	stream << ".MILEPOINT."; break;
		case ENUM_POSITION:	stream << ".POSITION."; break;
		case ENUM_REFERENCEMARKER:	stream << ".REFERENCEMARKER."; break;
		case ENUM_STATION:	stream << ".STATION."; break;
		case ENUM_SUPERELEVATIONEVENT:	stream << ".SUPERELEVATIONEVENT."; break;
		case ENUM_WIDTHEVENT:	stream << ".WIDTHEVENT."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcReferentTypeEnum> IFC4X3::IfcReferentTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcReferentTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcReferentTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcReferentTypeEnum>(); }
	shared_ptr<IfcReferentTypeEnum> type_object( new IfcReferentTypeEnum() );
	if( std_iequal( arg, ".BOUNDARY." ) )
	{
		type_object->m_enum = IfcReferentTypeEnum::ENUM_BOUNDARY;
	}
	else if( std_iequal( arg, ".INTERSECTION." ) )
	{
		type_object->m_enum = IfcReferentTypeEnum::ENUM_INTERSECTION;
	}
	else if( std_iequal( arg, ".KILOPOINT." ) )
	{
		type_object->m_enum = IfcReferentTypeEnum::ENUM_KILOPOINT;
	}
	else if( std_iequal( arg, ".LANDMARK." ) )
	{
		type_object->m_enum = IfcReferentTypeEnum::ENUM_LANDMARK;
	}
	else if( std_iequal( arg, ".MILEPOINT." ) )
	{
		type_object->m_enum = IfcReferentTypeEnum::ENUM_MILEPOINT;
	}
	else if( std_iequal( arg, ".POSITION." ) )
	{
		type_object->m_enum = IfcReferentTypeEnum::ENUM_POSITION;
	}
	else if( std_iequal( arg, ".REFERENCEMARKER." ) )
	{
		type_object->m_enum = IfcReferentTypeEnum::ENUM_REFERENCEMARKER;
	}
	else if( std_iequal( arg, ".STATION." ) )
	{
		type_object->m_enum = IfcReferentTypeEnum::ENUM_STATION;
	}
	else if( std_iequal( arg, ".SUPERELEVATIONEVENT." ) )
	{
		type_object->m_enum = IfcReferentTypeEnum::ENUM_SUPERELEVATIONEVENT;
	}
	else if( std_iequal( arg, ".WIDTHEVENT." ) )
	{
		type_object->m_enum = IfcReferentTypeEnum::ENUM_WIDTHEVENT;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcReferentTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcReferentTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
