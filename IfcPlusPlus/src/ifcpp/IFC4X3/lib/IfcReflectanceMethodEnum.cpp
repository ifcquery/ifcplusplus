/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcReflectanceMethodEnum.h"

// TYPE IfcReflectanceMethodEnum = ENUMERATION OF	(BLINN	,FLAT	,GLASS	,MATT	,METAL	,MIRROR	,PHONG	,PHYSICAL	,PLASTIC	,STRAUSS	,NOTDEFINED);
void IFC4X3::IfcReflectanceMethodEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCREFLECTANCEMETHODENUM("; }
	switch( m_enum )
	{
		case ENUM_BLINN:	stream << ".BLINN."; break;
		case ENUM_FLAT:	stream << ".FLAT."; break;
		case ENUM_GLASS:	stream << ".GLASS."; break;
		case ENUM_MATT:	stream << ".MATT."; break;
		case ENUM_METAL:	stream << ".METAL."; break;
		case ENUM_MIRROR:	stream << ".MIRROR."; break;
		case ENUM_PHONG:	stream << ".PHONG."; break;
		case ENUM_PHYSICAL:	stream << ".PHYSICAL."; break;
		case ENUM_PLASTIC:	stream << ".PLASTIC."; break;
		case ENUM_STRAUSS:	stream << ".STRAUSS."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcReflectanceMethodEnum> IFC4X3::IfcReflectanceMethodEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcReflectanceMethodEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcReflectanceMethodEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcReflectanceMethodEnum>(); }
	shared_ptr<IfcReflectanceMethodEnum> type_object( new IfcReflectanceMethodEnum() );
	if( std_iequal( arg, ".BLINN." ) )
	{
		type_object->m_enum = IfcReflectanceMethodEnum::ENUM_BLINN;
	}
	else if( std_iequal( arg, ".FLAT." ) )
	{
		type_object->m_enum = IfcReflectanceMethodEnum::ENUM_FLAT;
	}
	else if( std_iequal( arg, ".GLASS." ) )
	{
		type_object->m_enum = IfcReflectanceMethodEnum::ENUM_GLASS;
	}
	else if( std_iequal( arg, ".MATT." ) )
	{
		type_object->m_enum = IfcReflectanceMethodEnum::ENUM_MATT;
	}
	else if( std_iequal( arg, ".METAL." ) )
	{
		type_object->m_enum = IfcReflectanceMethodEnum::ENUM_METAL;
	}
	else if( std_iequal( arg, ".MIRROR." ) )
	{
		type_object->m_enum = IfcReflectanceMethodEnum::ENUM_MIRROR;
	}
	else if( std_iequal( arg, ".PHONG." ) )
	{
		type_object->m_enum = IfcReflectanceMethodEnum::ENUM_PHONG;
	}
	else if( std_iequal( arg, ".PHYSICAL." ) )
	{
		type_object->m_enum = IfcReflectanceMethodEnum::ENUM_PHYSICAL;
	}
	else if( std_iequal( arg, ".PLASTIC." ) )
	{
		type_object->m_enum = IfcReflectanceMethodEnum::ENUM_PLASTIC;
	}
	else if( std_iequal( arg, ".STRAUSS." ) )
	{
		type_object->m_enum = IfcReflectanceMethodEnum::ENUM_STRAUSS;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcReflectanceMethodEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
