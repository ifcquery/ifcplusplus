/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcReinforcingBarTypeEnum.h"

// TYPE IfcReinforcingBarTypeEnum = ENUMERATION OF	(ANCHORING	,EDGE	,LIGATURE	,MAIN	,PUNCHING	,RING	,SHEAR	,SPACEBAR	,STUD	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcReinforcingBarTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCREINFORCINGBARTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_ANCHORING:	stream << ".ANCHORING."; break;
		case ENUM_EDGE:	stream << ".EDGE."; break;
		case ENUM_LIGATURE:	stream << ".LIGATURE."; break;
		case ENUM_MAIN:	stream << ".MAIN."; break;
		case ENUM_PUNCHING:	stream << ".PUNCHING."; break;
		case ENUM_RING:	stream << ".RING."; break;
		case ENUM_SHEAR:	stream << ".SHEAR."; break;
		case ENUM_SPACEBAR:	stream << ".SPACEBAR."; break;
		case ENUM_STUD:	stream << ".STUD."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcReinforcingBarTypeEnum> IFC4X3::IfcReinforcingBarTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcReinforcingBarTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcReinforcingBarTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcReinforcingBarTypeEnum>(); }
	shared_ptr<IfcReinforcingBarTypeEnum> type_object( new IfcReinforcingBarTypeEnum() );
	if( std_iequal( arg, ".ANCHORING." ) )
	{
		type_object->m_enum = IfcReinforcingBarTypeEnum::ENUM_ANCHORING;
	}
	else if( std_iequal( arg, ".EDGE." ) )
	{
		type_object->m_enum = IfcReinforcingBarTypeEnum::ENUM_EDGE;
	}
	else if( std_iequal( arg, ".LIGATURE." ) )
	{
		type_object->m_enum = IfcReinforcingBarTypeEnum::ENUM_LIGATURE;
	}
	else if( std_iequal( arg, ".MAIN." ) )
	{
		type_object->m_enum = IfcReinforcingBarTypeEnum::ENUM_MAIN;
	}
	else if( std_iequal( arg, ".PUNCHING." ) )
	{
		type_object->m_enum = IfcReinforcingBarTypeEnum::ENUM_PUNCHING;
	}
	else if( std_iequal( arg, ".RING." ) )
	{
		type_object->m_enum = IfcReinforcingBarTypeEnum::ENUM_RING;
	}
	else if( std_iequal( arg, ".SHEAR." ) )
	{
		type_object->m_enum = IfcReinforcingBarTypeEnum::ENUM_SHEAR;
	}
	else if( std_iequal( arg, ".SPACEBAR." ) )
	{
		type_object->m_enum = IfcReinforcingBarTypeEnum::ENUM_SPACEBAR;
	}
	else if( std_iequal( arg, ".STUD." ) )
	{
		type_object->m_enum = IfcReinforcingBarTypeEnum::ENUM_STUD;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcReinforcingBarTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcReinforcingBarTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
