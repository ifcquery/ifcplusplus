/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcRoadPartTypeEnum.h"

// TYPE IfcRoadPartTypeEnum = ENUMERATION OF	(BICYCLECROSSING	,BUS_STOP	,CARRIAGEWAY	,CENTRALISLAND	,CENTRALRESERVE	,HARDSHOULDER	,INTERSECTION	,LAYBY	,PARKINGBAY	,PASSINGBAY	,PEDESTRIAN_CROSSING	,RAILWAYCROSSING	,REFUGEISLAND	,ROADSEGMENT	,ROADSIDE	,ROADSIDEPART	,ROADWAYPLATEAU	,ROUNDABOUT	,SHOULDER	,SIDEWALK	,SOFTSHOULDER	,TOLLPLAZA	,TRAFFICISLAND	,TRAFFICLANE	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcRoadPartTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCROADPARTTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_BICYCLECROSSING:	stream << ".BICYCLECROSSING."; break;
		case ENUM_BUS_STOP:	stream << ".BUS_STOP."; break;
		case ENUM_CARRIAGEWAY:	stream << ".CARRIAGEWAY."; break;
		case ENUM_CENTRALISLAND:	stream << ".CENTRALISLAND."; break;
		case ENUM_CENTRALRESERVE:	stream << ".CENTRALRESERVE."; break;
		case ENUM_HARDSHOULDER:	stream << ".HARDSHOULDER."; break;
		case ENUM_INTERSECTION:	stream << ".INTERSECTION."; break;
		case ENUM_LAYBY:	stream << ".LAYBY."; break;
		case ENUM_PARKINGBAY:	stream << ".PARKINGBAY."; break;
		case ENUM_PASSINGBAY:	stream << ".PASSINGBAY."; break;
		case ENUM_PEDESTRIAN_CROSSING:	stream << ".PEDESTRIAN_CROSSING."; break;
		case ENUM_RAILWAYCROSSING:	stream << ".RAILWAYCROSSING."; break;
		case ENUM_REFUGEISLAND:	stream << ".REFUGEISLAND."; break;
		case ENUM_ROADSEGMENT:	stream << ".ROADSEGMENT."; break;
		case ENUM_ROADSIDE:	stream << ".ROADSIDE."; break;
		case ENUM_ROADSIDEPART:	stream << ".ROADSIDEPART."; break;
		case ENUM_ROADWAYPLATEAU:	stream << ".ROADWAYPLATEAU."; break;
		case ENUM_ROUNDABOUT:	stream << ".ROUNDABOUT."; break;
		case ENUM_SHOULDER:	stream << ".SHOULDER."; break;
		case ENUM_SIDEWALK:	stream << ".SIDEWALK."; break;
		case ENUM_SOFTSHOULDER:	stream << ".SOFTSHOULDER."; break;
		case ENUM_TOLLPLAZA:	stream << ".TOLLPLAZA."; break;
		case ENUM_TRAFFICISLAND:	stream << ".TRAFFICISLAND."; break;
		case ENUM_TRAFFICLANE:	stream << ".TRAFFICLANE."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcRoadPartTypeEnum> IFC4X3::IfcRoadPartTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcRoadPartTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcRoadPartTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcRoadPartTypeEnum>(); }
	shared_ptr<IfcRoadPartTypeEnum> type_object( new IfcRoadPartTypeEnum() );
	if( std_iequal( arg, ".BICYCLECROSSING." ) )
	{
		type_object->m_enum = IfcRoadPartTypeEnum::ENUM_BICYCLECROSSING;
	}
	else if( std_iequal( arg, ".BUS_STOP." ) )
	{
		type_object->m_enum = IfcRoadPartTypeEnum::ENUM_BUS_STOP;
	}
	else if( std_iequal( arg, ".CARRIAGEWAY." ) )
	{
		type_object->m_enum = IfcRoadPartTypeEnum::ENUM_CARRIAGEWAY;
	}
	else if( std_iequal( arg, ".CENTRALISLAND." ) )
	{
		type_object->m_enum = IfcRoadPartTypeEnum::ENUM_CENTRALISLAND;
	}
	else if( std_iequal( arg, ".CENTRALRESERVE." ) )
	{
		type_object->m_enum = IfcRoadPartTypeEnum::ENUM_CENTRALRESERVE;
	}
	else if( std_iequal( arg, ".HARDSHOULDER." ) )
	{
		type_object->m_enum = IfcRoadPartTypeEnum::ENUM_HARDSHOULDER;
	}
	else if( std_iequal( arg, ".INTERSECTION." ) )
	{
		type_object->m_enum = IfcRoadPartTypeEnum::ENUM_INTERSECTION;
	}
	else if( std_iequal( arg, ".LAYBY." ) )
	{
		type_object->m_enum = IfcRoadPartTypeEnum::ENUM_LAYBY;
	}
	else if( std_iequal( arg, ".PARKINGBAY." ) )
	{
		type_object->m_enum = IfcRoadPartTypeEnum::ENUM_PARKINGBAY;
	}
	else if( std_iequal( arg, ".PASSINGBAY." ) )
	{
		type_object->m_enum = IfcRoadPartTypeEnum::ENUM_PASSINGBAY;
	}
	else if( std_iequal( arg, ".PEDESTRIAN_CROSSING." ) )
	{
		type_object->m_enum = IfcRoadPartTypeEnum::ENUM_PEDESTRIAN_CROSSING;
	}
	else if( std_iequal( arg, ".RAILWAYCROSSING." ) )
	{
		type_object->m_enum = IfcRoadPartTypeEnum::ENUM_RAILWAYCROSSING;
	}
	else if( std_iequal( arg, ".REFUGEISLAND." ) )
	{
		type_object->m_enum = IfcRoadPartTypeEnum::ENUM_REFUGEISLAND;
	}
	else if( std_iequal( arg, ".ROADSEGMENT." ) )
	{
		type_object->m_enum = IfcRoadPartTypeEnum::ENUM_ROADSEGMENT;
	}
	else if( std_iequal( arg, ".ROADSIDE." ) )
	{
		type_object->m_enum = IfcRoadPartTypeEnum::ENUM_ROADSIDE;
	}
	else if( std_iequal( arg, ".ROADSIDEPART." ) )
	{
		type_object->m_enum = IfcRoadPartTypeEnum::ENUM_ROADSIDEPART;
	}
	else if( std_iequal( arg, ".ROADWAYPLATEAU." ) )
	{
		type_object->m_enum = IfcRoadPartTypeEnum::ENUM_ROADWAYPLATEAU;
	}
	else if( std_iequal( arg, ".ROUNDABOUT." ) )
	{
		type_object->m_enum = IfcRoadPartTypeEnum::ENUM_ROUNDABOUT;
	}
	else if( std_iequal( arg, ".SHOULDER." ) )
	{
		type_object->m_enum = IfcRoadPartTypeEnum::ENUM_SHOULDER;
	}
	else if( std_iequal( arg, ".SIDEWALK." ) )
	{
		type_object->m_enum = IfcRoadPartTypeEnum::ENUM_SIDEWALK;
	}
	else if( std_iequal( arg, ".SOFTSHOULDER." ) )
	{
		type_object->m_enum = IfcRoadPartTypeEnum::ENUM_SOFTSHOULDER;
	}
	else if( std_iequal( arg, ".TOLLPLAZA." ) )
	{
		type_object->m_enum = IfcRoadPartTypeEnum::ENUM_TOLLPLAZA;
	}
	else if( std_iequal( arg, ".TRAFFICISLAND." ) )
	{
		type_object->m_enum = IfcRoadPartTypeEnum::ENUM_TRAFFICISLAND;
	}
	else if( std_iequal( arg, ".TRAFFICLANE." ) )
	{
		type_object->m_enum = IfcRoadPartTypeEnum::ENUM_TRAFFICLANE;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcRoadPartTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcRoadPartTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
