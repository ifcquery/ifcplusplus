/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcSensorTypeEnum.h"

// TYPE IfcSensorTypeEnum = ENUMERATION OF	(CO2SENSOR	,CONDUCTANCESENSOR	,CONTACTSENSOR	,COSENSOR	,EARTHQUAKESENSOR	,FIRESENSOR	,FLOWSENSOR	,FOREIGNOBJECTDETECTIONSENSOR	,FROSTSENSOR	,GASSENSOR	,HEATSENSOR	,HUMIDITYSENSOR	,IDENTIFIERSENSOR	,IONCONCENTRATIONSENSOR	,LEVELSENSOR	,LIGHTSENSOR	,MOISTURESENSOR	,MOVEMENTSENSOR	,OBSTACLESENSOR	,PHSENSOR	,PRESSURESENSOR	,RADIATIONSENSOR	,RADIOACTIVITYSENSOR	,RAINSENSOR	,SMOKESENSOR	,SNOWDEPTHSENSOR	,SOUNDSENSOR	,TEMPERATURESENSOR	,TRAINSENSOR	,TURNOUTCLOSURESENSOR	,WHEELSENSOR	,WINDSENSOR	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcSensorTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCSENSORTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_CO2SENSOR:	stream << ".CO2SENSOR."; break;
		case ENUM_CONDUCTANCESENSOR:	stream << ".CONDUCTANCESENSOR."; break;
		case ENUM_CONTACTSENSOR:	stream << ".CONTACTSENSOR."; break;
		case ENUM_COSENSOR:	stream << ".COSENSOR."; break;
		case ENUM_EARTHQUAKESENSOR:	stream << ".EARTHQUAKESENSOR."; break;
		case ENUM_FIRESENSOR:	stream << ".FIRESENSOR."; break;
		case ENUM_FLOWSENSOR:	stream << ".FLOWSENSOR."; break;
		case ENUM_FOREIGNOBJECTDETECTIONSENSOR:	stream << ".FOREIGNOBJECTDETECTIONSENSOR."; break;
		case ENUM_FROSTSENSOR:	stream << ".FROSTSENSOR."; break;
		case ENUM_GASSENSOR:	stream << ".GASSENSOR."; break;
		case ENUM_HEATSENSOR:	stream << ".HEATSENSOR."; break;
		case ENUM_HUMIDITYSENSOR:	stream << ".HUMIDITYSENSOR."; break;
		case ENUM_IDENTIFIERSENSOR:	stream << ".IDENTIFIERSENSOR."; break;
		case ENUM_IONCONCENTRATIONSENSOR:	stream << ".IONCONCENTRATIONSENSOR."; break;
		case ENUM_LEVELSENSOR:	stream << ".LEVELSENSOR."; break;
		case ENUM_LIGHTSENSOR:	stream << ".LIGHTSENSOR."; break;
		case ENUM_MOISTURESENSOR:	stream << ".MOISTURESENSOR."; break;
		case ENUM_MOVEMENTSENSOR:	stream << ".MOVEMENTSENSOR."; break;
		case ENUM_OBSTACLESENSOR:	stream << ".OBSTACLESENSOR."; break;
		case ENUM_PHSENSOR:	stream << ".PHSENSOR."; break;
		case ENUM_PRESSURESENSOR:	stream << ".PRESSURESENSOR."; break;
		case ENUM_RADIATIONSENSOR:	stream << ".RADIATIONSENSOR."; break;
		case ENUM_RADIOACTIVITYSENSOR:	stream << ".RADIOACTIVITYSENSOR."; break;
		case ENUM_RAINSENSOR:	stream << ".RAINSENSOR."; break;
		case ENUM_SMOKESENSOR:	stream << ".SMOKESENSOR."; break;
		case ENUM_SNOWDEPTHSENSOR:	stream << ".SNOWDEPTHSENSOR."; break;
		case ENUM_SOUNDSENSOR:	stream << ".SOUNDSENSOR."; break;
		case ENUM_TEMPERATURESENSOR:	stream << ".TEMPERATURESENSOR."; break;
		case ENUM_TRAINSENSOR:	stream << ".TRAINSENSOR."; break;
		case ENUM_TURNOUTCLOSURESENSOR:	stream << ".TURNOUTCLOSURESENSOR."; break;
		case ENUM_WHEELSENSOR:	stream << ".WHEELSENSOR."; break;
		case ENUM_WINDSENSOR:	stream << ".WINDSENSOR."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcSensorTypeEnum> IFC4X3::IfcSensorTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcSensorTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcSensorTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcSensorTypeEnum>(); }
	shared_ptr<IfcSensorTypeEnum> type_object( new IfcSensorTypeEnum() );
	if( std_iequal( arg, ".CO2SENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_CO2SENSOR;
	}
	else if( std_iequal( arg, ".CONDUCTANCESENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_CONDUCTANCESENSOR;
	}
	else if( std_iequal( arg, ".CONTACTSENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_CONTACTSENSOR;
	}
	else if( std_iequal( arg, ".COSENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_COSENSOR;
	}
	else if( std_iequal( arg, ".EARTHQUAKESENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_EARTHQUAKESENSOR;
	}
	else if( std_iequal( arg, ".FIRESENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_FIRESENSOR;
	}
	else if( std_iequal( arg, ".FLOWSENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_FLOWSENSOR;
	}
	else if( std_iequal( arg, ".FOREIGNOBJECTDETECTIONSENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_FOREIGNOBJECTDETECTIONSENSOR;
	}
	else if( std_iequal( arg, ".FROSTSENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_FROSTSENSOR;
	}
	else if( std_iequal( arg, ".GASSENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_GASSENSOR;
	}
	else if( std_iequal( arg, ".HEATSENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_HEATSENSOR;
	}
	else if( std_iequal( arg, ".HUMIDITYSENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_HUMIDITYSENSOR;
	}
	else if( std_iequal( arg, ".IDENTIFIERSENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_IDENTIFIERSENSOR;
	}
	else if( std_iequal( arg, ".IONCONCENTRATIONSENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_IONCONCENTRATIONSENSOR;
	}
	else if( std_iequal( arg, ".LEVELSENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_LEVELSENSOR;
	}
	else if( std_iequal( arg, ".LIGHTSENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_LIGHTSENSOR;
	}
	else if( std_iequal( arg, ".MOISTURESENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_MOISTURESENSOR;
	}
	else if( std_iequal( arg, ".MOVEMENTSENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_MOVEMENTSENSOR;
	}
	else if( std_iequal( arg, ".OBSTACLESENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_OBSTACLESENSOR;
	}
	else if( std_iequal( arg, ".PHSENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_PHSENSOR;
	}
	else if( std_iequal( arg, ".PRESSURESENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_PRESSURESENSOR;
	}
	else if( std_iequal( arg, ".RADIATIONSENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_RADIATIONSENSOR;
	}
	else if( std_iequal( arg, ".RADIOACTIVITYSENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_RADIOACTIVITYSENSOR;
	}
	else if( std_iequal( arg, ".RAINSENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_RAINSENSOR;
	}
	else if( std_iequal( arg, ".SMOKESENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_SMOKESENSOR;
	}
	else if( std_iequal( arg, ".SNOWDEPTHSENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_SNOWDEPTHSENSOR;
	}
	else if( std_iequal( arg, ".SOUNDSENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_SOUNDSENSOR;
	}
	else if( std_iequal( arg, ".TEMPERATURESENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_TEMPERATURESENSOR;
	}
	else if( std_iequal( arg, ".TRAINSENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_TRAINSENSOR;
	}
	else if( std_iequal( arg, ".TURNOUTCLOSURESENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_TURNOUTCLOSURESENSOR;
	}
	else if( std_iequal( arg, ".WHEELSENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_WHEELSENSOR;
	}
	else if( std_iequal( arg, ".WINDSENSOR." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_WINDSENSOR;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcSensorTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
