/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcSequenceEnum.h"

// TYPE IfcSequenceEnum = ENUMERATION OF	(FINISH_FINISH	,FINISH_START	,START_FINISH	,START_START	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcSequenceEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCSEQUENCEENUM("; }
	switch( m_enum )
	{
		case ENUM_FINISH_FINISH:	stream << ".FINISH_FINISH."; break;
		case ENUM_FINISH_START:	stream << ".FINISH_START."; break;
		case ENUM_START_FINISH:	stream << ".START_FINISH."; break;
		case ENUM_START_START:	stream << ".START_START."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcSequenceEnum> IFC4X3::IfcSequenceEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcSequenceEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcSequenceEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcSequenceEnum>(); }
	shared_ptr<IfcSequenceEnum> type_object( new IfcSequenceEnum() );
	if( std_iequal( arg, ".FINISH_FINISH." ) )
	{
		type_object->m_enum = IfcSequenceEnum::ENUM_FINISH_FINISH;
	}
	else if( std_iequal( arg, ".FINISH_START." ) )
	{
		type_object->m_enum = IfcSequenceEnum::ENUM_FINISH_START;
	}
	else if( std_iequal( arg, ".START_FINISH." ) )
	{
		type_object->m_enum = IfcSequenceEnum::ENUM_START_FINISH;
	}
	else if( std_iequal( arg, ".START_START." ) )
	{
		type_object->m_enum = IfcSequenceEnum::ENUM_START_START;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcSequenceEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcSequenceEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
