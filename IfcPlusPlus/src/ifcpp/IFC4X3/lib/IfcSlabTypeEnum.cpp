/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcSlabTypeEnum.h"

// TYPE IfcSlabTypeEnum = ENUMERATION OF	(APPROACH_SLAB	,BASESLAB	,FLOOR	,LANDING	,PAVING	,ROOF	,SIDEWALK	,TRACKSLAB	,WEARING	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcSlabTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCSLABTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_APPROACH_SLAB:	stream << ".APPROACH_SLAB."; break;
		case ENUM_BASESLAB:	stream << ".BASESLAB."; break;
		case ENUM_FLOOR:	stream << ".FLOOR."; break;
		case ENUM_LANDING:	stream << ".LANDING."; break;
		case ENUM_PAVING:	stream << ".PAVING."; break;
		case ENUM_ROOF:	stream << ".ROOF."; break;
		case ENUM_SIDEWALK:	stream << ".SIDEWALK."; break;
		case ENUM_TRACKSLAB:	stream << ".TRACKSLAB."; break;
		case ENUM_WEARING:	stream << ".WEARING."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcSlabTypeEnum> IFC4X3::IfcSlabTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcSlabTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcSlabTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcSlabTypeEnum>(); }
	shared_ptr<IfcSlabTypeEnum> type_object( new IfcSlabTypeEnum() );
	if( std_iequal( arg, ".APPROACH_SLAB." ) )
	{
		type_object->m_enum = IfcSlabTypeEnum::ENUM_APPROACH_SLAB;
	}
	else if( std_iequal( arg, ".BASESLAB." ) )
	{
		type_object->m_enum = IfcSlabTypeEnum::ENUM_BASESLAB;
	}
	else if( std_iequal( arg, ".FLOOR." ) )
	{
		type_object->m_enum = IfcSlabTypeEnum::ENUM_FLOOR;
	}
	else if( std_iequal( arg, ".LANDING." ) )
	{
		type_object->m_enum = IfcSlabTypeEnum::ENUM_LANDING;
	}
	else if( std_iequal( arg, ".PAVING." ) )
	{
		type_object->m_enum = IfcSlabTypeEnum::ENUM_PAVING;
	}
	else if( std_iequal( arg, ".ROOF." ) )
	{
		type_object->m_enum = IfcSlabTypeEnum::ENUM_ROOF;
	}
	else if( std_iequal( arg, ".SIDEWALK." ) )
	{
		type_object->m_enum = IfcSlabTypeEnum::ENUM_SIDEWALK;
	}
	else if( std_iequal( arg, ".TRACKSLAB." ) )
	{
		type_object->m_enum = IfcSlabTypeEnum::ENUM_TRACKSLAB;
	}
	else if( std_iequal( arg, ".WEARING." ) )
	{
		type_object->m_enum = IfcSlabTypeEnum::ENUM_WEARING;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcSlabTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcSlabTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
