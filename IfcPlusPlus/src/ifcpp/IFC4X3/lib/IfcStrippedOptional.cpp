/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcStrippedOptional.h"

// TYPE IfcStrippedOptional = BOOLEAN;
IFC4X3::IfcStrippedOptional::IfcStrippedOptional( bool value ) { m_value = value; }
void IFC4X3::IfcStrippedOptional::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCSTRIPPEDOPTIONAL("; }
	if( m_value == false )
	{
		stream << ".F.";
	}
	else if( m_value == true )
	{
		stream << ".T.";
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcStrippedOptional> IFC4X3::IfcStrippedOptional::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcStrippedOptional>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcStrippedOptional>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcStrippedOptional>(); }
	shared_ptr<IfcStrippedOptional> type_object( new IfcStrippedOptional() );
	readBool( arg, type_object->m_value );
	return type_object;
}
