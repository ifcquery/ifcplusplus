/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcLabel.h"
#include "ifcpp/IFC4X3/include/IfcLengthMeasure.h"
#include "ifcpp/IFC4X3/include/IfcStructuralLoadConfiguration.h"
#include "ifcpp/IFC4X3/include/IfcStructuralLoadOrResult.h"

// ENTITY IfcStructuralLoadConfiguration 
IFC4X3::IfcStructuralLoadConfiguration::IfcStructuralLoadConfiguration( int tag ) { m_tag = tag; }
void IFC4X3::IfcStructuralLoadConfiguration::getStepLine( std::stringstream& stream, size_t precision ) const
{
	stream << "#" << m_tag << "=IFCSTRUCTURALLOADCONFIGURATION" << "(";
	if( m_Name ) { m_Name->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	writeEntityList( stream, m_Values );
	stream << ",";
	writeTypeOfRealList2D( stream, m_Locations, true, precision );
	stream << ");";
}
void IFC4X3::IfcStructuralLoadConfiguration::getStepParameter( std::stringstream& stream, bool /*is_select_type*/, size_t /*precision*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcStructuralLoadConfiguration::readStepArguments( const std::vector<std::string>& args, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	const size_t num_args = args.size();
	if( num_args > 0 ){m_Name = IfcLabel::createObjectFromSTEP( args[0], map, errorStream, entityIdNotFound );}
	if( num_args > 1 ){readEntityReferenceList( args[1], m_Values, map, errorStream, entityIdNotFound );}
	if( num_args > 2 ){readTypeOfRealList2D( args[2], m_Locations );}
	if( num_args != 3 ){ errorStream << "Wrong parameter count for entity IfcStructuralLoadConfiguration, expecting 3, having " << num_args << ". Entity ID: " << m_tag << std::endl; }
}
void IFC4X3::IfcStructuralLoadConfiguration::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IFC4X3::IfcStructuralLoad::getAttributes( vec_attributes );
	shared_ptr<AttributeObjectVector> Values_vec_object( new AttributeObjectVector() );
	std::copy( m_Values.begin(), m_Values.end(), std::back_inserter( Values_vec_object->m_vec ) );
	vec_attributes.emplace_back( std::make_pair( "Values", Values_vec_object ) );
	shared_ptr<AttributeObjectVector> Locations_vector( new AttributeObjectVector() );
	vec_attributes.emplace_back( std::make_pair( "Locations", Locations_vector ) );
	for( size_t ii=0; ii<m_Locations.size(); ++ii )
	{
		const std::vector<shared_ptr<IfcLengthMeasure> >& vec_ii = m_Locations[ii];
		shared_ptr<AttributeObjectVector> inner_vector( new AttributeObjectVector() );
		Locations_vector->m_vec.push_back( inner_vector );
		std::copy(vec_ii.begin(), vec_ii.end(), std::back_inserter(inner_vector->m_vec));
	}
}
void IFC4X3::IfcStructuralLoadConfiguration::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IFC4X3::IfcStructuralLoad::getAttributesInverse( vec_attributes_inverse );
}
void IFC4X3::IfcStructuralLoadConfiguration::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcStructuralLoad::setInverseCounterparts( ptr_self_entity );
}
void IFC4X3::IfcStructuralLoadConfiguration::unlinkFromInverseCounterparts()
{
	IfcStructuralLoad::unlinkFromInverseCounterparts();
}
