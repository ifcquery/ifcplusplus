/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcSurfaceStyleWithTextures.h"
#include "ifcpp/IFC4X3/include/IfcSurfaceTexture.h"

// ENTITY IfcSurfaceStyleWithTextures 
IFC4X3::IfcSurfaceStyleWithTextures::IfcSurfaceStyleWithTextures( int tag ) { m_tag = tag; }
void IFC4X3::IfcSurfaceStyleWithTextures::getStepLine( std::stringstream& stream, size_t precision ) const
{
	stream << "#" << m_tag << "=IFCSURFACESTYLEWITHTEXTURES" << "(";
	writeEntityList( stream, m_Textures );
	stream << ");";
}
void IFC4X3::IfcSurfaceStyleWithTextures::getStepParameter( std::stringstream& stream, bool /*is_select_type*/, size_t /*precision*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcSurfaceStyleWithTextures::readStepArguments( const std::vector<std::string>& args, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	const size_t num_args = args.size();
	if( num_args > 0 ){readEntityReferenceList( args[0], m_Textures, map, errorStream, entityIdNotFound );}
	if( num_args != 1 ){ errorStream << "Wrong parameter count for entity IfcSurfaceStyleWithTextures, expecting 1, having " << num_args << ". Entity ID: " << m_tag << std::endl; }
}
void IFC4X3::IfcSurfaceStyleWithTextures::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IFC4X3::IfcPresentationItem::getAttributes( vec_attributes );
	shared_ptr<AttributeObjectVector> Textures_vec_object( new AttributeObjectVector() );
	std::copy( m_Textures.begin(), m_Textures.end(), std::back_inserter( Textures_vec_object->m_vec ) );
	vec_attributes.emplace_back( std::make_pair( "Textures", Textures_vec_object ) );
}
void IFC4X3::IfcSurfaceStyleWithTextures::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IFC4X3::IfcPresentationItem::getAttributesInverse( vec_attributes_inverse );
}
void IFC4X3::IfcSurfaceStyleWithTextures::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcPresentationItem::setInverseCounterparts( ptr_self_entity );
	shared_ptr<IfcSurfaceStyleWithTextures> ptr_self = dynamic_pointer_cast<IfcSurfaceStyleWithTextures>( ptr_self_entity );
	if( !ptr_self ) { throw BuildingException( "IfcSurfaceStyleWithTextures::setInverseCounterparts: type mismatch" ); }
	for( size_t i=0; i<m_Textures.size(); ++i )
	{
		if( m_Textures[i] )
		{
			m_Textures[i]->m_UsedInStyles_inverse.emplace_back( ptr_self );
		}
	}
}
void IFC4X3::IfcSurfaceStyleWithTextures::unlinkFromInverseCounterparts()
{
	IfcPresentationItem::unlinkFromInverseCounterparts();
	for( size_t i=0; i<m_Textures.size(); ++i )
	{
		if( m_Textures[i] )
		{
			std::vector<weak_ptr<IfcSurfaceStyleWithTextures> >& UsedInStyles_inverse = m_Textures[i]->m_UsedInStyles_inverse;
			for( auto it_UsedInStyles_inverse = UsedInStyles_inverse.begin(); it_UsedInStyles_inverse != UsedInStyles_inverse.end(); )
			{
				weak_ptr<IfcSurfaceStyleWithTextures> self_candidate_weak = *it_UsedInStyles_inverse;
				if( self_candidate_weak.expired() )
				{
					++it_UsedInStyles_inverse;
					continue;
				}
				shared_ptr<IfcSurfaceStyleWithTextures> self_candidate( *it_UsedInStyles_inverse );
				if( self_candidate.get() == this )
				{
					it_UsedInStyles_inverse= UsedInStyles_inverse.erase( it_UsedInStyles_inverse );
				}
				else
				{
					++it_UsedInStyles_inverse;
				}
			}
		}
	}
}
