/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcSwitchingDeviceTypeEnum.h"

// TYPE IfcSwitchingDeviceTypeEnum = ENUMERATION OF	(CONTACTOR	,DIMMERSWITCH	,EMERGENCYSTOP	,KEYPAD	,MOMENTARYSWITCH	,RELAY	,SELECTORSWITCH	,STARTER	,START_AND_STOP_EQUIPMENT	,SWITCHDISCONNECTOR	,TOGGLESWITCH	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcSwitchingDeviceTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCSWITCHINGDEVICETYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_CONTACTOR:	stream << ".CONTACTOR."; break;
		case ENUM_DIMMERSWITCH:	stream << ".DIMMERSWITCH."; break;
		case ENUM_EMERGENCYSTOP:	stream << ".EMERGENCYSTOP."; break;
		case ENUM_KEYPAD:	stream << ".KEYPAD."; break;
		case ENUM_MOMENTARYSWITCH:	stream << ".MOMENTARYSWITCH."; break;
		case ENUM_RELAY:	stream << ".RELAY."; break;
		case ENUM_SELECTORSWITCH:	stream << ".SELECTORSWITCH."; break;
		case ENUM_STARTER:	stream << ".STARTER."; break;
		case ENUM_START_AND_STOP_EQUIPMENT:	stream << ".START_AND_STOP_EQUIPMENT."; break;
		case ENUM_SWITCHDISCONNECTOR:	stream << ".SWITCHDISCONNECTOR."; break;
		case ENUM_TOGGLESWITCH:	stream << ".TOGGLESWITCH."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcSwitchingDeviceTypeEnum> IFC4X3::IfcSwitchingDeviceTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcSwitchingDeviceTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcSwitchingDeviceTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcSwitchingDeviceTypeEnum>(); }
	shared_ptr<IfcSwitchingDeviceTypeEnum> type_object( new IfcSwitchingDeviceTypeEnum() );
	if( std_iequal( arg, ".CONTACTOR." ) )
	{
		type_object->m_enum = IfcSwitchingDeviceTypeEnum::ENUM_CONTACTOR;
	}
	else if( std_iequal( arg, ".DIMMERSWITCH." ) )
	{
		type_object->m_enum = IfcSwitchingDeviceTypeEnum::ENUM_DIMMERSWITCH;
	}
	else if( std_iequal( arg, ".EMERGENCYSTOP." ) )
	{
		type_object->m_enum = IfcSwitchingDeviceTypeEnum::ENUM_EMERGENCYSTOP;
	}
	else if( std_iequal( arg, ".KEYPAD." ) )
	{
		type_object->m_enum = IfcSwitchingDeviceTypeEnum::ENUM_KEYPAD;
	}
	else if( std_iequal( arg, ".MOMENTARYSWITCH." ) )
	{
		type_object->m_enum = IfcSwitchingDeviceTypeEnum::ENUM_MOMENTARYSWITCH;
	}
	else if( std_iequal( arg, ".RELAY." ) )
	{
		type_object->m_enum = IfcSwitchingDeviceTypeEnum::ENUM_RELAY;
	}
	else if( std_iequal( arg, ".SELECTORSWITCH." ) )
	{
		type_object->m_enum = IfcSwitchingDeviceTypeEnum::ENUM_SELECTORSWITCH;
	}
	else if( std_iequal( arg, ".STARTER." ) )
	{
		type_object->m_enum = IfcSwitchingDeviceTypeEnum::ENUM_STARTER;
	}
	else if( std_iequal( arg, ".START_AND_STOP_EQUIPMENT." ) )
	{
		type_object->m_enum = IfcSwitchingDeviceTypeEnum::ENUM_START_AND_STOP_EQUIPMENT;
	}
	else if( std_iequal( arg, ".SWITCHDISCONNECTOR." ) )
	{
		type_object->m_enum = IfcSwitchingDeviceTypeEnum::ENUM_SWITCHDISCONNECTOR;
	}
	else if( std_iequal( arg, ".TOGGLESWITCH." ) )
	{
		type_object->m_enum = IfcSwitchingDeviceTypeEnum::ENUM_TOGGLESWITCH;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcSwitchingDeviceTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcSwitchingDeviceTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
