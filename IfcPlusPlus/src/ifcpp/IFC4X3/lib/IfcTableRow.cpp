/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcBoolean.h"
#include "ifcpp/IFC4X3/include/IfcTableRow.h"
#include "ifcpp/IFC4X3/include/IfcValue.h"

// ENTITY IfcTableRow 
IFC4X3::IfcTableRow::IfcTableRow( int tag ) { m_tag = tag; }
void IFC4X3::IfcTableRow::getStepLine( std::stringstream& stream, size_t precision ) const
{
	stream << "#" << m_tag << "=IFCTABLEROW" << "(";
	if( m_RowCells.size() > 0 )
	{
		stream << "(";
		for( size_t ii = 0; ii < m_RowCells.size(); ++ii )
		{
			if( ii > 0 )
			{
				stream << ",";
			}
			const shared_ptr<IfcValue>& type_object = m_RowCells[ii];
			if( type_object )
			{
				type_object->getStepParameter( stream, true, precision );
			}
			else
			{
				stream << "$";
			}
		}
		stream << ")";
	}
	else { stream << "$"; }
	stream << ",";
	if( m_IsHeading ) { m_IsHeading->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcTableRow::getStepParameter( std::stringstream& stream, bool /*is_select_type*/, size_t /*precision*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcTableRow::readStepArguments( const std::vector<std::string>& args, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	const size_t num_args = args.size();
	if( num_args > 0 ){readSelectList( args[0], m_RowCells, map, errorStream, entityIdNotFound );}
	if( num_args > 1 ){m_IsHeading = IfcBoolean::createObjectFromSTEP( args[1], map, errorStream, entityIdNotFound );}
	if( num_args != 2 ){ errorStream << "Wrong parameter count for entity IfcTableRow, expecting 2, having " << num_args << ". Entity ID: " << m_tag << std::endl; }
}
void IFC4X3::IfcTableRow::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	shared_ptr<AttributeObjectVector> RowCells_vec_object( new AttributeObjectVector() );
	std::copy( m_RowCells.begin(), m_RowCells.end(), std::back_inserter( RowCells_vec_object->m_vec ) );
	vec_attributes.emplace_back( std::make_pair( "RowCells", RowCells_vec_object ) );
	vec_attributes.emplace_back( std::make_pair( "IsHeading", m_IsHeading ) );
}
void IFC4X3::IfcTableRow::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
}
void IFC4X3::IfcTableRow::setInverseCounterparts( shared_ptr<BuildingEntity> )
{
}
void IFC4X3::IfcTableRow::unlinkFromInverseCounterparts()
{
}
