/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcTankTypeEnum.h"

// TYPE IfcTankTypeEnum = ENUMERATION OF	(BASIN	,BREAKPRESSURE	,EXPANSION	,FEEDANDEXPANSION	,OILRETENTIONTRAY	,PRESSUREVESSEL	,STORAGE	,VESSEL	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcTankTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCTANKTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_BASIN:	stream << ".BASIN."; break;
		case ENUM_BREAKPRESSURE:	stream << ".BREAKPRESSURE."; break;
		case ENUM_EXPANSION:	stream << ".EXPANSION."; break;
		case ENUM_FEEDANDEXPANSION:	stream << ".FEEDANDEXPANSION."; break;
		case ENUM_OILRETENTIONTRAY:	stream << ".OILRETENTIONTRAY."; break;
		case ENUM_PRESSUREVESSEL:	stream << ".PRESSUREVESSEL."; break;
		case ENUM_STORAGE:	stream << ".STORAGE."; break;
		case ENUM_VESSEL:	stream << ".VESSEL."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcTankTypeEnum> IFC4X3::IfcTankTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcTankTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcTankTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcTankTypeEnum>(); }
	shared_ptr<IfcTankTypeEnum> type_object( new IfcTankTypeEnum() );
	if( std_iequal( arg, ".BASIN." ) )
	{
		type_object->m_enum = IfcTankTypeEnum::ENUM_BASIN;
	}
	else if( std_iequal( arg, ".BREAKPRESSURE." ) )
	{
		type_object->m_enum = IfcTankTypeEnum::ENUM_BREAKPRESSURE;
	}
	else if( std_iequal( arg, ".EXPANSION." ) )
	{
		type_object->m_enum = IfcTankTypeEnum::ENUM_EXPANSION;
	}
	else if( std_iequal( arg, ".FEEDANDEXPANSION." ) )
	{
		type_object->m_enum = IfcTankTypeEnum::ENUM_FEEDANDEXPANSION;
	}
	else if( std_iequal( arg, ".OILRETENTIONTRAY." ) )
	{
		type_object->m_enum = IfcTankTypeEnum::ENUM_OILRETENTIONTRAY;
	}
	else if( std_iequal( arg, ".PRESSUREVESSEL." ) )
	{
		type_object->m_enum = IfcTankTypeEnum::ENUM_PRESSUREVESSEL;
	}
	else if( std_iequal( arg, ".STORAGE." ) )
	{
		type_object->m_enum = IfcTankTypeEnum::ENUM_STORAGE;
	}
	else if( std_iequal( arg, ".VESSEL." ) )
	{
		type_object->m_enum = IfcTankTypeEnum::ENUM_VESSEL;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcTankTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcTankTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
