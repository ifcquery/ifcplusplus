/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcTaskTypeEnum.h"

// TYPE IfcTaskTypeEnum = ENUMERATION OF	(ADJUSTMENT	,ATTENDANCE	,CALIBRATION	,CONSTRUCTION	,DEMOLITION	,DISMANTLE	,DISPOSAL	,EMERGENCY	,INSPECTION	,INSTALLATION	,LOGISTIC	,MAINTENANCE	,MOVE	,OPERATION	,REMOVAL	,RENOVATION	,SAFETY	,SHUTDOWN	,STARTUP	,TESTING	,TROUBLESHOOTING	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcTaskTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCTASKTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_ADJUSTMENT:	stream << ".ADJUSTMENT."; break;
		case ENUM_ATTENDANCE:	stream << ".ATTENDANCE."; break;
		case ENUM_CALIBRATION:	stream << ".CALIBRATION."; break;
		case ENUM_CONSTRUCTION:	stream << ".CONSTRUCTION."; break;
		case ENUM_DEMOLITION:	stream << ".DEMOLITION."; break;
		case ENUM_DISMANTLE:	stream << ".DISMANTLE."; break;
		case ENUM_DISPOSAL:	stream << ".DISPOSAL."; break;
		case ENUM_EMERGENCY:	stream << ".EMERGENCY."; break;
		case ENUM_INSPECTION:	stream << ".INSPECTION."; break;
		case ENUM_INSTALLATION:	stream << ".INSTALLATION."; break;
		case ENUM_LOGISTIC:	stream << ".LOGISTIC."; break;
		case ENUM_MAINTENANCE:	stream << ".MAINTENANCE."; break;
		case ENUM_MOVE:	stream << ".MOVE."; break;
		case ENUM_OPERATION:	stream << ".OPERATION."; break;
		case ENUM_REMOVAL:	stream << ".REMOVAL."; break;
		case ENUM_RENOVATION:	stream << ".RENOVATION."; break;
		case ENUM_SAFETY:	stream << ".SAFETY."; break;
		case ENUM_SHUTDOWN:	stream << ".SHUTDOWN."; break;
		case ENUM_STARTUP:	stream << ".STARTUP."; break;
		case ENUM_TESTING:	stream << ".TESTING."; break;
		case ENUM_TROUBLESHOOTING:	stream << ".TROUBLESHOOTING."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcTaskTypeEnum> IFC4X3::IfcTaskTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcTaskTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcTaskTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcTaskTypeEnum>(); }
	shared_ptr<IfcTaskTypeEnum> type_object( new IfcTaskTypeEnum() );
	if( std_iequal( arg, ".ADJUSTMENT." ) )
	{
		type_object->m_enum = IfcTaskTypeEnum::ENUM_ADJUSTMENT;
	}
	else if( std_iequal( arg, ".ATTENDANCE." ) )
	{
		type_object->m_enum = IfcTaskTypeEnum::ENUM_ATTENDANCE;
	}
	else if( std_iequal( arg, ".CALIBRATION." ) )
	{
		type_object->m_enum = IfcTaskTypeEnum::ENUM_CALIBRATION;
	}
	else if( std_iequal( arg, ".CONSTRUCTION." ) )
	{
		type_object->m_enum = IfcTaskTypeEnum::ENUM_CONSTRUCTION;
	}
	else if( std_iequal( arg, ".DEMOLITION." ) )
	{
		type_object->m_enum = IfcTaskTypeEnum::ENUM_DEMOLITION;
	}
	else if( std_iequal( arg, ".DISMANTLE." ) )
	{
		type_object->m_enum = IfcTaskTypeEnum::ENUM_DISMANTLE;
	}
	else if( std_iequal( arg, ".DISPOSAL." ) )
	{
		type_object->m_enum = IfcTaskTypeEnum::ENUM_DISPOSAL;
	}
	else if( std_iequal( arg, ".EMERGENCY." ) )
	{
		type_object->m_enum = IfcTaskTypeEnum::ENUM_EMERGENCY;
	}
	else if( std_iequal( arg, ".INSPECTION." ) )
	{
		type_object->m_enum = IfcTaskTypeEnum::ENUM_INSPECTION;
	}
	else if( std_iequal( arg, ".INSTALLATION." ) )
	{
		type_object->m_enum = IfcTaskTypeEnum::ENUM_INSTALLATION;
	}
	else if( std_iequal( arg, ".LOGISTIC." ) )
	{
		type_object->m_enum = IfcTaskTypeEnum::ENUM_LOGISTIC;
	}
	else if( std_iequal( arg, ".MAINTENANCE." ) )
	{
		type_object->m_enum = IfcTaskTypeEnum::ENUM_MAINTENANCE;
	}
	else if( std_iequal( arg, ".MOVE." ) )
	{
		type_object->m_enum = IfcTaskTypeEnum::ENUM_MOVE;
	}
	else if( std_iequal( arg, ".OPERATION." ) )
	{
		type_object->m_enum = IfcTaskTypeEnum::ENUM_OPERATION;
	}
	else if( std_iequal( arg, ".REMOVAL." ) )
	{
		type_object->m_enum = IfcTaskTypeEnum::ENUM_REMOVAL;
	}
	else if( std_iequal( arg, ".RENOVATION." ) )
	{
		type_object->m_enum = IfcTaskTypeEnum::ENUM_RENOVATION;
	}
	else if( std_iequal( arg, ".SAFETY." ) )
	{
		type_object->m_enum = IfcTaskTypeEnum::ENUM_SAFETY;
	}
	else if( std_iequal( arg, ".SHUTDOWN." ) )
	{
		type_object->m_enum = IfcTaskTypeEnum::ENUM_SHUTDOWN;
	}
	else if( std_iequal( arg, ".STARTUP." ) )
	{
		type_object->m_enum = IfcTaskTypeEnum::ENUM_STARTUP;
	}
	else if( std_iequal( arg, ".TESTING." ) )
	{
		type_object->m_enum = IfcTaskTypeEnum::ENUM_TESTING;
	}
	else if( std_iequal( arg, ".TROUBLESHOOTING." ) )
	{
		type_object->m_enum = IfcTaskTypeEnum::ENUM_TROUBLESHOOTING;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcTaskTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcTaskTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
