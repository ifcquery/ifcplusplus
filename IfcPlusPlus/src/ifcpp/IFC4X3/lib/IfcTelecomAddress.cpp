/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcAddressTypeEnum.h"
#include "ifcpp/IFC4X3/include/IfcLabel.h"
#include "ifcpp/IFC4X3/include/IfcOrganization.h"
#include "ifcpp/IFC4X3/include/IfcPerson.h"
#include "ifcpp/IFC4X3/include/IfcTelecomAddress.h"
#include "ifcpp/IFC4X3/include/IfcText.h"
#include "ifcpp/IFC4X3/include/IfcURIReference.h"

// ENTITY IfcTelecomAddress 
IFC4X3::IfcTelecomAddress::IfcTelecomAddress( int tag ) { m_tag = tag; }
void IFC4X3::IfcTelecomAddress::getStepLine( std::stringstream& stream, size_t precision ) const
{
	stream << "#" << m_tag << "=IFCTELECOMADDRESS" << "(";
	if( m_Purpose ) { m_Purpose->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_Description ) { m_Description->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_UserDefinedPurpose ) { m_UserDefinedPurpose->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_TelephoneNumbers.size() > 0 )
	{
		stream << "(";
		for( size_t ii = 0; ii < m_TelephoneNumbers.size(); ++ii )
		{
			if( ii > 0 )
			{
				stream << ",";
			}
			const shared_ptr<IfcLabel>& type_object = m_TelephoneNumbers[ii];
			if( type_object )
			{
				type_object->getStepParameter( stream, false, precision );
			}
			else
			{
				stream << "$";
			}
		}
		stream << ")";
	}
	else { stream << "$"; }
	stream << ",";
	if( m_FacsimileNumbers.size() > 0 )
	{
		stream << "(";
		for( size_t ii = 0; ii < m_FacsimileNumbers.size(); ++ii )
		{
			if( ii > 0 )
			{
				stream << ",";
			}
			const shared_ptr<IfcLabel>& type_object = m_FacsimileNumbers[ii];
			if( type_object )
			{
				type_object->getStepParameter( stream, false, precision );
			}
			else
			{
				stream << "$";
			}
		}
		stream << ")";
	}
	else { stream << "$"; }
	stream << ",";
	if( m_PagerNumber ) { m_PagerNumber->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_ElectronicMailAddresses.size() > 0 )
	{
		stream << "(";
		for( size_t ii = 0; ii < m_ElectronicMailAddresses.size(); ++ii )
		{
			if( ii > 0 )
			{
				stream << ",";
			}
			const shared_ptr<IfcLabel>& type_object = m_ElectronicMailAddresses[ii];
			if( type_object )
			{
				type_object->getStepParameter( stream, false, precision );
			}
			else
			{
				stream << "$";
			}
		}
		stream << ")";
	}
	else { stream << "$"; }
	stream << ",";
	if( m_WWWHomePageURL ) { m_WWWHomePageURL->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_MessagingIDs.size() > 0 )
	{
		stream << "(";
		for( size_t ii = 0; ii < m_MessagingIDs.size(); ++ii )
		{
			if( ii > 0 )
			{
				stream << ",";
			}
			const shared_ptr<IfcURIReference>& type_object = m_MessagingIDs[ii];
			if( type_object )
			{
				type_object->getStepParameter( stream, false, precision );
			}
			else
			{
				stream << "$";
			}
		}
		stream << ")";
	}
	else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcTelecomAddress::getStepParameter( std::stringstream& stream, bool /*is_select_type*/, size_t /*precision*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcTelecomAddress::readStepArguments( const std::vector<std::string>& args, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	const size_t num_args = args.size();
	if( num_args > 0 ){m_Purpose = IfcAddressTypeEnum::createObjectFromSTEP( args[0], map, errorStream, entityIdNotFound );}
	if( num_args > 1 ){m_Description = IfcText::createObjectFromSTEP( args[1], map, errorStream, entityIdNotFound );}
	if( num_args > 2 ){m_UserDefinedPurpose = IfcLabel::createObjectFromSTEP( args[2], map, errorStream, entityIdNotFound );}
	if( num_args > 3 ){readTypeOfStringList( args[3], m_TelephoneNumbers );}
	if( num_args > 4 ){readTypeOfStringList( args[4], m_FacsimileNumbers );}
	if( num_args > 5 ){m_PagerNumber = IfcLabel::createObjectFromSTEP( args[5], map, errorStream, entityIdNotFound );}
	if( num_args > 6 ){readTypeOfStringList( args[6], m_ElectronicMailAddresses );}
	if( num_args > 7 ){m_WWWHomePageURL = IfcURIReference::createObjectFromSTEP( args[7], map, errorStream, entityIdNotFound );}
	if( num_args > 8 ){readTypeOfStringList( args[8], m_MessagingIDs );}
	if( num_args != 9 ){ errorStream << "Wrong parameter count for entity IfcTelecomAddress, expecting 9, having " << num_args << ". Entity ID: " << m_tag << std::endl; }
}
void IFC4X3::IfcTelecomAddress::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IFC4X3::IfcAddress::getAttributes( vec_attributes );
	shared_ptr<AttributeObjectVector> TelephoneNumbers_vec_object( new AttributeObjectVector() );
	std::copy( m_TelephoneNumbers.begin(), m_TelephoneNumbers.end(), std::back_inserter( TelephoneNumbers_vec_object->m_vec ) );
	vec_attributes.emplace_back( std::make_pair( "TelephoneNumbers", TelephoneNumbers_vec_object ) );
	shared_ptr<AttributeObjectVector> FacsimileNumbers_vec_object( new AttributeObjectVector() );
	std::copy( m_FacsimileNumbers.begin(), m_FacsimileNumbers.end(), std::back_inserter( FacsimileNumbers_vec_object->m_vec ) );
	vec_attributes.emplace_back( std::make_pair( "FacsimileNumbers", FacsimileNumbers_vec_object ) );
	vec_attributes.emplace_back( std::make_pair( "PagerNumber", m_PagerNumber ) );
	shared_ptr<AttributeObjectVector> ElectronicMailAddresses_vec_object( new AttributeObjectVector() );
	std::copy( m_ElectronicMailAddresses.begin(), m_ElectronicMailAddresses.end(), std::back_inserter( ElectronicMailAddresses_vec_object->m_vec ) );
	vec_attributes.emplace_back( std::make_pair( "ElectronicMailAddresses", ElectronicMailAddresses_vec_object ) );
	vec_attributes.emplace_back( std::make_pair( "WWWHomePageURL", m_WWWHomePageURL ) );
	shared_ptr<AttributeObjectVector> MessagingIDs_vec_object( new AttributeObjectVector() );
	std::copy( m_MessagingIDs.begin(), m_MessagingIDs.end(), std::back_inserter( MessagingIDs_vec_object->m_vec ) );
	vec_attributes.emplace_back( std::make_pair( "MessagingIDs", MessagingIDs_vec_object ) );
}
void IFC4X3::IfcTelecomAddress::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IFC4X3::IfcAddress::getAttributesInverse( vec_attributes_inverse );
}
void IFC4X3::IfcTelecomAddress::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcAddress::setInverseCounterparts( ptr_self_entity );
}
void IFC4X3::IfcTelecomAddress::unlinkFromInverseCounterparts()
{
	IfcAddress::unlinkFromInverseCounterparts();
}
