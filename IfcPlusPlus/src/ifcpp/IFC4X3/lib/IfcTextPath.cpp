/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcTextPath.h"

// TYPE IfcTextPath = ENUMERATION OF	(DOWN	,LEFT	,RIGHT	,UP);
void IFC4X3::IfcTextPath::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCTEXTPATH("; }
	switch( m_enum )
	{
		case ENUM_DOWN:	stream << ".DOWN."; break;
		case ENUM_LEFT:	stream << ".LEFT."; break;
		case ENUM_RIGHT:	stream << ".RIGHT."; break;
		case ENUM_UP:	stream << ".UP."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcTextPath> IFC4X3::IfcTextPath::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcTextPath>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcTextPath>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcTextPath>(); }
	shared_ptr<IfcTextPath> type_object( new IfcTextPath() );
	if( std_iequal( arg, ".DOWN." ) )
	{
		type_object->m_enum = IfcTextPath::ENUM_DOWN;
	}
	else if( std_iequal( arg, ".LEFT." ) )
	{
		type_object->m_enum = IfcTextPath::ENUM_LEFT;
	}
	else if( std_iequal( arg, ".RIGHT." ) )
	{
		type_object->m_enum = IfcTextPath::ENUM_RIGHT;
	}
	else if( std_iequal( arg, ".UP." ) )
	{
		type_object->m_enum = IfcTextPath::ENUM_UP;
	}
	return type_object;
}
