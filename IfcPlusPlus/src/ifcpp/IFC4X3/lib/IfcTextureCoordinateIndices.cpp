/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcIndexedPolygonalFace.h"
#include "ifcpp/IFC4X3/include/IfcIndexedPolygonalTextureMap.h"
#include "ifcpp/IFC4X3/include/IfcPositiveInteger.h"
#include "ifcpp/IFC4X3/include/IfcTextureCoordinateIndices.h"

// ENTITY IfcTextureCoordinateIndices 
IFC4X3::IfcTextureCoordinateIndices::IfcTextureCoordinateIndices( int tag ) { m_tag = tag; }
void IFC4X3::IfcTextureCoordinateIndices::getStepLine( std::stringstream& stream, size_t precision ) const
{
	stream << "#" << m_tag << "=IFCTEXTURECOORDINATEINDICES" << "(";
	stream << "(";
	for( size_t ii = 0; ii < m_TexCoordIndex.size(); ++ii )
	{
		if( ii > 0 )
		{
			stream << ",";
		}
		const shared_ptr<IfcPositiveInteger>& type_object = m_TexCoordIndex[ii];
		if( type_object )
		{
			type_object->getStepParameter( stream, false, precision );
		}
		else
		{
			stream << "$";
		}
	}
	stream << ")";
	stream << ",";
	if( m_TexCoordsOf ) { stream << "#" << m_TexCoordsOf->m_tag; } else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcTextureCoordinateIndices::getStepParameter( std::stringstream& stream, bool /*is_select_type*/, size_t /*precision*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcTextureCoordinateIndices::readStepArguments( const std::vector<std::string>& args, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	const size_t num_args = args.size();
	if( num_args > 0 ){readTypeOfIntegerList( args[0], m_TexCoordIndex );}
	if( num_args > 1 ){readEntityReference( args[1], m_TexCoordsOf, map, errorStream, entityIdNotFound );}
	if( num_args != 2 ){ errorStream << "Wrong parameter count for entity IfcTextureCoordinateIndices, expecting 2, having " << num_args << ". Entity ID: " << m_tag << std::endl; }
}
void IFC4X3::IfcTextureCoordinateIndices::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	shared_ptr<AttributeObjectVector> TexCoordIndex_vec_object( new AttributeObjectVector() );
	std::copy( m_TexCoordIndex.begin(), m_TexCoordIndex.end(), std::back_inserter( TexCoordIndex_vec_object->m_vec ) );
	vec_attributes.emplace_back( std::make_pair( "TexCoordIndex", TexCoordIndex_vec_object ) );
	vec_attributes.emplace_back( std::make_pair( "TexCoordsOf", m_TexCoordsOf ) );
}
void IFC4X3::IfcTextureCoordinateIndices::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	vec_attributes_inverse.emplace_back( std::make_pair( "ToTexMap_inverse", shared_ptr<BuildingEntity>( m_ToTexMap_inverse ) ) );
}
void IFC4X3::IfcTextureCoordinateIndices::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	shared_ptr<IfcTextureCoordinateIndices> ptr_self = dynamic_pointer_cast<IfcTextureCoordinateIndices>( ptr_self_entity );
	if( !ptr_self ) { throw BuildingException( "IfcTextureCoordinateIndices::setInverseCounterparts: type mismatch" ); }
	if( m_TexCoordsOf )
	{
		m_TexCoordsOf->m_HasTexCoords_inverse.emplace_back( ptr_self );
	}
}
void IFC4X3::IfcTextureCoordinateIndices::unlinkFromInverseCounterparts()
{
	if( m_TexCoordsOf )
	{
		std::vector<weak_ptr<IfcTextureCoordinateIndices> >& HasTexCoords_inverse = m_TexCoordsOf->m_HasTexCoords_inverse;
		for( auto it_HasTexCoords_inverse = HasTexCoords_inverse.begin(); it_HasTexCoords_inverse != HasTexCoords_inverse.end(); )
		{
			weak_ptr<IfcTextureCoordinateIndices> self_candidate_weak = *it_HasTexCoords_inverse;
			if( self_candidate_weak.expired() )
			{
				++it_HasTexCoords_inverse;
				continue;
			}
			shared_ptr<IfcTextureCoordinateIndices> self_candidate( *it_HasTexCoords_inverse );
			if( self_candidate.get() == this )
			{
				it_HasTexCoords_inverse= HasTexCoords_inverse.erase( it_HasTexCoords_inverse );
			}
			else
			{
				++it_HasTexCoords_inverse;
			}
		}
	}
}
