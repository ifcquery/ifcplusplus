/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcUnitaryControlElementTypeEnum.h"

// TYPE IfcUnitaryControlElementTypeEnum = ENUMERATION OF	(ALARMPANEL	,BASESTATIONCONTROLLER	,COMBINED	,CONTROLPANEL	,GASDETECTIONPANEL	,HUMIDISTAT	,INDICATORPANEL	,MIMICPANEL	,THERMOSTAT	,WEATHERSTATION	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcUnitaryControlElementTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCUNITARYCONTROLELEMENTTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_ALARMPANEL:	stream << ".ALARMPANEL."; break;
		case ENUM_BASESTATIONCONTROLLER:	stream << ".BASESTATIONCONTROLLER."; break;
		case ENUM_COMBINED:	stream << ".COMBINED."; break;
		case ENUM_CONTROLPANEL:	stream << ".CONTROLPANEL."; break;
		case ENUM_GASDETECTIONPANEL:	stream << ".GASDETECTIONPANEL."; break;
		case ENUM_HUMIDISTAT:	stream << ".HUMIDISTAT."; break;
		case ENUM_INDICATORPANEL:	stream << ".INDICATORPANEL."; break;
		case ENUM_MIMICPANEL:	stream << ".MIMICPANEL."; break;
		case ENUM_THERMOSTAT:	stream << ".THERMOSTAT."; break;
		case ENUM_WEATHERSTATION:	stream << ".WEATHERSTATION."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcUnitaryControlElementTypeEnum> IFC4X3::IfcUnitaryControlElementTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcUnitaryControlElementTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcUnitaryControlElementTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcUnitaryControlElementTypeEnum>(); }
	shared_ptr<IfcUnitaryControlElementTypeEnum> type_object( new IfcUnitaryControlElementTypeEnum() );
	if( std_iequal( arg, ".ALARMPANEL." ) )
	{
		type_object->m_enum = IfcUnitaryControlElementTypeEnum::ENUM_ALARMPANEL;
	}
	else if( std_iequal( arg, ".BASESTATIONCONTROLLER." ) )
	{
		type_object->m_enum = IfcUnitaryControlElementTypeEnum::ENUM_BASESTATIONCONTROLLER;
	}
	else if( std_iequal( arg, ".COMBINED." ) )
	{
		type_object->m_enum = IfcUnitaryControlElementTypeEnum::ENUM_COMBINED;
	}
	else if( std_iequal( arg, ".CONTROLPANEL." ) )
	{
		type_object->m_enum = IfcUnitaryControlElementTypeEnum::ENUM_CONTROLPANEL;
	}
	else if( std_iequal( arg, ".GASDETECTIONPANEL." ) )
	{
		type_object->m_enum = IfcUnitaryControlElementTypeEnum::ENUM_GASDETECTIONPANEL;
	}
	else if( std_iequal( arg, ".HUMIDISTAT." ) )
	{
		type_object->m_enum = IfcUnitaryControlElementTypeEnum::ENUM_HUMIDISTAT;
	}
	else if( std_iequal( arg, ".INDICATORPANEL." ) )
	{
		type_object->m_enum = IfcUnitaryControlElementTypeEnum::ENUM_INDICATORPANEL;
	}
	else if( std_iequal( arg, ".MIMICPANEL." ) )
	{
		type_object->m_enum = IfcUnitaryControlElementTypeEnum::ENUM_MIMICPANEL;
	}
	else if( std_iequal( arg, ".THERMOSTAT." ) )
	{
		type_object->m_enum = IfcUnitaryControlElementTypeEnum::ENUM_THERMOSTAT;
	}
	else if( std_iequal( arg, ".WEATHERSTATION." ) )
	{
		type_object->m_enum = IfcUnitaryControlElementTypeEnum::ENUM_WEATHERSTATION;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcUnitaryControlElementTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcUnitaryControlElementTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
