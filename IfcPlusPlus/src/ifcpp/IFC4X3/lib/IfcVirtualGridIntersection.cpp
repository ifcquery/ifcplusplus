/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcGridAxis.h"
#include "ifcpp/IFC4X3/include/IfcLengthMeasure.h"
#include "ifcpp/IFC4X3/include/IfcVirtualGridIntersection.h"

// ENTITY IfcVirtualGridIntersection 
IFC4X3::IfcVirtualGridIntersection::IfcVirtualGridIntersection( int tag ) { m_tag = tag; }
void IFC4X3::IfcVirtualGridIntersection::getStepLine( std::stringstream& stream, size_t precision ) const
{
	stream << "#" << m_tag << "=IFCVIRTUALGRIDINTERSECTION" << "(";
	writeEntityList( stream, m_IntersectingAxes );
	stream << ",";
	writeTypeOfRealList( stream, m_OffsetDistances, false, precision );
	stream << ");";
}
void IFC4X3::IfcVirtualGridIntersection::getStepParameter( std::stringstream& stream, bool /*is_select_type*/, size_t /*precision*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcVirtualGridIntersection::readStepArguments( const std::vector<std::string>& args, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	const size_t num_args = args.size();
	if( num_args > 0 ){readEntityReferenceList( args[0], m_IntersectingAxes, map, errorStream, entityIdNotFound );}
	if( num_args > 1 ){readTypeOfRealList( args[1], m_OffsetDistances );}
	if( num_args != 2 ){ errorStream << "Wrong parameter count for entity IfcVirtualGridIntersection, expecting 2, having " << num_args << ". Entity ID: " << m_tag << std::endl; }
}
void IFC4X3::IfcVirtualGridIntersection::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	shared_ptr<AttributeObjectVector> IntersectingAxes_vec_object( new AttributeObjectVector() );
	std::copy( m_IntersectingAxes.begin(), m_IntersectingAxes.end(), std::back_inserter( IntersectingAxes_vec_object->m_vec ) );
	vec_attributes.emplace_back( std::make_pair( "IntersectingAxes", IntersectingAxes_vec_object ) );
	shared_ptr<AttributeObjectVector> OffsetDistances_vec_object( new AttributeObjectVector() );
	std::copy( m_OffsetDistances.begin(), m_OffsetDistances.end(), std::back_inserter( OffsetDistances_vec_object->m_vec ) );
	vec_attributes.emplace_back( std::make_pair( "OffsetDistances", OffsetDistances_vec_object ) );
}
void IFC4X3::IfcVirtualGridIntersection::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
}
void IFC4X3::IfcVirtualGridIntersection::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	shared_ptr<IfcVirtualGridIntersection> ptr_self = dynamic_pointer_cast<IfcVirtualGridIntersection>( ptr_self_entity );
	if( !ptr_self ) { throw BuildingException( "IfcVirtualGridIntersection::setInverseCounterparts: type mismatch" ); }
	for( size_t i=0; i<m_IntersectingAxes.size(); ++i )
	{
		if( m_IntersectingAxes[i] )
		{
			m_IntersectingAxes[i]->m_HasIntersections_inverse.emplace_back( ptr_self );
		}
	}
}
void IFC4X3::IfcVirtualGridIntersection::unlinkFromInverseCounterparts()
{
	for( size_t i=0; i<m_IntersectingAxes.size(); ++i )
	{
		if( m_IntersectingAxes[i] )
		{
			std::vector<weak_ptr<IfcVirtualGridIntersection> >& HasIntersections_inverse = m_IntersectingAxes[i]->m_HasIntersections_inverse;
			for( auto it_HasIntersections_inverse = HasIntersections_inverse.begin(); it_HasIntersections_inverse != HasIntersections_inverse.end(); )
			{
				weak_ptr<IfcVirtualGridIntersection> self_candidate_weak = *it_HasIntersections_inverse;
				if( self_candidate_weak.expired() )
				{
					++it_HasIntersections_inverse;
					continue;
				}
				shared_ptr<IfcVirtualGridIntersection> self_candidate( *it_HasIntersections_inverse );
				if( self_candidate.get() == this )
				{
					it_HasIntersections_inverse= HasIntersections_inverse.erase( it_HasIntersections_inverse );
				}
				else
				{
					++it_HasIntersections_inverse;
				}
			}
		}
	}
}
