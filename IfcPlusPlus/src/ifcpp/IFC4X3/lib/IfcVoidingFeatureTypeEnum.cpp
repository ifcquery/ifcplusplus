/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcVoidingFeatureTypeEnum.h"

// TYPE IfcVoidingFeatureTypeEnum = ENUMERATION OF	(CHAMFER	,CUTOUT	,EDGE	,HOLE	,MITER	,NOTCH	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcVoidingFeatureTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCVOIDINGFEATURETYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_CHAMFER:	stream << ".CHAMFER."; break;
		case ENUM_CUTOUT:	stream << ".CUTOUT."; break;
		case ENUM_EDGE:	stream << ".EDGE."; break;
		case ENUM_HOLE:	stream << ".HOLE."; break;
		case ENUM_MITER:	stream << ".MITER."; break;
		case ENUM_NOTCH:	stream << ".NOTCH."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcVoidingFeatureTypeEnum> IFC4X3::IfcVoidingFeatureTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcVoidingFeatureTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcVoidingFeatureTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcVoidingFeatureTypeEnum>(); }
	shared_ptr<IfcVoidingFeatureTypeEnum> type_object( new IfcVoidingFeatureTypeEnum() );
	if( std_iequal( arg, ".CHAMFER." ) )
	{
		type_object->m_enum = IfcVoidingFeatureTypeEnum::ENUM_CHAMFER;
	}
	else if( std_iequal( arg, ".CUTOUT." ) )
	{
		type_object->m_enum = IfcVoidingFeatureTypeEnum::ENUM_CUTOUT;
	}
	else if( std_iequal( arg, ".EDGE." ) )
	{
		type_object->m_enum = IfcVoidingFeatureTypeEnum::ENUM_EDGE;
	}
	else if( std_iequal( arg, ".HOLE." ) )
	{
		type_object->m_enum = IfcVoidingFeatureTypeEnum::ENUM_HOLE;
	}
	else if( std_iequal( arg, ".MITER." ) )
	{
		type_object->m_enum = IfcVoidingFeatureTypeEnum::ENUM_MITER;
	}
	else if( std_iequal( arg, ".NOTCH." ) )
	{
		type_object->m_enum = IfcVoidingFeatureTypeEnum::ENUM_NOTCH;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcVoidingFeatureTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcVoidingFeatureTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
