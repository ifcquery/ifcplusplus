/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcWallTypeEnum.h"

// TYPE IfcWallTypeEnum = ENUMERATION OF	(ELEMENTEDWALL	,MOVABLE	,PARAPET	,PARTITIONING	,PLUMBINGWALL	,POLYGONAL	,RETAININGWALL	,SHEAR	,SOLIDWALL	,STANDARD	,WAVEWALL	,USERDEFINED	,NOTDEFINED);
void IFC4X3::IfcWallTypeEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCWALLTYPEENUM("; }
	switch( m_enum )
	{
		case ENUM_ELEMENTEDWALL:	stream << ".ELEMENTEDWALL."; break;
		case ENUM_MOVABLE:	stream << ".MOVABLE."; break;
		case ENUM_PARAPET:	stream << ".PARAPET."; break;
		case ENUM_PARTITIONING:	stream << ".PARTITIONING."; break;
		case ENUM_PLUMBINGWALL:	stream << ".PLUMBINGWALL."; break;
		case ENUM_POLYGONAL:	stream << ".POLYGONAL."; break;
		case ENUM_RETAININGWALL:	stream << ".RETAININGWALL."; break;
		case ENUM_SHEAR:	stream << ".SHEAR."; break;
		case ENUM_SOLIDWALL:	stream << ".SOLIDWALL."; break;
		case ENUM_STANDARD:	stream << ".STANDARD."; break;
		case ENUM_WAVEWALL:	stream << ".WAVEWALL."; break;
		case ENUM_USERDEFINED:	stream << ".USERDEFINED."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcWallTypeEnum> IFC4X3::IfcWallTypeEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcWallTypeEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcWallTypeEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcWallTypeEnum>(); }
	shared_ptr<IfcWallTypeEnum> type_object( new IfcWallTypeEnum() );
	if( std_iequal( arg, ".ELEMENTEDWALL." ) )
	{
		type_object->m_enum = IfcWallTypeEnum::ENUM_ELEMENTEDWALL;
	}
	else if( std_iequal( arg, ".MOVABLE." ) )
	{
		type_object->m_enum = IfcWallTypeEnum::ENUM_MOVABLE;
	}
	else if( std_iequal( arg, ".PARAPET." ) )
	{
		type_object->m_enum = IfcWallTypeEnum::ENUM_PARAPET;
	}
	else if( std_iequal( arg, ".PARTITIONING." ) )
	{
		type_object->m_enum = IfcWallTypeEnum::ENUM_PARTITIONING;
	}
	else if( std_iequal( arg, ".PLUMBINGWALL." ) )
	{
		type_object->m_enum = IfcWallTypeEnum::ENUM_PLUMBINGWALL;
	}
	else if( std_iequal( arg, ".POLYGONAL." ) )
	{
		type_object->m_enum = IfcWallTypeEnum::ENUM_POLYGONAL;
	}
	else if( std_iequal( arg, ".RETAININGWALL." ) )
	{
		type_object->m_enum = IfcWallTypeEnum::ENUM_RETAININGWALL;
	}
	else if( std_iequal( arg, ".SHEAR." ) )
	{
		type_object->m_enum = IfcWallTypeEnum::ENUM_SHEAR;
	}
	else if( std_iequal( arg, ".SOLIDWALL." ) )
	{
		type_object->m_enum = IfcWallTypeEnum::ENUM_SOLIDWALL;
	}
	else if( std_iequal( arg, ".STANDARD." ) )
	{
		type_object->m_enum = IfcWallTypeEnum::ENUM_STANDARD;
	}
	else if( std_iequal( arg, ".WAVEWALL." ) )
	{
		type_object->m_enum = IfcWallTypeEnum::ENUM_WAVEWALL;
	}
	else if( std_iequal( arg, ".USERDEFINED." ) )
	{
		type_object->m_enum = IfcWallTypeEnum::ENUM_USERDEFINED;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcWallTypeEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
