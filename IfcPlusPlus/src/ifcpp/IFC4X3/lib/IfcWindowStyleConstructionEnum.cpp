/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */

#include <sstream>
#include <limits>
#include <map>
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/model/BasicTypes.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/IFC4X3/include/IfcWindowStyleConstructionEnum.h"

// TYPE IfcWindowStyleConstructionEnum = ENUMERATION OF	(ALUMINIUM	,ALUMINIUM_WOOD	,HIGH_GRADE_STEEL	,OTHER_CONSTRUCTION	,PLASTIC	,STEEL	,WOOD	,NOTDEFINED);
void IFC4X3::IfcWindowStyleConstructionEnum::getStepParameter( std::stringstream& stream, bool is_select_type, size_t precision ) const
{
	if( is_select_type ) { stream << "IFCWINDOWSTYLECONSTRUCTIONENUM("; }
	switch( m_enum )
	{
		case ENUM_ALUMINIUM:	stream << ".ALUMINIUM."; break;
		case ENUM_ALUMINIUM_WOOD:	stream << ".ALUMINIUM_WOOD."; break;
		case ENUM_HIGH_GRADE_STEEL:	stream << ".HIGH_GRADE_STEEL."; break;
		case ENUM_OTHER_CONSTRUCTION:	stream << ".OTHER_CONSTRUCTION."; break;
		case ENUM_PLASTIC:	stream << ".PLASTIC."; break;
		case ENUM_STEEL:	stream << ".STEEL."; break;
		case ENUM_WOOD:	stream << ".WOOD."; break;
		case ENUM_NOTDEFINED:	stream << ".NOTDEFINED."; break;
	}
	if( is_select_type ) { stream << ")"; }
}
shared_ptr<IFC4X3::IfcWindowStyleConstructionEnum> IFC4X3::IfcWindowStyleConstructionEnum::createObjectFromSTEP( const std::string& arg, const BuildingModelMapType<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream, std::unordered_set<int>& entityIdNotFound )
{
	if( arg.size() == 0 ) { return shared_ptr<IfcWindowStyleConstructionEnum>(); }
	if( arg.compare( "$" ) == 0 ) { return shared_ptr<IfcWindowStyleConstructionEnum>(); }
	if( arg.compare( "*" ) == 0 ) { return shared_ptr<IfcWindowStyleConstructionEnum>(); }
	shared_ptr<IfcWindowStyleConstructionEnum> type_object( new IfcWindowStyleConstructionEnum() );
	if( std_iequal( arg, ".ALUMINIUM." ) )
	{
		type_object->m_enum = IfcWindowStyleConstructionEnum::ENUM_ALUMINIUM;
	}
	else if( std_iequal( arg, ".ALUMINIUM_WOOD." ) )
	{
		type_object->m_enum = IfcWindowStyleConstructionEnum::ENUM_ALUMINIUM_WOOD;
	}
	else if( std_iequal( arg, ".HIGH_GRADE_STEEL." ) )
	{
		type_object->m_enum = IfcWindowStyleConstructionEnum::ENUM_HIGH_GRADE_STEEL;
	}
	else if( std_iequal( arg, ".OTHER_CONSTRUCTION." ) )
	{
		type_object->m_enum = IfcWindowStyleConstructionEnum::ENUM_OTHER_CONSTRUCTION;
	}
	else if( std_iequal( arg, ".PLASTIC." ) )
	{
		type_object->m_enum = IfcWindowStyleConstructionEnum::ENUM_PLASTIC;
	}
	else if( std_iequal( arg, ".STEEL." ) )
	{
		type_object->m_enum = IfcWindowStyleConstructionEnum::ENUM_STEEL;
	}
	else if( std_iequal( arg, ".WOOD." ) )
	{
		type_object->m_enum = IfcWindowStyleConstructionEnum::ENUM_WOOD;
	}
	else if( std_iequal( arg, ".NOTDEFINED." ) )
	{
		type_object->m_enum = IfcWindowStyleConstructionEnum::ENUM_NOTDEFINED;
	}
	return type_object;
}
